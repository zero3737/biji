<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JSP 教程</title>
    <url>/posts/12fc1c4b/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><h2 id="JSP-生命周期"><a href="#JSP-生命周期" class="headerlink" title="JSP 生命周期"></a>JSP 生命周期</h2><p>JSP 生命周期就是从创建到销毁的整个过程，类似于 servlet 生命周期，区别在于 JSP 生命周期还包括将 JSP 文件编译成 servlet。</p><h3 id="JSP-编译"><a href="#JSP-编译" class="headerlink" title="JSP 编译"></a>JSP 编译</h3><p>当浏览器请求 JSP 页面时，JSP 引擎会首先去检查是否需要编译这个文件。如果这个文件没有被编译过，或者在上次编译后被更改过，则编译这个 JSP 文件。</p><p>编译的过程包括三个步骤：</p><ol><li>解析 JSP 文件。</li><li>将 JSP 文件转为 servlet。</li><li>编译 servlet。</li></ol><h3 id="JSP-初始化"><a href="#JSP-初始化" class="headerlink" title="JSP 初始化"></a>JSP 初始化</h3><p>容器载入 JSP 文件后，它会在为请求提供任何服务前调用 jspInit() 方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jspInit</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JSP-执行"><a href="#JSP-执行" class="headerlink" title="JSP 执行"></a>JSP 执行</h3><p>这一阶段描述了 JSP 生命周期中一切与请求相关的交互行为，直到被销毁。当 JSP 网页完成初始化后，JSP 引擎将会调用_jspService() 方法。</p><p>_jspService() 方法需要一个 HttpServletRequest 对象和一个 HttpServletResponse 对象作为它的参数，就像下面这样：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">_jspService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 服务端处理代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JSP-清理"><a href="#JSP-清理" class="headerlink" title="JSP 清理"></a>JSP 清理</h3><p>JSP 生命周期的销毁阶段描述了当一个 JSP 网页从容器中被移除时所发生的一切。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jspDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 清理代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JSP-语法"><a href="#JSP-语法" class="headerlink" title="JSP 语法"></a>JSP 语法</h2><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    JAVA 代码</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>等价语句：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;jsp:scriptlet&gt;</span><br><span class="line">    代码片段</span><br><span class="line">&lt;/jsp:scriptlet&gt;</span><br></pre></td></tr></table></figure><p>注意：脚本程序中的代码会翻译到 _jspService 方法内部。</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%! <span class="keyword">int</span> i = <span class="number">0</span>; %&gt;</span><br><span class="line">&lt;%! <span class="keyword">int</span> a, b, c; %&gt;</span><br><span class="line">&lt;%! Circle a = <span class="keyword">new</span> Circle(<span class="number">2.0</span>); %&gt;</span><br></pre></td></tr></table></figure><p>等价语句：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;jsp:declaration&gt;</span><br><span class="line">    代码片段</span><br><span class="line">&lt;/jsp:declaration&gt;</span><br></pre></td></tr></table></figure><p>注意：声明语句块中的内容，将被 JSP 引擎翻译成 Servlet 成员的内容，是不会被包含到 _jspService 方法中的。</p><p>一个 JSP 表达式中包含的脚本语言表达式，先被转化成 String，然后插入到表达式出现的地方。由于表达式的值会被转化成 String，所以您可以在一个文本行中使用表达式而不用去管它是否是 HTML 标签。</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%= 表达式 %&gt;</span><br></pre></td></tr></table></figure><p>等价语句：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;jsp:expression&gt;</span><br><span class="line">   表达式</span><br><span class="line">&lt;/jsp:expression&gt;</span><br></pre></td></tr></table></figure><p>注意：JSP 表达式中的代码会翻译到 _jspService 方法内部。</p><h2 id="JSP-注释"><a href="#JSP-注释" class="headerlink" title="JSP 注释"></a>JSP 注释</h2><p>JSP 文件中可以写 HTML 注释、JAVA 注释和注释。</p><table><thead><tr><th>语法</th><th></th></tr></thead><tbody><tr><td><code>&lt;%-- 注释 --%&gt;</code></td><td>JSP 注释，只能在 JSP 文件中查看</td></tr><tr><td><code>&lt;!-- 注释 --&gt;</code></td><td>HTML 注释，可以在浏览器源码、JSP 文件和 Servlet 中查看</td></tr><tr><td><code>// 注释</code></td><td>JAVA 单行注释，可以在 JSP 文件中和 Servlet 中查看</td></tr><tr><td><code>/* 注释 */</code></td><td>JAVA 多行注释</td></tr></tbody></table><p>注意：除了 JAVA 注释写在脚本程序中，HTML 注释和 JSP 注释只能写在脚本程序外。</p><h2 id="JSP-指令"><a href="#JSP-指令" class="headerlink" title="JSP 指令"></a>JSP 指令</h2><p>JSP 指令用来设置与整个 JSP 页面相关的属性。</p><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;%@ page ... %&gt;</code></td><td>定义页面的依赖属性，比如脚本语言、error 页面、缓存需求等等</td></tr><tr><td><code>&lt;%@ include ... %&gt;</code></td><td>包含其他文件</td></tr><tr><td><code>&lt;%@ taglib ... %&gt;</code></td><td>引入标签库的定义，可以是自定义标签</td></tr></tbody></table><h3 id="page-指令"><a href="#page-指令" class="headerlink" title="page 指令"></a>page 指令</h3><p>page 指令包含多个相关属性，用于设置 JSP 的功能。</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>contentType</td><td>指定当前 JSP 页面的 MIME 类型和字符编码</td></tr><tr><td>import</td><td>导入要使用的 Java 类</td></tr><tr><td>language</td><td>定义 JSP 页面所用的脚本语言，默认是 Java（只支持 JAVA）</td></tr><tr><td>pageEncoding</td><td>设置文件编码</td></tr><tr><td>session</td><td>指定当前 JSP 页面是否能获得当前用户的 session 对象，默认是 true</td></tr><tr><td>errorPage</td><td>指定当 JSP 页面发生异常时需要转向的错误处理页面</td></tr><tr><td>isErrorPage</td><td>指定当前页面是否为异常页，只有该值为 true 时才能获取 exception 对象</td></tr><tr><td>extends</td><td>指定编译后的servlet继承哪一个类</td></tr></tbody></table><h2 id="JSP-动作元素"><a href="#JSP-动作元素" class="headerlink" title="JSP 动作元素"></a>JSP 动作元素</h2><p><code>&lt;jsp:include&gt;</code> 动作元素</p><p>动态包含和静态包含区别是否单独生成java文件不一样</p><h2 id="隐式对象"><a href="#隐式对象" class="headerlink" title="隐式对象"></a>隐式对象</h2><h2 id="九大内置对象和四大作用域"><a href="#九大内置对象和四大作用域" class="headerlink" title="九大内置对象和四大作用域"></a>九大内置对象和四大作用域</h2><h2 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h2><p>目的减少jsp脚本的编写。主要从四大域中取数据。</p><p>EL表达式可以简写，依次从pageContext域、request域、session域、application域中获取数据。</p><p>EL表达式内置11对象</p><p>EL执行表达式</p><p>EL表达式获取对象的值，直接写属性名即可，不用写getter、setter方法获取。</p><h2 id="JSTL"><a href="#JSTL" class="headerlink" title="JSTL"></a>JSTL</h2><p>JSP标准标签库，可以嵌入在jsp页面中使用标签的形式完成业务逻辑等功能。</p><p>jstl可以很方便的包含html标签。</p><h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><ol><li>引入jar包</li><li>通过taglib引入标签库</li></ol><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>if</p><p>foreach 自动把数据存到page域中</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">foreach begin=<span class="number">0</span> end=<span class="number">5</span> <span class="keyword">var</span>=i</span><br><span class="line">    $&#123;i&#125;</span><br><span class="line">feoreach</span><br></pre></td></tr></table></figure><p>foreach 遍历 list</p><p>foreach map</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript进阶之事件</title>
    <url>/posts/8dc1959/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><p>本文主要介绍 JavaScript 中事件的相关概念以及常用事件。</p><a id="more"></a><hr><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><ul><li><p>事件三要素：事件源、事件 和 事件驱动程序。</p></li><li><p>事件绑定可以分为匿名函数绑定和函数名绑定。</p><ul><li><p>匿名函数绑定：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">事件 = function() &#123;</span><br><span class="line"></span><br><span class="line">    事件驱动程序；</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>函数名绑定：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function 函数名 () &#123;</span><br><span class="line"></span><br><span class="line">    事件驱动程序；</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">事件 = 函数名；</span><br></pre></td></tr></table></figure></li></ul></li><li><p>循环中绑定事件问题，实质是同步和异步问题：</p><ul><li>for 循环是同步事件。</li><li>执行事件驱动程序是异步事件。</li><li>浏览器解析 js 代码，会把 for 自动执行。</li><li>而执行事件驱动程序需要用户触发事件才能执行。当事件驱动程序要访问 for 循环中的变量，for 循环已经执行完毕。所以每次访问的变量都是相同的值。</li></ul></li><li><p>return false 和 return 的区别？</p><ul><li>return 返回 null，起到中断方法执行的效果，只要不 return false 事件处理函数将会继续执行，表单将提交。</li><li>return false，事件处理函数会取消事件，不再继续向上冒泡。比如表单将终止提交。</li><li>在标签中绑定事件，必须在标签中 return false（阻止事件冒泡），在事件处理函数内 return false 不会阻止事件冒泡。在 JS 文件中绑定事件，在事件处理函数内 return false 可以阻止事件冒泡。</li></ul></li><li><p>注册事件</p><ul><li>通过元素的事件属性、 addEventListener() 以及 attachEvent() 方法进行事件的注册。</li></ul></li><li><p>注销事件</p><ul><li>通过 removeEventListener()、detachEvent() 以及事件属性赋值为 null 来进行事件的注销。</li><li>给对象的事件属性赋值为 null，可取消此事件的所有注册过的处理事件程序。</li></ul></li><li><p>事件传播三个阶段：事件捕获、事件目标阶段、事件冒泡。</p><ul><li>事件传播顺序：<ol><li>先从根节点向下执行捕获回调函数，一直到实际触发事件的元素的父元素位置，捕获过程结束。</li><li>然后事件传播到实际触发事件的 DOM 元素上，为事件目标阶段。</li><li>在事件目标阶段，无论 addEventListener 函数第三个参数是 true 还是 false 绑定的回调函数都会执行。事件的执行顺序按回调函数的添加顺序执行。</li><li>事件冒泡阶段开始。</li></ol></li><li>事件冒泡浏览器默认开启，事件捕获默认关闭。同一事件处理函数在捕获阶段和冒泡阶段可以先后执行。</li></ul></li><li><p>事件循环</p><ul><li><p>执行循序：</p><ol><li>同步和异步任务分别进入不同的执行”场所”，同步的进入主线程，异步的进入 Event Table 并注册函数。</li><li>当指定的事情完成时，Event Table 会将这个函数移入 Event Queue。</li><li>主线程内的任务执行完毕为空，会去 Event Queue 读取对应的函数，进入主线程执行。</li><li>上述过程会不断重复。</li></ol></li><li><p>js 引擎存在 monitoring process 进程，会持续不断的检查主线程执行栈是否为空，一旦为空，就会去 Event Queue 那里检查是否有等待被调用的函数。</p></li><li><p>定时器是异步执行的。</p><ul><li><code>setTimeout( fn, 0 )</code>的含义是：主线程执行栈内的同步任务全部执行完成，栈为空就马上执行。该函数最低延时 4 毫秒。</li><li>setInterval 的回调函数 fn 执行时间超过了延迟时间 ms，那么就完全看不出来有时间间隔了。</li></ul></li><li><p>宏任务和微任务。</p><ul><li>macro-task（宏任务）：包括整体代码 script, setTimeout, setInterval</li><li>micro-task（微任务）：Promise, process.nextTick</li><li>事件循环任务执行循序。<ul><li>进入整体代码（宏任务）后，开始第一次循环。接着执行所有的微任务。然后再次从宏任务开始，找到其中一个任务队列执行完毕，再执行所有的微任务。</li></ul></li></ul></li></ul></li></ul><h3 id="DOM-对象拥有的事件属性"><a href="#DOM-对象拥有的事件属性" class="headerlink" title="DOM 对象拥有的事件属性"></a>DOM 对象拥有的事件属性</h3><h4 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h4><ul><li>onclick 点击事件会在对象被点击时发生。</li><li>onmousedown 事件会在鼠标按键被按下时发生。<ul><li>onmousedown 和 onclick 的区别：<ul><li>onclick 是在鼠标点击弹起之后触发的事件。</li><li>onmousedown 是在鼠标按下之后触发的事件。</li></ul></li></ul></li><li>onmouseup 当鼠标弹起时触发。</li><li>ondblclick 事件会在对象被双击时发生。</li><li>onmouseover 事件会在鼠标指针移动到指定的对象上时发生。</li><li>onmouseout 事件会在鼠标指针移出指定的对象时发生。</li><li>onmousemove 事件会在指定对象移动 1 像素时触发，频率非常高。</li></ul><h4 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h4><ul><li>onkeyup 某个键盘按键被松开触发。</li></ul><h4 id="表单事件"><a href="#表单事件" class="headerlink" title="表单事件"></a>表单事件</h4><ul><li>onfocus 获得焦点。</li><li>onblur 失去焦点。</li><li>onchange 事件会在域的内容改变时发生。<ul><li>支持该事件的 HTML 标签：<ul><li>&lt;input type=”text”&gt;, &lt;select&gt;, &lt;textarea&gt;</li></ul></li><li>支持该事件的 JavaScript 对象：<ul><li>fileUpload, select, text, textarea。</li><li>当用于 select 元素时，change 事件会在<strong>选择某个选项</strong>时发生。</li><li>当用于 text field 或 text area 时，该事件会在元素<strong>失去焦点</strong>时发生。</li></ul></li></ul></li><li>oninput 用户<strong>输入时</strong>触发。<ul><li>该事件在 &lt;input&gt; 或 &lt;textarea&gt; 元素的值发生改变时触发。</li></ul></li><li></li></ul><h4 id="框架-对象（Frame-Object）事件"><a href="#框架-对象（Frame-Object）事件" class="headerlink" title="框架/对象（Frame/Object）事件"></a>框架/对象（Frame/Object）事件</h4><ul><li>onload 加载事件在页面内容加载完成之后立即执行相应的函数。</li><li>DOMContentLoaded 事件触发时，仅当 DOM 加载完成，不包括样式表，图片，flash。<ul><li>DOM 文档加载的步骤为：<ol><li>解析 HTML 结构。</li><li>加载外部脚本和样式表文件。</li><li>解析并执行脚本代码。</li><li>DOM 树构建完成。//DOMContentLoaded</li><li>加载图片等外部文件。</li><li>页面加载完毕。 //load</li></ol></li></ul></li><li>onscroll 事件在元素滚动条在滚动时触发。</li><li>onresize 事件会在窗口或框架被调整大小时发生。</li></ul><h4 id="动画事件"><a href="#动画事件" class="headerlink" title="动画事件"></a>动画事件</h4><ul><li>animationend 该事件在 CSS 动画结束播放时触发。</li></ul><h3 id="event-对象"><a href="#event-对象" class="headerlink" title="event 对象"></a>event 对象</h3><ul><li>只要触发 DOM 上的某个事件时，会产生一个事件对象 event，<strong>默认传参给事件驱动函数</strong>，这个对象中包含着所有与事件有关的信息。</li><li>所有浏览器都支持 event 对象，但支持的方式不同。比如 IE6-8 只能通过 window.event 获取事件对象，而其他的则可以直接获取。<ul><li>兼容性的写法：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var event = event || window.event;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="event-对象中的属性"><a href="#event-对象中的属性" class="headerlink" title="event 对象中的属性"></a>event 对象中的属性</h4><ul><li>clientX 光标相对于该网页（可视区域，不算滚动条）的水平位置。</li><li>clientY 光标相对于该网页（可视区域，不算滚动条）的垂直位置。</li><li>pageX 光标相对于该网页（算滚动条）的水平位置（不适用与 IE）。</li><li>pageY 光标相对于该网页（算滚动条）的垂直位置（不适用与 IE）。</li><li>screenX 光标相对于该屏幕的水平位置。</li><li>screenY 光标相对于该屏幕的水平位置。</li><li>type 事件的类型。</li><li>target 获取该事件是由哪个事件源产生。<ul><li>js 中发生事件冒泡，this 指向就会改变的，但 event.target 不会变化，它永远指向触发事件的 DOM 元素本身。运用这个特点，可以实现事件委托。</li></ul></li></ul><h4 id="event-对象中的-API"><a href="#event-对象中的-API" class="headerlink" title="event 对象中的 API"></a>event 对象中的 API</h4><p>preventDefault() 通知 Web 浏览器不要执行与事件关联的<strong>默认动作</strong>。</p><p>stopPropagation() 停止事件的传播，阻止它被分派到其他 Document 节点。</p><h2 id="BOM-DOM"><a href="#BOM-DOM" class="headerlink" title="BOM/DOM"></a>BOM/DOM</h2><ul><li>DOM：JavaScript 操作网页上的元素 API。</li><li>BOM：JavaScript 操作浏览器的部分功能 API。<ul><li>BOM 缺乏标准，JavaScript 语法的标准化组织是 ECMA，DOM 的标准化组织是 W3C。</li></ul></li><li>所有全局的变量和方法都属于 window 对象。window 对象是 BOM 的顶层（核心）对象。</li><li>document 是 window 对象里的一个子对象。document 是 DOM 的顶层。</li><li>document 代表整个网页，不代表任何 HTML 标签，但它是 html 节点的父节点。Document 对象使我们可以从脚本中对 HTML 页面中的所有元素进行访问。</li></ul><h3 id="Console-对象"><a href="#Console-对象" class="headerlink" title="Console 对象"></a>Console 对象</h3><p>JavaScript 原生中默认是没有 Console 对象，这是宿主对象（也就是游览器）提供的内置对象。</p><ul><li>方法：<ul><li><code>console.log( &quot;输出内容&quot; );</code><ul><li>将输出内容输出到控制台。</li></ul></li><li><code>console.warn( &quot;警告内容&quot; );</code><ul><li>将警告内容输出到控制台。</li></ul></li><li><code>console.error( &quot;错误内容&quot; );</code><ul><li>错误内容输出到控制台。</li></ul></li></ul></li></ul><h3 id="window-对象（BOM）"><a href="#window-对象（BOM）" class="headerlink" title="window 对象（BOM）"></a>window 对象（BOM）</h3><ul><li><p><code>alert( &quot;输出内容&quot; );</code></p><ul><li>alert 函数通过弹窗方式输出内容。</li></ul></li><li><p><code>confirm( &quot;输入内容&quot; );</code></p><ul><li>将输出内容进行逻辑判断。返回 boolean 类型。如果点击确定返回 true，点击取消返回 false。</li></ul></li><li><p>prompt() 方法用于显示可提示用户进行输入的对话框。</p><ul><li>语法：<code>prompt(text, defaultText);</code><ul><li>text<ul><li>可选。要在对话框中显示的纯文本（而不是 HTML 格式的文本）。</li></ul></li><li>defaultText<ul><li>可选。默认的输入文本。</li></ul></li></ul></li></ul></li><li><p><code>open( URL, name, features, replace );</code></p><ul><li>用于打开一个新的浏览器窗口或查找一个已命名的窗口。</li></ul></li><li><p><code>close();</code></p><ul><li>用于关闭浏览器窗口。</li></ul></li><li><p><code>setInterval( code, millisec );</code></p><ul><li>方法（定时器）可按照指定的周期（以毫秒计）来调用函数或计算表达式。</li><li>code<ul><li>必需。要调用的函数或要执行的代码串。</li></ul></li><li>millisec<ul><li>必须。周期性执行或调用 code 之间的时间间隔，以毫秒计。</li></ul></li></ul></li><li><p><code>clearInterval( id_of_setinterval )</code></p><ul><li>id_of_setinterval<ul><li>调用 setInterval() 函数时所获得的返回值，使用该返回标识符作为参数，可以取消该 setInterval() 所设定的定时执行操作。</li></ul></li></ul></li><li><p><code>setTimeout( code, milliseconds );</code></p><ul><li>调用一次性定时器。</li><li>code/function<ul><li>必需。要调用的函数后要执行的 JavaScript 代码串。</li></ul></li><li>milliseconds<ul><li>必需。在执行代码前需等待的毫秒数。</li></ul></li></ul></li><li><p><code>clearTimeout( id_of_settimeout );</code></p><ul><li>清除一次性定时器。</li><li>id_of_settimeout<ul><li>由 setTimeout() 返回的 ID 值。该值标识要取消的延迟执行代码块。</li></ul></li></ul></li><li><p>innerWidth 返回窗口的文档显示区的宽度。</p></li><li><p>innerHeight 返回窗口的文档显示区的高度。</p></li><li><p><code>window.print();</code></p><ul><li>控制打印机网页打印：</li></ul></li><li><p><code>requestAnimationFrame( callback );</code></p><ul><li>屏幕刷新前执行回调函数。</li><li>页面被隐藏或最小化时，回调函数不会执行。当页面被激活时，动画就从上次停留的地方继续执行。</li></ul></li><li><p><code>encodeURI( URIstring );</code></p><ul><li>可把字符串作为 URI 进行编码。</li><li>URIstring<ul><li>必需。一个字符串，含有 URI 或其他要编码的文本。</li></ul></li></ul></li><li><p><code>decodeURI( URIstring );</code></p><ul><li>可对 encodeURI() 函数编码过的 URI 进行解码。</li><li>URIstring<ul><li>必需。一个字符串，含有要解码的 URI 或其他要解码的文本。</li></ul></li></ul></li><li><p><code>getComputedStyle( element, [ pseudoElt ] );</code></p><ul><li>该方法返回一个对象，该对象在应用活动样式表并解析这些值可能包含的任何基本计算后，报告元素的所有 CSS 属性的值。单个 CSS 属性值通过对象提供的 API 或通过使用 CSS 属性名称进行索引来访问。</li></ul></li><li><p><code>postMessage( message, targetOrigin, [transfer] );</code></p><ul><li>postMessage() 可以安全地实现跨源通信。</li><li>message 将要发送到其他 window 的数据。它将会被结构化克隆算法序列化。这意味着你可以不受什么限制的将数据对象安全的传送给目标窗口而无需自己序列化。</li><li>targetOrigin 通过窗口的 origin 属性来指定哪些窗口能接收到消息事件，其值可以是字符串”*”（表示无限制）或者一个 URI。在发送消息的时候，如果目标窗口的协议、主机地址或端口这三者的任意一项不匹配 targetOrigin 提供的值，那么消息就不会被发送。</li><li>通过 message 事件产生的 event 对象获取 postMessage() 方法发送的数据。<ul><li>event.data<ul><li>从其他 window 中传递过来的对象。</li></ul></li></ul></li></ul></li></ul><h3 id="Location-对象（BOM）"><a href="#Location-对象（BOM）" class="headerlink" title="Location 对象（BOM）"></a>Location 对象（BOM）</h3><ul><li><p>href</p><ul><li>设置或返回完整的 URL。</li></ul></li><li><p>reload()</p><ul><li>刷新当前页面。</li></ul></li><li><p>hash</p><ul><li><p>hash 属性是一个可读可写的字符串，该字符串是 URL 的锚部分（从 ## 号开始的部分）。</p></li><li><p>设置：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location.hash = anchorname;</span><br></pre></td></tr></table></figure></li><li><p>读取：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(location.hash); // 读取结果为：#anchorname</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="Screen-对象（BOM）"><a href="#Screen-对象（BOM）" class="headerlink" title="Screen 对象（BOM）"></a>Screen 对象（BOM）</h3><ul><li>width<ul><li>返回显示器屏幕的宽度。</li></ul></li><li>height<ul><li>返回显示屏幕的高度。</li></ul></li></ul><h3 id="Navigator-对象（BOM）"><a href="#Navigator-对象（BOM）" class="headerlink" title="Navigator 对象（BOM）"></a>Navigator 对象（BOM）</h3><ul><li>userAgent<ul><li>返回由客户机发送服务器的 user-agent 头部的值。</li></ul></li><li><code>navigator.getUserMedia ( constraints, successCallback, errorCallback );</code><ul><li>获取摄像头</li></ul></li></ul><h3 id="URL-对象"><a href="#URL-对象" class="headerlink" title="URL 对象"></a>URL 对象</h3><ul><li><code>createObjectURL(blob);</code><ul><li>blob 参数是用来创建 URL 的 File 对象或者 Blob 对象。</li></ul></li></ul><h3 id="document-对象"><a href="#document-对象" class="headerlink" title="document 对象"></a>document 对象</h3><ul><li><code>getElementById( &quot;id&quot; );</code><ul><li>通过 id 属性获取 DOM 对象。返回一个对象。</li></ul></li><li><code>getElementsByClassName( &quot;class&quot; );</code><ul><li>通过 class 属性获取 DOM 对象，返回一个集合。</li></ul></li><li><code>getElementsByTagName( &quot;标签名&quot; );</code><ul><li>通过标签名获取 DOM 对象，返回一个集合。</li></ul></li><li><code>getElementsByName( &quot;name&quot; );</code><ul><li>通过 name 属性获取 DOM 对象，返回一个集合。</li></ul></li><li><code>createElement( &quot;标签&quot; );</code><ul><li>创建结点。</li></ul></li><li>documentElement<ul><li>对象是整个节点树的根节点 root，即&lt;html&gt; 标签；</li></ul></li><li>body<ul><li>获取身体，即&lt;body&gt; 标签。</li><li>body 的高度由网页的内容决定。获取内容的高度，就是获取 body 的高度（height）。</li></ul></li><li>title<ul><li>获取标题。</li></ul></li><li>compatMode<ul><li>其值为 CSS1Compat 对应标准模式（遵循 W3C 标准）。</li><li>其值为 BackCompat 对应混杂模式（按照浏览器标准）。</li></ul></li></ul><h3 id="核心-DOM"><a href="#核心-DOM" class="headerlink" title="核心 DOM"></a>核心 DOM</h3><ul><li><p>offsetWidth</p><ul><li>返回元素的宽度（包括元素宽度、内边距和边框）</li></ul></li><li><p>offsetHeight</p><ul><li>返回元素的高度（包括元素高度、内边距和边框）</li></ul></li><li><p>clientWidth</p><ul><li>返回元素的宽度（包括元素宽度、内边距，不包括边框）</li></ul></li><li><p>clientHeight</p><ul><li>返回元素的高度（包括元素高度、内边距，不包括边框）</li></ul></li><li><p>scrollWidth</p><ul><li>返回元素的宽度（包括元素宽度、内边距和溢出尺寸，不包括边框）</li></ul></li><li><p>scrollHeigh</p><ul><li>返回元素的高度（包括元素高度、内边距和溢出尺寸，不包括边框）</li></ul></li><li><p>offsetTop</p><ul><li>返回元素的上外缘到最近采用定位父元素内壁的距离，如果父元素中没有采用定位的，则是获取上外边缘到文档内壁的距离。</li></ul></li><li><p>offsetLeft</p><ul><li>此属性和 offsetTop 的原理一样。</li></ul></li><li><p>scrollTop</p><ul><li>滚动条距离最顶端的距离。</li></ul></li><li><p>scrollLeft</p><ul><li>滚动条距离最左边的距离。</li></ul></li><li><p>pageYOffset</p><ul><li>scrollTop 兼容性写法。</li></ul></li><li><p>pageXOffset</p><ul><li>scrollLeft 兼容性写法。</li></ul></li><li><p><code>querySelector( &quot;CSS 选择器&quot; );</code></p><ul><li>通过选择器获取第一个 DOM 对象。</li></ul></li><li><p><code>querySelectorAll( &quot;CSS 选择器&quot; );</code></p><ul><li>通过选择器返回所有 DOM 对象。</li></ul></li><li><p><code>element.addEventListener(event, function, useCapture)</code>用于向指定元素添加事件句柄。</p><ul><li>event<ul><li>必须。字符串，指定事件名。不要使用 “on” 前缀。</li></ul></li><li>function<ul><li>必须。指定要事件触发时执行的函数。</li></ul></li><li>useCapture<ul><li>可选。布尔值，指定事件是否在捕获或冒泡阶段执行。<ul><li>true<ul><li>事件句柄在捕获阶段执行。</li></ul></li><li>false<ul><li>默认。事件句柄在冒泡阶段执行。</li></ul></li></ul></li></ul></li><li>addEventListener() 添加相同事件不会覆盖已存在的事件。</li><li>如果浏览器不支持 addEventListener() 方法，可以使用 attachEvent() 方法替代。</li></ul></li><li><p><code>element.removeEventListener(event, function, useCapture)</code>移除由 addEventListener() 方法添加的事件句柄。</p><ul><li>event<ul><li>必须。要移除的事件名称。.</li></ul></li><li>function<ul><li>必须。指定要移除的函数。</li></ul></li><li>useCapture<ul><li>可选。布尔值，指定移除事件句柄的阶段。<ul><li>true<ul><li>在捕获阶段移除事件句柄。</li></ul></li><li>false<ul><li>默认。在冒泡阶段移除事件句柄。</li></ul></li></ul></li></ul></li><li>如果浏览器不支持 removeEventListener() 方法，你可以使用 detachEvent() 方法实现。</li></ul></li><li><p>parentNode</p><ul><li>获取父节点。</li></ul></li><li><p>nextSibling</p><ul><li>获取下一个兄弟结点。</li></ul></li><li><p>previousSibling</p><ul><li>获取上一个兄弟结点。</li></ul></li><li><p>firstChild</p><ul><li>获取第一个子节点。</li></ul></li><li><p>lastChild</p><ul><li>获取最后一个子节点。</li></ul></li><li><p>children</p><ul><li>获取所有一级结点。返回一个数组。</li></ul></li><li><p>childNodes</p><ul><li>获取所有子节点。包括文本节点和元素节点。</li></ul></li><li><p>nodeType</p><ul><li>返回元素的节点类型。</li><li>1 表示的是元素结点。2 表示的是属性结点。3 表示的是文本结点。</li><li>节点类型<ul><li>元素节点：拥有一对开闭合标签的元素整体，例如：<code>&lt;ul&gt;...&lt;/ul&gt;</code>。</li><li>属性节点：元素节点的属性。</li><li>文本节点：用于呈现文本的部分。</li></ul></li></ul></li><li><p>tagName</p><ul><li>返回元素的标签名。</li></ul></li><li><p>nodeName</p><ul><li>返回元素的标签名。</li></ul></li><li><p><code>appendChild( 结点 );</code></p><ul><li>将传入结点插入到自己的子节点的末尾。</li></ul></li><li><p><code>insertBefore( 结点 1, 结点 2 );</code></p><ul><li>将结点 1 插入到自己的子结点 2 之前。</li></ul></li><li><p>remove();</p><ul><li>删除本结点。</li></ul></li><li><p><code>removeChild( 结点 );</code></p><ul><li>删除传入的子节点。</li></ul></li><li><p><code>cloneNode( boolean );</code></p><ul><li>复制本结点并返回。boolean 为 true 深层拷贝，如果为 false，只复制结点本身。</li></ul></li><li><p><code>getAttribute( &quot;结点元素属性&quot; );</code></p><ul><li>获取结点元素属性的内容。</li><li>结点。属性<strong>只能</strong>访问已有的属性。</li></ul></li><li><p><code>setAttribute( &quot;属性名称&quot;, &quot;属性值&quot;);</code></p><ul><li>设置属性。访问的属性名称不存在则自动创建。</li></ul></li><li><p><code>removeAttribute( &quot;元素名称&quot; );</code></p><ul><li>删除元素属性。</li></ul></li><li><p>innerHTML</p><ul><li>获取标签中的所有标签和文本。</li></ul></li><li><p>innerText</p><ul><li>获取标签中所有的文本。</li></ul></li><li><p>textContent</p><ul><li>获取结点的文本内容。</li><li>textContent 和 innerText 的区别：<ul><li>textContent 能够获取元素的所有子节点上的文本，不管这个节点是否呈现；而 innerText 只返回呈现到页面上的文本。</li></ul></li></ul></li><li><p>className</p><ul><li>获取标签的 class 属性。</li></ul></li><li><p>style</p><ul><li>代表一个单独的样式声明。</li></ul></li><li><p>offsetParent</p><ul><li>返回当前对象的父级（带有定位）盒子。可能是父亲，也可能是爷爷。</li></ul></li></ul><h3 id="img-对象"><a href="#img-对象" class="headerlink" title="img 对象"></a>img 对象</h3><ul><li>complete<ul><li>返回浏览器是否已完成对图像的加载。</li><li>如果加载完成，则返回 true，否则返回 fasle。</li><li>如何检测 background-image(backgroundImage) 属性是否加载完毕？<ul><li>可以暂时把图片 URL 赋值给 Image 对象的 src 属性。</li><li>再通过 Image（img）对象的 complete 属性判断是否加载完毕。</li></ul></li></ul></li></ul><h3 id="input-对象"><a href="#input-对象" class="headerlink" title="input 对象"></a>input 对象</h3><ul><li>value<ul><li>获取标签 value 属性。</li></ul></li></ul><h3 id="iframe-frame-对象"><a href="#iframe-frame-对象" class="headerlink" title="iframe/frame 对象"></a>iframe/frame 对象</h3><ul><li>contentDocument 属性能够以 Document 对象来返回 iframe 中的文档。</li><li>关于 contentWindow 和 contentDocument<ul><li>使用这两个对象，父子页面必须同源。</li><li>contentWindow 是用来获取子窗口的 window 对象。</li><li>contentDocument 是用来获取子窗口的 document 对象的。</li><li>contentWindow 兼容各个浏览器。</li><li>contentDocument 支持 Firefox 和大于 ie8 的 ie 浏览器。</li></ul></li></ul><h2 id="canvas"><a href="#canvas" class="headerlink" title="canvas"></a>canvas</h2><ul><li><code>getContext(contextType[, contextAttributes]);</code><ul><li>返回 canvas 的上下文，不合法返回 null。</li><li>contextType 上下文类型：<ul><li>“2d”建立一个 CanvasRenderingContext2D 二维渲染上下文。</li><li>“webgl”创建一个 WebGLRenderingContext 三维渲染上下文对象。</li><li>“webgl2”创建一个 WebGL2RenderingContext 三维渲染上下文对象。</li></ul></li><li>设置路径：<ul><li>beginPath()<ul><li>重置路径。</li></ul></li><li>closePath()<ul><li>闭合路径。</li></ul></li><li><code>moveTo(x, y)</code><ul><li>移动到指定的坐标 x 以及 y 上。</li></ul></li><li><code>lineTo(x, y)</code><ul><li>绘制一条从当前位置到指定 x 以及 y 位置的直线。</li></ul></li><li><code>quadraticCurveTo(cp1x, cp1y, x, y)</code><ul><li>绘制二次贝塞尔曲线，cp1x,cp1y 为一个控制点，x,y 为结束点。</li></ul></li><li><code>bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y)</code><ul><li>绘制三次贝塞尔曲线，cp1x,cp1y 为控制点一，cp2x,cp2y 为控制点二，x,y 为结束点。</li></ul></li><li><code>rect(x, y, width, height)</code><ul><li>绘制一个左上角坐标为（x,y），宽高为 width 以及 height 的矩形。</li></ul></li><li><code>arc(x, y, radius, startAngle, endAngle, anticlockwise)</code><ul><li>画一个以（x,y）为圆心的以 radius 为半径的圆弧（圆），从 startAngle 开始到 endAngle 结束，按照 anticlockwise 给定的方向（默认为顺时针）来生成。</li><li>Math.PI（圆周率）为 180 度。</li></ul></li></ul></li><li>绘制和填充方法：<ul><li>stroke()<ul><li>通过线条来绘制图形轮廓。</li></ul></li><li>fill()<ul><li>通过填充路径的内容区域生成实心的图形。</li></ul></li><li><code>strokeRect(x, y, width, height)</code><ul><li>绘制一个矩形的边框。</li></ul></li><li><code>fillRect(x, y, width, height)</code><ul><li>绘制一个填充的矩形。</li></ul></li><li><code>clearRect(x, y, width, height)</code><ul><li>清除指定矩形区域，让清除部分完全透明。</li></ul></li></ul></li><li>设置样式：<ul><li>fillStyle<ul><li>图形的填充颜色。</li></ul></li><li>strokeStyle<ul><li>图形轮廓的颜色。</li></ul></li><li>globalAlpha<ul><li>图形的透明度，有效值 0-1。</li></ul></li><li>lineWidth<ul><li>设置线条宽度。</li></ul></li><li>lineCap<ul><li>设置线条末端样式。</li></ul></li><li>lineJoin<ul><li>设定线条与线条间接合处的样式。</li></ul></li><li>miterLimit<ul><li>限制当两条线相交时交接处最大长度；所谓交接处长度（斜接长度）是指线条交接处内角顶点到外角顶点的长度。</li></ul></li><li>setLineDash(segments)<ul><li>接受一个 Array 数组。一组描述交替绘制线段长度和间距长度的数字。如果数组元素的数量是奇数，数组的元素会被复制并重复。</li></ul></li></ul></li></ul></li></ul><h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h2><p>请求仅支持协议方案：http, data, chrome, chrome-extension, https。</p><h3 id="请求的类型"><a href="#请求的类型" class="headerlink" title="请求的类型"></a>请求的类型</h3><p>POST 请求添加数据。</p><p>DELETE 请求删除数据。</p><p>PUT 请求更新数据。</p><p>GET 请求获取数据。</p><h3 id="请求的发送方式"><a href="#请求的发送方式" class="headerlink" title="请求的发送方式"></a>请求的发送方式</h3><ol><li>通过浏览器的地址栏</li><li>通过 html 当中的 form 表单</li><li>通过 a 标签的 href 属性</li><li>src 属性</li></ol><h3 id="通过-AJAX-发送请求-XMLHttpRequest"><a href="#通过-AJAX-发送请求-XMLHttpRequest" class="headerlink" title="通过 AJAX 发送请求 (XMLHttpRequest)"></a>通过 AJAX 发送请求 (XMLHttpRequest)</h3><p>AJAX 可以发送网络请求或请求本地文件。</p><ul><li>XMLHttpRequest 对象<ul><li>readyState<ul><li>HTTP 请求的状态。<ul><li>4 表示 HTTP 响应已经完全接收。</li></ul></li><li>readyState 小于 3 的时候读取 status 属性会导致一个异常。</li></ul></li><li>status<ul><li>服务器返回的 HTTP 状态代码。<ul><li>200 表示成功。</li></ul></li></ul></li><li><code>open( method, url, async )</code><ul><li>初始化 HTTP 请求参数，但是并不发送请求。</li><li>method<ul><li>请求的类型；GET 或 POST</li><li>请求类型为 POST，必须设置请求头部的响应类型为 application/x-www-form-urlencoded。</li></ul></li><li>url<ul><li>该文件可以是任何类型的文件，比如 .txt 和 .xml，或者服务器脚本文件，比如 .asp 和 .php。</li></ul></li><li>async<ul><li>true（异步，默认）或 false（同步）。<ul><li>同步和异步的区别？<ul><li>同步：send 方法要接收到服务器返回的数据后才返回。</li><li>异步：send 调用后立即返回，服务器返回的数据在 onreadystatechange 设置的异步回调里面进行读取。</li></ul></li></ul></li></ul></li></ul></li><li>send()<ul><li>发送 HTTP 请求，使用传递给 open() 方法的参数，<strong>以及传递给该方法的可选请求体</strong>。</li></ul></li><li>responseText<ul><li>获得字符串形式的响应数据。</li></ul></li><li>responseXML<ul><li>获得 XML 形式的响应数据（document 对象）。</li></ul></li><li>abort()<ul><li>取消当前响应，关闭连接并且结束任何未解决的网络活动。</li></ul></li><li>onreadystatechange 事件<ul><li>每次 readyState 属性改变的时候触发事件。当 readyState 为 3 时可能调用多次。</li></ul></li></ul></li></ul><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p>JSON 有两种结构：对象和数组。</p><p>数据在键值对中，数据由逗号分隔，花括号保存对象，方括号保存数组。</p><p>JS 当中对象键值分号可不要，JSON 数据键值分号不可省略。</p><ul><li><code>JSON.parse( jsonstr );</code><ul><li>可以将 json 字符串转换成 json 对象。</li></ul></li><li><code>JSON.stringify( jsonobj );</code><ul><li>可以将 json 对象转换成 json 字符串。</li></ul></li></ul><p>低版本的 IE 浏览器不支持原生方法转换 JSON 对象，可以借助 json2.js（JQuery 插件） 解决。</p><p>可以通过 AJAX 请求服务器的静态 JSON 文件减少服务器压力，不一定要请求接口，获取动态数据。</p><h3 id="IE-浏览器-AJAX-缓存"><a href="#IE-浏览器-AJAX-缓存" class="headerlink" title="IE 浏览器 AJAX 缓存"></a>IE 浏览器 AJAX 缓存</h3><p>IE 会针对 ajax 相同的请求 URL 进行缓存，只有第一次会发送请求到服务端，如果继续发送 AJAX 请求，IE 浏览器会直接在缓存中读取数据并返回。</p><ul><li>解决办法：在 URL 上添加一个随机参数即可解决。</li></ul><h3 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h3><p><strong>浏览器</strong>对于 javascript 的同源策略的限制，例如 a.cn 下面的 js 不能调用 b.cn 中的 js, 对象或数据（因为 a.cn 和 b.cn 是不同域）, 所以跨域就出现了。</p><ul><li>同源策略：请求的 url 地址，必须与浏览器上的 url 地址处于同域上，也就是域名，端口，协议相同。</li><li>跨域是浏览器禁止的，服务端并不禁止跨域 。</li></ul><h4 id="跨域请求"><a href="#跨域请求" class="headerlink" title="跨域请求"></a>跨域请求</h4><p>凡是拥有 src 属性的标签都有跨域能力，如：&lt;script&gt;、 &lt;img&gt;、 &lt;iframe&gt;。</p><ul><li>JSONP 原理就是通过 script 标签发送请求（参数为方法名），服务端通过拼接字符串拼接成 <code>方法名 (JSON 数据）</code> 的形式返回前端，前端立马执行返回方法，方法里做逻辑处理。</li></ul><p>服务器响应头设置 CORS：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//允许所有域名的脚本访问该资源。</span><br><span class="line">Access-Control-Allow-Origin:*</span><br><span class="line"></span><br><span class="line">//允许特定的域名访问。</span><br><span class="line">Access-Control-Allow-Origin:http://www.phpddt.com.com</span><br></pre></td></tr></table></figure><p>通过代理服务器解决跨域（nginx 或 webpack 中的 proxyTable）。</p><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p>Cookie 是浏览器访问服务器后，服务器（通过请求头）传给浏览器的一段数据。</p><p>浏览器需要保存这段数据（保存到用户电脑），不得轻易删除。</p><p>此后每次浏览器访问该服务器，都必须带上这段数据。</p><p>当浏览器从服务器上请求 web 页面时， 属于该页面的 cookie 会被添加到该请求中。服务端通过这种方式来获取用户的信息。</p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>网络早期最大的问题之一是如何管理状态。简而言之，服务器无法知道两个请求是否来自同一个浏览器。当时最简单的方法是在请求时，在页面中插入一些参数，并在下一个请求中传回参数。</p><p>Cookies 是一种能够让网站服务器把少量数据储存到客户端的硬盘或内存，或是从客户端的硬盘读取数据的一种技术。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>每次网页发送 http 请求时，浏览器会先检查是否有相应的 cookie，有则自动添加在 request header 中的 cookie 字段中。</p><p>cookie 的存储是以域名形式进行区分的，不同的域下存储的 cookie 是独立的。</p><p>我们可以设置 cookie 生效的域（当前设置 cookie 所在域的子域）。</p><p>一个域名下存放的 cookie 的个数是有限制的，不同浏览器存放的个数不一样，一般为 20 个。</p><p>每个 cookie 存放的内容大小也是有限制的，不同的浏览器存放大小不一样，一般为 4KB。</p><p>cookie 也可以设置过期的时间，默认是会话结束的时候，当时间到期自动销毁。</p><ul><li>设置了过期时间 cookie 就会存储在硬盘里面。</li><li>没有设置过期时间（expires） cookie 就会存储在内存里面。</li></ul><h3 id="cookie-参数"><a href="#cookie-参数" class="headerlink" title="cookie 参数"></a>cookie 参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">key</td><td align="left">必需。规定 cookie 的名称。</td></tr><tr><td align="left">value</td><td align="left">必需。规定 cookie 的值。</td></tr><tr><td align="left">expires</td><td align="left">可选。规定 cookie 的有效期。</td></tr><tr><td align="left">path</td><td align="left">可选。规定 cookie 的服务器路径。</td></tr><tr><td align="left">domain</td><td align="left">可选。规定 cookie 的域名。</td></tr><tr><td align="left">secure</td><td align="left">可选。规定是否通过安全的 HTTPS 连接来传输 cookie。</td></tr></tbody></table><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>设置 cookie</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie = <span class="string">'名字=值'</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// domain 为 cookie 生效域</span></span><br><span class="line"><span class="built_in">document</span>.cookie = <span class="string">'username=cfangxu;domain=baike.baidu.com'</span>;</span><br></pre></td></tr></table></figure><ul><li>cookie 存值时不能一次性设置多个值。<ul><li>例如：<code>document.cookie = &#39;名字 1=值；名字 2=值&#39;;</code>。</li></ul></li></ul><p>读取</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="built_in">document</span>.cookie;</span><br></pre></td></tr></table></figure><p>修改</p><ul><li>修改 cookie 类似于创建 cookie。</li><li>cookie 的 key 值是唯一的。</li></ul><p>删除</p><ul><li>设置 expires 参数为以前的时间即可。</li></ul><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><p>本地设置的 cookie 是无法保存的，cookie 必须依靠 http 协议（cookie 就是一个请求头字段）。</p><p>cookie 是无法跨域携带的，必须设置 withCredentials 属性为 true，允许 ajax 请求携带 cookie。</p><h2 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h2><h3 id="localStorage-对象（BOM）"><a href="#localStorage-对象（BOM）" class="headerlink" title="localStorage 对象（BOM）"></a>localStorage 对象（BOM）</h3><p>localStorage 中一般浏览器支持的是 5M 大小，可以实现不同网页之间传输数据。</p><p>localStorage 保存的数据除非被清除，否则永久保存。</p><p>仅在客户端（即浏览器）中保存，不参与和服务器的通信。</p><h3 id="sessionStorage-对象（BOM）"><a href="#sessionStorage-对象（BOM）" class="headerlink" title="sessionStorage 对象（BOM）"></a>sessionStorage 对象（BOM）</h3><p>sessionStorage 与 localStorage 的接口类似，但保存数据的生命周期与 localStorage 不同。</p><p>当页面关闭后，sessionStorage 中的数据就会被清空。</p><p>仅在客户端（即浏览器）中保存，不参与和服务器的通信。</p><h2 id="IndexedDB"><a href="#IndexedDB" class="headerlink" title="IndexedDB"></a>IndexedDB</h2><p>正在努力编写中。..</p><h2 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h2><p>Base64 的索引表，字符选用了 “A-Z、a-z、0-9、+、/“ 64 个可打印字符，标准的 Base64 协议规定。</p><p>Base64 的编码步骤：</p><ol><li>将待转换的字符串每三个字节分为一组，每个字节占 8bit，那么共有 24 个二进制位。</li><li>将上面的 24 个二进制位每 6 个一组，共分为 4 组。</li><li>在每组前面添加两个 0，每组由 6 个变为 8 个二进制位，总共 32 个二进制位，即四个字节。<ul><li>位数不足，用 0 补齐。没有数据则用 “=” 补上。</li></ul></li><li>根据 Base64 编码对照表获得对应的值。</li></ol><p>大多数编码都是由字符串转化成二进制的过程，而 Base64 的编码则是从二进制转换为字符串。</p><p>Base64 编码主要用在传输、存储、表示二进制领域，不能算得上加密，只是无法直接看到明文。</p><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><ul><li><p>URL 编码</p><ul><li><p>URL 编码，以便发送给浏览器。有效的 URL 编码中不能包含某些字符，例如空格。用特殊的 UTF-8 编码替换所有无效的字符，从而让浏览器能够接收。URL 编码是无法直接识别的，必须解码。</p></li><li><p>encodeURLComponent 函数可把字符串进行 URL 编码。</p></li><li><p>decodeURLComponent 函数可把 URL 编码的字符串进行解码。</p></li></ul></li><li><p>Data URLs，即前缀为 data: 协议的的 URL，其允许内容创建者向文档中嵌入小文件。</p><ul><li>结构：Data URLs 由四个部分组成：前缀 (data:)、指示数据类型的 MIME 类型、如果非文本则为可选的 base64 标记、数据本身。</li><li>语法：<code>data:[&lt;mediatype&gt;][;base64],&lt;data&gt;</code><ul><li>mediatype 是个 MIME 类型的字符串，例如 “image/jpeg” 表示 JPEG 图像文件。如果被省略，则默认值为 text/plain;charset=US-ASCII。</li></ul></li></ul></li><li><p>Blob URL</p><ul><li>URL.createObjectURL() 方法会根据传入的参数创建一个指向该参数对象的 URL。</li></ul></li></ul><h2 id="Blob-对象"><a href="#Blob-对象" class="headerlink" title="Blob 对象"></a>Blob 对象</h2><p>Blob 对象表示一个不可变、原始数据的类文件对象。File 接口基于 Blob，继承了 blob 的功能并将其扩展使其支持用户系统上的文件。</p><p>Blob 对象是一个二进制对象，可以存放二进制数据，还可以设置这个数据的 MINE 类型。</p><h2 id="图片预览"><a href="#图片预览" class="headerlink" title="图片预览"></a>图片预览</h2><ul><li><p>Files 对象</p><ul><li>在表单元素上&lt;input type=”file”/&gt;，可以选择一个或多个文件，通过获取文件元素对象的集合 files，来操作每一个对象 files[i]；每一个 file 对象对应一个文件。</li><li><code>file.name</code><ul><li>获取本地文件系统的文件名。</li></ul></li><li>file.size<ul><li>文件的字节大小。</li></ul></li><li>file.type<ul><li>字符串类型，文件的 MIME 类型。</li></ul></li><li>file.lastModifiedDate<ul><li>文件的最后修改时间。</li></ul></li><li>objectURL = URL.createObjectURL(blob);<ul><li>blob 参数是用来创建 URL 的 File 对象或者 Blob 对象。生成的 blob url 可以被 img 等标签使用。</li></ul></li><li>虽然 file 的 value 不能设为有字符的值，但是可以设置为空值。</li></ul></li><li><p>FileReader 对象</p><ul><li><p>FileReader 构造函数。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var reader = new FileReader();</span><br></pre></td></tr></table></figure></li><li><p>FileReader 对象中的方法</p><ul><li>readAsDataURL(file)<ul><li>读取文件内容，结果用 data:url 的字符串形式保存到 result 属性中。result 属性中的值可以直接赋予 img 对象的 src 属性。</li></ul></li></ul></li><li><p>FileReader 对象中的事件</p><ul><li>onloadend<ul><li>该事件在读取操作结束时（要么成功，要么失败）触发。</li></ul></li></ul></li></ul></li></ul><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="定义正则"><a href="#定义正则" class="headerlink" title="定义正则"></a>定义正则</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var re = new RegExp( &quot;正则表达式&quot; );</span><br><span class="line">var re = /正则表达式/; //简写方法。</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">特殊字符</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">^</td><td align="left">为匹配输入字符串的开始位置。</td></tr><tr><td align="left">$</td><td align="left">为匹配输入字符串的结束位置。</td></tr></tbody></table><p>要匹配特殊字符，需要进行转义。特殊字符前加反斜杠<code>\</code>。</p><table><thead><tr><th align="left">限定符</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left"><code>?</code></td><td align="left">问号代表前面的字符最多只可以出现一次。</td></tr><tr><td align="left"><code>*</code></td><td align="left">号代表字符可以不出现，也可以出现一次或者多次。</td></tr><tr><td align="left"><code>+</code></td><td align="left">号代表前面的字符必须至少出现一次（1 次或多次）。</td></tr><tr><td align="left"><code>{n}</code></td><td align="left">n 是一个非负整数。匹配确定的 n 次。</td></tr><tr><td align="left"><code>{n,}</code></td><td align="left">n 是一个非负整数。至少匹配 n 次。</td></tr><tr><td align="left"><code>{n,m}</code></td><td align="left">m 和 n 均为非负整数，其中 n &lt;= m。最少匹配 n 次且最多匹配 m 次。</td></tr><tr><td align="left"><code>()</code></td><td align="left">标记一个子表达式的开始和结束位置。例如：(es)，es 字符串算一个子表达式。</td></tr><tr><td align="left"><code>.</code></td><td align="left">匹配除换行符 \n 之外的任何单字符。例如：.* 匹配任意字符。</td></tr><tr><td align="left"><code>\w</code></td><td align="left">匹配字母、数字、下划线</td></tr><tr><td align="left"><code>[</code></td><td align="left">标记一个范围表达式的开始。</td></tr><tr><td align="left"><code>{</code></td><td align="left">标记限定符表达式的开始。</td></tr><tr><td align="left">|</td><td align="left">指明两项之间的一个选择。</td></tr><tr><td align="left"><code>\</code></td><td align="left">将下一个字符标记为转义字符。</td></tr></tbody></table><p>限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。</p><h2 id="Web-Workers"><a href="#Web-Workers" class="headerlink" title="Web Workers"></a>Web Workers</h2><p>web worker 是运行在后台的 JavaScript，不会影响页面的性能。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>教程</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>实例化对象（new）的过程</title>
    <url>/posts/514ba138/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><p>本文介绍 JavaScript 中实例化（new）一个对象的过程。</p><a id="more"></a><hr><h2 id="实例化对象（new）的过程"><a href="#实例化对象（new）的过程" class="headerlink" title="实例化对象（new）的过程"></a>实例化对象（new）的过程</h2><ol><li><p>创建空对象。</p></li><li><p>设置新对象的 constructor 属性为构造函数的名称，设置新对象的 <code>__proto__</code> 属性指向构造函数的 prototype 对象。</p></li><li><p>使用新对象调用函数，函数中的 this 被指向新实例对象。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Person.call(obj); <span class="comment">// 此时 obj 没有名字。</span></span><br></pre></td></tr></table></figure></li><li><p>将初始化完毕的新对象地址，保存到等号左边的变量中。</p></li></ol><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 中的原型链和函数原型</title>
    <url>/posts/77987eec/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><p>本文主要对 JavaScript 中的原型链和函数原型进行简单说明。</p><a id="more"></a><hr><h2 id="函数原型及原型链"><a href="#函数原型及原型链" class="headerlink" title="函数原型及原型链"></a>函数原型及原型链</h2><p>JS 创建对象的时候有一个 <code>__proto__</code> 内置属性，用于指向构造函数的原型对象 prototype，prototype 相当于特定类型所有实例都可以访问到的一个公共容器。</p><p>prototype 对象包含 constructor 属性，constructor 属性指向该构造函数。</p><p>Function 是一个构造器，能创建 Function 类型的对象，即 JS 中每个函数实际上都是 Function 类型的对象；而通过构造函数实例化的都是普通对象，普通对象没有 propotype ，但是有 <code>__proto__</code> 属性。</p><h2 id="原型链指向"><a href="#原型链指向" class="headerlink" title="原型链指向"></a>原型链指向</h2><ol><li>实例对象 <code>__proto__</code> 指向构造函数的原型。</li><li>构造函数 <code>__proto__</code> 指向 Function 对象的原型。</li><li>Function 对象的 <code>__proto__</code> 指向自己的原型。</li><li>所有 prototype 对象内置 <code>__proto__</code> 属性，<code>__proto__</code> 指向 Object 对象。</li><li>Object 的 <code>__proto__</code> 指向 null 。</li></ol><p>注意：<code>{}</code> 创建的对象 <code>__proto__</code> 直接指向 Object 的 原型。</p><h2 id="函数原型特点"><a href="#函数原型特点" class="headerlink" title="函数原型特点"></a>函数原型特点</h2><p>当函数对象本身的属性或方法与原型的属性或方法同名的时，默认调用的是函数对象本身的属性或方法，通过原型增加的属性或方法的确是存在的，函数对象本身的属性或方法的优先级要高于原型的属性或方法。</p><p>改变构造函数的 prototype 指向（引用），实例化对象的 <code>__proto__</code> 指向的 prototype 也会随之改变，因为实例化对象的 <code>__proto__</code> 指向构造函数的 prototype。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>for…in 遍历对象中的属性</title>
    <url>/posts/fed4be0c/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><h2 id="for…in"><a href="#for…in" class="headerlink" title="for…in"></a>for…in</h2><p>通过 for…in 遍历 obj 中的键值对象：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log( key );</span><br><span class="line">    <span class="built_in">console</span>.log( obj[key] );</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>缓动动画公式</title>
    <url>/posts/e7f867ee/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><p>本文贴出缓动动画公式。</p><a id="more"></a><hr><h2 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h2><p>起始位置 += （结束位置 – 起始位置） * 缓动系数</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>序列化与反序列</title>
    <url>/posts/c88857d0/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><p>本文主要对序列化与反序列化概念进行说明。</p><a id="more"></a><hr><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>序列化是将对象的状态信息转换为可以存储或传输的形式的过程。在序列化期间，对象将其当前状态写入到临时或持久性存储区。以后，可以通过从存储区中读取或反序列化对象的状态，重新创建该对象。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>概念</category>
      </categories>
      <tags>
        <tag>概念</tag>
      </tags>
  </entry>
  <entry>
    <title>ECMAScript 6(ES6)</title>
    <url>/posts/d0cad05d/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><p>本文主要介绍 JavaScript 中 ES6 新特性。</p><a id="more"></a><hr><h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><h3 id="let-和-var-比较"><a href="#let-和-var-比较" class="headerlink" title="let 和 var 比较"></a>let 和 var 比较</h3><ul><li>var 定义变量在 function 代码块中定义，生命周期为局部的。在其他代码块中定义，声明周期为全局的。</li><li>let 定义变量，在代码块中定义，生命周期直到整个代码块执行结束。</li><li>var 在 function 代码块定义变量前访问变量，会变量提升。</li><li>let 定义变量前访问变量会报错。</li><li>var 可以重复定义变量（变量覆盖）。</li><li>let 不可以变量覆盖。</li></ul><h3 id="let-示例"><a href="#let-示例" class="headerlink" title="let 示例"></a>let 示例</h3><p>for 循环小括号中是父级作用域，花括号是小括号子作用域。即花括号可以访问小括号的变量，而小括号不能访问花括号中的变量。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    a[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">6</span>](); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><p>let 声明的变量仅在块级作用域有效，所以这里的 i 只在本轮循环有效果，每次循环的 i 其实都是一个新的变量。function 访问的变量通过作用域链访问最近的变量（如果同名）。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> j = i; <span class="comment">//j 为临时变量保存 i 值。</span></span><br><span class="line">    arr[j] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(j);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> j = i;</span><br><span class="line">    arr[j] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(j);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line">arr[<span class="number">0</span>](); <span class="comment">//0</span></span><br><span class="line">arr[<span class="number">1</span>](); <span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>作用域链：在当前作用域中没有查到值，就会向上级作用域去查，直到查到全局作用域，这么一个查找过程形成的链条就叫做作用域链。</p><h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><p>const 保证变量指向的内存地址所保存的数据不允许改动。对于简单类型（数值 number、 字符串 string、 布尔值 boolean）, 值就保存在变量指向的那个内存地址，因此 const 声明的简单类型变量等同于常量。而复杂类型（对象 object，数组 array，函数 function），变量指向的内存地址其实是保存了一个指向实际数据的指针，所以 const 只能保证指针是固定的，至于指针指向的数据结构变不变就无法控制了。</p><p>let 与 const 的区别：</p><ul><li>let 与 const 都是只在声明所在的块级作用域内有效。</li><li>let 声明的变量可以改变，值和类型都可以改变，没有限制。</li><li>const 声明的变量不得改变值，这意味着，const 一旦声明变量，就必须立即初始化，不能留到以后赋值。</li></ul><p>注意：let 和 const 不能混合使用。</p><h2 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h2><p>在解构中，有下面两部分参与：</p><ul><li>解构的源，解构赋值表达式的右边部分。</li><li>解构的目标，解构赋值表达式的左边部分。</li></ul><p>解构赋值语法是一种 JavaScript 表达式用来将数组中的值或对象中的属性取出来区分为不同变量。</p><h3 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h3><p>基本用法</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><p>可嵌套</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, [[b], c]] = [<span class="number">1</span>, [[<span class="number">2</span>], <span class="number">3</span>]];</span><br></pre></td></tr></table></figure><p>可忽略</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, , b] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; <span class="comment">// a = 1 b = 3</span></span><br></pre></td></tr></table></figure><p>剩余运算符</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, ...b] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; <span class="comment">// a = 1 b = [2, 3]</span></span><br></pre></td></tr></table></figure><p>解构实现 Iterator 接口的对象（例如：字符串对象）</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c, d, e] = <span class="string">'hello'</span>; <span class="comment">// a = 'h' b = 'e' c = 'l' d = 'l' e = 'o'</span></span><br></pre></td></tr></table></figure><p>解构默认值，当解构模式有匹配结果，且匹配结果是 undefined 时，会触发默认值作为返回结果。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a = <span class="number">2</span>] = [<span class="literal">undefined</span>];      <span class="comment">// a = 2</span></span><br><span class="line"><span class="keyword">let</span> [a = <span class="number">3</span>, b = a] = [];        <span class="comment">// a = 3, b = 3</span></span><br><span class="line"><span class="keyword">let</span> [a = <span class="number">3</span>, b = a] = [<span class="number">1</span>];       <span class="comment">// a = 1, b = 1</span></span><br><span class="line"><span class="keyword">let</span> [a = <span class="number">3</span>, b = a] = [<span class="number">1</span>, <span class="number">2</span>];    <span class="comment">// a = 1, b = 2</span></span><br></pre></td></tr></table></figure><p>交换变量</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">3</span>;</span><br><span class="line">[a, b] = [b, a];</span><br></pre></td></tr></table></figure><h3 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h3><p>基本，其中 foo 和 bar 的位置可以随意替换。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; foo, bar &#125; = &#123; <span class="attr">foo</span>: <span class="string">'aaa'</span>, <span class="attr">bar</span>: <span class="string">'bbb'</span> &#125;; <span class="comment">// foo = 'aaa' bar = 'bbb'</span></span><br></pre></td></tr></table></figure><p>给新的变量名赋值，可以从一个对象中提取变量并赋值给和对象属性名不同的新的变量名。其中输出 baz 变量会报错。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; <span class="attr">baz</span> : foo &#125; = &#123; <span class="attr">baz</span> : <span class="string">'ddd'</span> &#125;; <span class="comment">// foo = 'ddd'</span></span><br></pre></td></tr></table></figure><p>可嵌套可忽略</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">p</span>: [<span class="string">'hello'</span>, &#123;<span class="attr">y</span>: <span class="string">'world'</span>&#125;] &#125;;</span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">p</span>: [x, &#123; y &#125;] &#125; = obj;    <span class="comment">// x = 'hello' y = 'world'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">p</span>: [<span class="string">'hello'</span>, &#123;<span class="attr">y</span>: <span class="string">'world'</span>&#125;] &#125;;</span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">p</span>: [x, &#123; &#125;] &#125; = obj;      <span class="comment">// x = 'hello'</span></span><br></pre></td></tr></table></figure><p>不完全解构</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">p</span>: [ &#123; <span class="attr">y</span>: <span class="string">'world'</span> &#125; ] &#125;;</span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">p</span>: [ &#123; y &#125;, x ] &#125; = obj; <span class="comment">// y = 'world' x = undefined</span></span><br></pre></td></tr></table></figure><p>剩余运算符</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; a, b, ...rest &#125; = &#123; <span class="attr">a</span>: <span class="number">10</span>, <span class="attr">b</span>: <span class="number">20</span>, <span class="attr">c</span>: <span class="number">30</span>, <span class="attr">d</span>: <span class="number">40</span> &#125;; <span class="comment">// a = 10 b = 20 rest = &#123; c: 30, d: 40 &#125;</span></span><br></pre></td></tr></table></figure><p>解构默认值</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; a = <span class="number">10</span>, b = <span class="number">5</span> &#125; = &#123; <span class="attr">a</span>: <span class="number">3</span> &#125;;           <span class="comment">// a = 3; b = 5;</span></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">a</span>: aa = <span class="number">10</span>, <span class="attr">b</span>: bb = <span class="number">5</span> &#125; = &#123; <span class="attr">a</span>: <span class="number">3</span> &#125;;   <span class="comment">// aa = 3; bb = 5;</span></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>var 命令也可以解构赋值，遵循 var 相关特性。</li><li>可以运用解构赋值，给函数提供默认值。</li></ul><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>基础使用</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">( 参数 <span class="number">1</span>, 参数 <span class="number">2</span>, …, 参数 N ) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 函数声明</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数体只有一句可简写</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">( 参数 <span class="number">1</span>, 参数 <span class="number">2</span>, …, 参数 N ) =&gt; 表达式（单一）</span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line">( 参数 <span class="number">1</span>, 参数 <span class="number">2</span>, …, 参数 N ) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> 表达式;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当只有一个参数时，圆括号是可选的。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(单一参数) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 函数声明</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line">单一参数 =&gt; &#123;</span><br><span class="line">    <span class="comment">// 函数声明</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有参数的函数应该写成一对圆括号。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">() =&gt; &#123;</span><br><span class="line">    函数声明</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加括号的函数体返回对象字面表达式，花括号<code>{}</code>里面的代码被解析为一系列语句（即 foo 被认为是一个标签，而非对象字面量的组成部分），所以，记得用圆括号把对象字面量包起来。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">参数 =&gt; ( &#123;<span class="attr">foo</span>: bar &#125; )</span><br></pre></td></tr></table></figure><p>支持剩余参数和默认参数。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">( 参数 <span class="number">1</span>, 参数 <span class="number">2</span>, ...rest ) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 函数声明</span></span><br><span class="line">&#125;</span><br><span class="line">( 参数 <span class="number">1</span> = 默认值 <span class="number">1</span>, 参数 <span class="number">2</span>, …, 参数 N = 默认值 N ) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 函数声明</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样支持参数列表解构</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> f = <span class="function">(<span class="params">[a, b] = [<span class="number">1</span>, <span class="number">2</span>], &#123;x: c&#125; = &#123;x: a + b&#125;</span>) =&gt;</span> a + b + c;</span><br><span class="line"></span><br><span class="line">f();</span><br></pre></td></tr></table></figure><p>注意：使用了块语句的箭头函数不会自动返回值，你需要使用 return 语句将所需值返回。</p><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>Set 类似于数组，但是成员的值都是唯一的，没有重复的值。</p><p>Set 函数可以接受一个数组（或者具有 iterable 接口的其他数据结构）作为参数，用来初始化。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">set</span> = new Set([1, 2, 3, 4, 4]);</span><br></pre></td></tr></table></figure><p>属性和方法说明：</p><table><thead><tr><th>属性和方法</th><th>说明</th></tr></thead><tbody><tr><td>size</td><td>返回 Set 实例的成员总数。</td></tr><tr><td>add(value)</td><td>添加某个值，返回 Set 结构本身。</td></tr><tr><td>delete(value)</td><td>删除某个值，返回一个布尔值，表示删除是否成功。</td></tr><tr><td>has(value)</td><td>返回一个布尔值，表示该值是否为 Set 的成员。</td></tr><tr><td>clear()</td><td>清除所有成员，没有返回值。</td></tr></tbody></table><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>Map 对象保存键值对。任何值（对象或者原始值） 都可以作为一个键或一个值。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line">map.set(<span class="string">"key"</span>,value);</span><br></pre></td></tr></table></figure><p>属性和方法说明：</p><table><thead><tr><th>属性和方法</th><th>说明</th></tr></thead><tbody><tr><td>size</td><td>size 属性返回 Map 结构的成员总数。</td></tr><tr><td>set(key, value)</td><td>设置键名 key 对应的键值为 value，然后返回整个 Map 结构。</td></tr><tr><td>get(key)</td><td>get 方法读取 key 对应的键值，如果找不到 key，返回 undefined。</td></tr><tr><td>has(key)</td><td>has 方法返回一个布尔值，表示某个键是否在当前 Map 对象之中。</td></tr><tr><td>delete(key)</td><td>delete 方法删除某个键，返回 true。如果删除失败，返回 false。</td></tr><tr><td>clear()</td><td>clear 方法清除所有成员，没有返回值。</td></tr></tbody></table><p>注意：set 方法如果 key 已经有值，则键值会被更新，否则就新生成该键。</p><h2 id="class"><a href="#class" class="headerlink" title="class"></a>class</h2><p>class 可以看作只是一个语法糖，写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(x, y) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    toString() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'('</span> + <span class="keyword">this</span>.x + <span class="string">', '</span> + <span class="keyword">this</span>.y + <span class="string">')'</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义“类”的方法的时候，前面不需要加上 function 这个关键字。</p><p>ES6 的类，完全可以看作构造函数的另一种写法。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> Point <span class="comment">// "function"</span></span><br></pre></td></tr></table></figure><p>使用的时候，也是直接对类使用 new 命令。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Point(<span class="number">0</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h2 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h2><p>class 可以通过 extends 关键字实现继承，这比 ES5 的通过修改原型链实现继承，要清晰和方便很多。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorPoint</span> <span class="keyword">extends</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(x, y, color) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>(x, y); <span class="comment">// 调用父类的 constructor(x, y)</span></span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    toString() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.color + <span class="string">' '</span> + <span class="keyword">super</span>.toString(); <span class="comment">// 调用父类的 toString()</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>super 关键字表示父类的构造函数，用来新建父类的 this 对象。</li><li>子类必须在 constructor 方法中调用 super 方法，否则新建实例时会报错。</li></ul><h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><ul><li>模板字符串用反引号（`）标识。</li><li>如果在模板字符串中需要使用反引号，则前面要用反斜杠转义。</li><li>使用模板字符串表示多行字符串，所有的空格和缩进都会被保留在输出之中。</li><li>模板字符串中嵌入变量，需要将变量名写在${}之中。</li></ul><h2 id="延展操作符-…"><a href="#延展操作符-…" class="headerlink" title="延展操作符 (…)"></a>延展操作符 (…)</h2><p>它可以将数组，更确切的说是（可遍历对象）进行展开然后作为函数入参进行调用。</p><p>快速复制一个数组。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [...arr];</span><br></pre></td></tr></table></figure><p>剩余操作符 <code>(...)</code>，剩余参数允许长度不确定的实参表示为一个数组。</p><h2 id="for…of-循环"><a href="#for…of-循环" class="headerlink" title="for…of 循环"></a>for…of 循环</h2><p>语法：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( variable <span class="keyword">of</span> iterable ) &#123;</span><br><span class="line">    statement</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>variable：每个迭代的属性值被分配给该变量。</li><li>iterable：一个具有可枚举属性并且可以迭代的对象。</li></ul><h2 id="Module-的语法"><a href="#Module-的语法" class="headerlink" title="Module 的语法"></a>Module 的语法</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>历史上，JavaScript 一直没有模块（module）体系，无法将一个大程序拆分成互相依赖的小文件，再用简单的方法拼装起来。在 ES6 之前，社区制定了一些模块加载方案，最主要的有 CommonJS 和 AMD 两种。前者用于服务器，后者用于浏览器。ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代 <strong>CommonJS</strong> 和 <strong>AMD</strong> 规范，成为浏览器和服务器通用的模块解决方案。模块化编程在 js 界流行，随后在浏览器端，requirejs 和 seajs 之类的工具包也出现了，可以说在对应规范下，require 统治了 ES6 之前的所有模块化编程，即使现在，在 ES6 module 被完全实现之前，还是这样。node 的 module 遵循 CommonJS 规范，requirejs 遵循 AMD，seajs 遵循 CMD。</p><h3 id="export-命令"><a href="#export-命令" class="headerlink" title="export 命令"></a>export 命令</h3><p>ES6 的模块自动采用严格模式，不管你有没有在模块头部加上”use strict;”。</p><p>export 命令用于规定模块的对外接口，import 命令用于输入其他模块提供的功能。下面两种写法等价。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// profile.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法 1</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> firstName = <span class="string">'Michael'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> lastName = <span class="string">'Jackson'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> year = <span class="number">1958</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法 2</span></span><br><span class="line"><span class="keyword">var</span> firstName = <span class="string">'Michael'</span>;</span><br><span class="line"><span class="keyword">var</span> lastName = <span class="string">'Jackson'</span>;</span><br><span class="line"><span class="keyword">var</span> year = <span class="number">1958</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; firstName, lastName, year &#125;;</span><br></pre></td></tr></table></figure><p>export 命令除了输出变量，还可以输出函数或类（class）。</p><p>export 输出的变量就是本来的名字，但是可以使用 as 关键字重命名。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">v1</span>(<span class="params"></span>) </span>&#123; ... &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">v2</span>(<span class="params"></span>) </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line"></span><br><span class="line">    v1 <span class="keyword">as</span> streamV1,</span><br><span class="line">    v2 <span class="keyword">as</span> streamV2,</span><br><span class="line">    v2 <span class="keyword">as</span> streamLatestVersion</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>export 语句输出的接口，与其对应的值是动态绑定关系，即通过该接口，可以取到模块内部实时的值。</p><p>输出变量 foo，值为 bar，500 毫秒之后变成 baz。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> foo = <span class="string">'bar'</span>;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> foo = <span class="string">'baz'</span>, <span class="number">500</span>);</span><br></pre></td></tr></table></figure><p>注意：export 处于块级作用域内，就会报错，import 命令也是如此。</p><h3 id="import-命令"><a href="#import-命令" class="headerlink" title="import 命令"></a>import 命令</h3><p>使用 import 命令必须满足下列条件。</p><ul><li>浏览器必须支持 ES6 语法。</li><li>必须在服务器运行。</li><li>&lt;script&gt; 标签中加入 <code>type = &#39;module&#39;</code> 。</li></ul><p>使用 export 命令定义了模块的对外接口以后，其他 JS 文件就可以通过 import 命令加载这个模块。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; firstName, lastName, year &#125; <span class="keyword">from</span> <span class="string">'./profile.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    element.textContent = firstName + <span class="string">' '</span> + lastName;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想为输入的变量重新取一个名字，import 命令要使用 as 关键字，将输入的变量重命名。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; lastName <span class="keyword">as</span> surname &#125; <span class="keyword">from</span> <span class="string">'./profile.js'</span>;</span><br></pre></td></tr></table></figure><ul><li>import 命令输入的变量都是只读的，因为它的本质是输入接口。但对象的属性可以改写并且其他模块也可以读到改写后的值。</li><li>import 后面的 from 指定模块文件的位置，可以是相对路径，也可以是绝对路径，.js 后缀可以省略（谷歌浏览器测试不通过）。</li><li>import 命令具有提升效果，会提升到整个模块的头部。</li></ul><p>除了指定加载某个输出值，还可以使用整体加载，即用星号（*）指定一个对象，所有输出值都加载在这个对象上面。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> circle <span class="keyword">from</span> <span class="string">'./circle'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'圆面积：'</span> + circle.area(<span class="number">4</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'圆周长：'</span> + circle.circumference(<span class="number">14</span>));</span><br></pre></td></tr></table></figure><h3 id="export-default-命令"><a href="#export-default-命令" class="headerlink" title="export default 命令"></a>export default 命令</h3><p>export default 命令用于指定模块的默认输出。</p><p>一个模块只能有一个默认输出，因此 export default 命令只能使用一次。所以import 命令后面才不用加大括号。</p><p>本质上，export default 就是输出一个叫做 default 的变量或方法，然后系统允许你为它取任意名字。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// modules.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x * y;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;add <span class="keyword">as</span> <span class="keyword">default</span>&#125;;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> add;</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> foo &#125; <span class="keyword">from</span> <span class="string">'modules'</span>;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">import</span> foo <span class="keyword">from</span> <span class="string">'modules'</span>;</span><br></pre></td></tr></table></figure><h2 id="对象内部定义函数简写方式"><a href="#对象内部定义函数简写方式" class="headerlink" title="对象内部定义函数简写方式"></a>对象内部定义函数简写方式</h2><p>第一种写法：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line"></span><br><span class="line">    name: <span class="string">"p1"</span>,</span><br><span class="line">    sayThis() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>第二种写法：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person2 = &#123;</span><br><span class="line"></span><br><span class="line">    name: <span class="string">"p2"</span>,</span><br><span class="line">    sayThis: <span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>教程</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>渐进增强与优雅降级</title>
    <url>/posts/b6afdfc/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><p>本文主要介绍渐进增强与优雅降级相关概念。</p><a id="more"></a><hr><h2 id="渐进增强"><a href="#渐进增强" class="headerlink" title="渐进增强"></a>渐进增强</h2><p>一开始针对低版本的浏览器构建页面，满足最基本的功能，再针对高级浏 览器进行效果，交互，追加各种功能以达到更好用户体验。</p><h2 id="优雅降级"><a href="#优雅降级" class="headerlink" title="优雅降级"></a>优雅降级</h2><p>一开始针对一个高版本的浏览器构建页面，先完善所有的功能。然后针对各个不同的浏览器进行测试，修复，保证低级浏览器也有基本功能。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>IE 浏览器常见 Bug</title>
    <url>/posts/b9b74e47/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><p>本文主要列举 IE 浏览器常见 Bug。</p><a id="more"></a><hr><h2 id="透明度问题"><a href="#透明度问题" class="headerlink" title="透明度问题"></a>透明度问题</h2><p>问题描述：opacity 属性无效，必须使用 <code>filter: alpha(opacity=80);</code></p><p>解决方案：设置透明度（取值为 0~100）。</p><h2 id="IE6-双边局问题"><a href="#IE6-双边局问题" class="headerlink" title="IE6 双边局问题"></a>IE6 双边局问题</h2><p>问题描述：元素设置左浮动和左外边距（margin-left），元素距离浏览器左边的距离为左外边距 * 2。</p><p>解决方案：设置 <code>_display: inline;</code> 即可解决。</p><h2 id="IE6-最小高度为-19-px"><a href="#IE6-最小高度为-19-px" class="headerlink" title="IE6 最小高度为 19 px"></a>IE6 最小高度为 19 px</h2><p>解决方案：设置 <code>overflow: hidden;</code> 即可解决。</p><h2 id="图片链接产生边框问题"><a href="#图片链接产生边框问题" class="headerlink" title="图片链接产生边框问题"></a>图片链接产生边框问题</h2><p>问题描述：a 标签中嵌套 img 标签会产生边框。</p><p>解决方案：设置 <code>border: none;</code> 即可解决。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器前缀</title>
    <url>/posts/6982a08e/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><p>本文主要介绍浏览器前缀，浏览器前缀可以分为 CSS 前缀和选择器前缀。</p><a id="more"></a><hr><h2 id="CSS-前缀"><a href="#CSS-前缀" class="headerlink" title="CSS 前缀"></a>CSS 前缀</h2><table><thead><tr><th>浏览器</th><th>内核</th><th>前缀</th><th>补充</th></tr></thead><tbody><tr><td>Chrome（谷歌浏览器）</td><td>WebKit 内核</td><td>-webkit-</td><td></td></tr><tr><td>Safari（苹果浏览器）</td><td>WebKit 内核</td><td>-webkit-</td><td></td></tr><tr><td>Firefox（火狐浏览器）</td><td>Gecko 内核</td><td>-moz-</td><td></td></tr><tr><td>Opera（欧朋浏览器）</td><td>Presto 内核</td><td>-o-</td><td></td></tr><tr><td>IE(IE 浏览器）</td><td>Trident 内核</td><td>-ms-</td><td></td></tr><tr><td>IE6</td><td>&nbsp;</td><td>_</td><td></td></tr><tr><td>IE6~7</td><td>&nbsp;</td><td>+、*</td><td></td></tr><tr><td>IE6~9</td><td>&nbsp;</td><td>\9</td><td>width: 100px\9;</td></tr><tr><td>IE8~11</td><td>&nbsp;</td><td>\0</td><td>width: 100px\0;</td></tr></tbody></table><h2 id="选择器前缀"><a href="#选择器前缀" class="headerlink" title="选择器前缀"></a>选择器前缀</h2><table><thead><tr><th>浏览器</th><th>前缀</th></tr></thead><tbody><tr><td>IE6</td><td>*html</td></tr><tr><td>IE7</td><td>*+html</td></tr><tr><td>IE9 以上及现代浏览器</td><td>:root</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>格式化上下文</title>
    <url>/posts/451e216f/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><p>本文主要介绍格式化上下文相关概念以及 BFC 相关特性。</p><a id="more"></a><hr><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>有的盒子呈水平排列，有的盒子却占满整个一行。这是因为不同的盒子，使用的是不同的格式化上下文来布局。</p><p>格式化上下文常见的有两种。</p><ul><li>块格式化上下文（BFC）</li><li>行内格式化上下文（IFC）</li></ul><h2 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h2><p>BFC 是页面上的一个独立容器。</p><p>BFC 属性具有以下特性：</p><ul><li>父元素的外边距（margin）不会受子元素影响。</li><li>同级元素的垂直外边距不会合并。</li><li>不会被浮动元素所覆盖（三栏布局）。</li><li>可以包含浮动元素。不会造成高度塌陷。</li><li>高度塌陷：父元素没有设置高度，高度默认被子元素撑开，一旦子元素脱离文档流，则父元素的高度自动变为 0，造成页面排版混乱。</li></ul><p>BFC 是元素的隐藏属性，默认是关闭状态，开启 BFC 的方式：</p><ul><li>浮动元素，float 除 none 以外的值。</li><li>定位元素，position（absolute，fixed）。</li><li>display 为以下其中之一的值 inline-block, table-cell, table-caption。</li><li>overflow 设置除了 visible 以外的值（hidden, auto, scroll）。</li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>CSS</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>媒体查询（响应式布局）</title>
    <url>/posts/cb9ff0ec/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><p>本文主要介绍媒体查询（响应式布局）相关属性的使用。</p><a id="more"></a><hr><h2 id="media"><a href="#media" class="headerlink" title="@media"></a>@media</h2><p>使用 @media 查询，你可以针对不同的媒体类型定义不同的样式。</p><p>语法：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">media</span> mediatype and|not|only (media feature) &#123;</span><br><span class="line">    <span class="selector-tag">CSS-Code</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>媒体类型（mediatype）：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>screen</code></td><td>用于电脑屏幕，平板电脑，智能手机等。</td></tr></tbody></table></li><li><p><code>and</code> 是一个关键字，表示有多个表达式，mediatype 是第一个表达式，and 后为另一个表达式，需前后表达式都为真时，整条查询结构才为真。</p></li><li><p><code>only</code> 指定某种特定的媒体类型，可以用来排除不支持媒体查询的浏览器。</p></li><li><p><code>not</code> 排除某种制定的媒体类型。</p></li><li><p>媒体功能（media feature）：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>min-width</code></td><td>定义输出设备中的页面最小可见区域宽度。</td></tr><tr><td><code>max-width</code></td><td>定义输出设备中的页面最大可见区域宽度。</td></tr></tbody></table></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>CSS</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>字体图标</title>
    <url>/posts/2b320a99/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><p>本文主要介绍使用字体图标相关属性。</p><a id="more"></a><hr><h2 id="font-face"><a href="#font-face" class="headerlink" title="@font-face"></a>@font-face</h2><p><code>@font-face</code> 规则允许在 web 页面上加载自定义字体。属性如下：</p><ul><li><code>font-family</code> 必需。规定字体的名称。</li><li><code>src</code> 必需。定义字体文件的 URL。</li><li><code>content</code> 输出的是字符编码，通过字符编码找到字体库对应的字体内容。</li></ul><p>format（字体格式）参数说明。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">"Open Sans"</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">"/fonts/OpenSans-Regular-webfont.woff2"</span>) <span class="built_in">format</span>(<span class="string">"woff2"</span>),</span><br><span class="line">       <span class="built_in">url</span>(<span class="string">"/fonts/OpenSans-Regular-webfont.woff"</span>) <span class="built_in">format</span>(<span class="string">"woff"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>truetype</code></td><td>.ttf 字体格式是 Windows 和 Mac 的最常见的。</td></tr><tr><td><code>opentype</code></td><td>原始字体格式，内置在 truetype 基础之上。</td></tr><tr><td><code>embedded-opentype</code></td><td>.eot 字体格式是 IE 专用的。</td></tr><tr><td><code>woff</code></td><td>web 字体最佳格式。</td></tr><tr><td><code>woff2</code></td><td>woff2 字体格式。</td></tr><tr><td><code>svg</code></td><td>基于 svg 渲染。</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>CSS</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>如何将 SVG 图标转换成字体图标？</title>
    <url>/posts/99b64e40/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><p>本文主要介绍如何将 SVG 图标转换成字体图标。</p><a id="more"></a><hr><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>首先下载 svg 矢量图标（阿里巴巴矢量图标库），然后通过第三方网站（例如：icomoon）转换成字体图标。得到一个压缩包，把压缩包中的字体文件和 css 文件导入项目中即可使用。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 中 @import 语句</title>
    <url>/posts/b5cd75ce/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><p>本文主要介绍 @import 语句的作用。</p><a id="more"></a><hr><h2 id="import-语句"><a href="#import-语句" class="headerlink" title="@import 语句"></a>@import 语句</h2><p>@import 规则指示请求样式表，如果内容正确，就会引入一个外部的 CSS 文件。</p><p>语法：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">'css 文件路径'</span>;</span><br><span class="line">@<span class="keyword">import</span> url(<span class="string">"css 文件路径"</span>);</span><br></pre></td></tr></table></figure><p>每一个 @import 都是一个独立的 HTPP 请求。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 函数</title>
    <url>/posts/9a375ea/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><p>本文主要介绍 CSS 函数。</p><a id="more"></a><hr><h2 id="函数说明"><a href="#函数说明" class="headerlink" title="函数说明"></a>函数说明</h2><p><code>calc()</code> 函数用于动态计算长度值。</p><ul><li>任何长度值都可以使用 calc() 函数进行计算。</li><li>运算符前后都需要保留一个空格，例如： <code>width: calc(100% - 10px)</code> 。</li><li>calc() 函数支持 “+”, “-“, “*”, “/“ 运算。</li></ul><p><code>linear-gradient(direction, color-stop1, color-stop2, ...);</code> 用于创建一个<strong>线性渐变</strong>的 “图像”。</p><p>该函数需要添加到 background-image 属性上使用。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="comment">/* 从右下到左上、从蓝色渐变到红色 */</span></span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to left top, blue, red);</span><br><span class="line">    <span class="comment">/* 0 ~ 25% 和 75% ~ 100% 为纯色，25% ~ 75% 为渐变色 */</span></span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to left top, blue 25%, red 75%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>radial-gradient(shape size at position, start-color, ..., last-color);</code> 函数用<strong>径向渐变</strong>创建”图像”。</p><p>该函数需要添加到 background-image 属性上使用。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="comment">/* 0 ~ 25% 和 75% ~ 100% 为纯色，25% ~ 75% 为渐变色 */</span></span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">radial-gradient</span>(blue 25%, red 50%, yellow 75%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>CSS</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Flex 布局</title>
    <url>/posts/1ec02f4f/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><p>本文主要介绍 Flex 布局中常用的相关属性。</p><a id="more"></a><hr><h2 id="Flex-容器"><a href="#Flex-容器" class="headerlink" title="Flex 容器"></a>Flex 容器</h2><p><code>display:flex;</code> 将对象作为弹性伸缩盒显示。</p><p><code>display:inline-flex;</code> 将对象作为内联块级弹性伸缩盒显示。</p><p><code>flex-flow</code> 属性是 flex-direction 和 flex-wrap 的简写，默认 row nowrap。</p><p><code>flex-direction</code> 用于指定 flex 主轴的方向，继而决定 flex 子项在 flex 容器中的位置。</p><ul><li><code>row</code> 默认值。灵活的项目将水平显示，正如一个行一样，起点在屏幕左边。</li><li><code>row-reverse</code> 与 row 相同，但是以相反的顺序，起点在屏幕右边。</li><li><code>column</code> 灵活的项目将垂直显示，正如一个列一样，起点在屏幕上边。</li><li><code>column-reverse</code> 与 column 相同，但是以相反的顺序，起点在屏幕下边。</li></ul><p><code>flex-wrap</code> 属性规定 flex 容器是单行或者多行，同时横轴的方向决定了新行堆叠的方向。</p><ul><li><code>nowrap</code> 默认值。规定灵活的项目不拆行或不拆列。</li><li><code>wrap</code> 规定灵活的项目在必要的时候拆行或拆列。</li><li><code>wrap-reverse</code> 规定灵活的项目在必要的时候拆行或拆列，但是以相反的顺序。</li></ul><p><code>justify-content</code> 定义项目在主轴上的对齐方式。</p><ul><li><code>flex-start</code> 默认值。项目位于容器的开头。</li><li><code>flex-end</code> 项目位于容器的结尾。</li><li><code>center</code> 项目位于容器的中心。</li><li><code>space-between</code> 两端项目对齐（左边和右边没有间隔），其余项目两侧间隔相等。</li><li><code>space-around</code> 每个项目两侧的间隔相等（左边和右边间隔为 x，其余项目两侧间隔为 2x）。</li></ul><p><code>align-items</code> 属性定义 flex 子项在 flex 容器的当前行的侧轴方向上的对齐方式。</p><ul><li><code>stretch</code> 默认值。元素被拉伸以适应容器。如果设置了长度则不拉伸。</li><li><code>center</code> 元素位于容器侧轴的中心。</li><li><code>flex-start</code> 元素位于容器侧轴的开头。</li><li><code>flex-end</code> 元素位于容器侧轴的结尾。</li><li><code>baseline</code> 元素位于容器的基线上。</li></ul><p><code>align-content</code> 定义多根主轴的对齐方式。</p><ul><li><code>stretch</code> 默认值。元素被拉伸以适应容器。如果设置了长度则不拉伸。</li><li><code>flex-start</code> 元素位于容器侧轴的开头。</li><li><code>flex-end</code> 元素位于容器侧轴的结尾。</li><li><code>center</code> 元素位于容器侧轴的中心。</li><li><code>baseline</code> 元素位于容器的基线上。</li><li><code>space-between</code> 与交叉轴的两端对齐，轴线之间的间隔平均分布。</li><li><code>space-around</code> 每根轴线两侧的间隔相等。</li></ul><h2 id="flex-项目"><a href="#flex-项目" class="headerlink" title="flex 项目"></a>flex 项目</h2><p><code>flex</code> 属性是 flex-grow、flex-shrink 和 flex-basis 属性的简写属性。</p><p><code>flex-grow</code> 属性用于设置或检索弹性盒子的放大比率。</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>number</td><td>一个数字，规定项目将相对于其他项目进行扩展的量。默认值是 0。</td></tr></tbody></table><p><code>flex-shrink</code> 属性定义项目的缩小比例。默认值都为 1，空间不足将等比例缩小。为 0 不缩放。</p><p><code>flex-basis</code> 属性定义在分配多余空间之前，项目占据的主轴空间。</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>number</td><td>一个长度单位（px）或者一个百分比。</td></tr></tbody></table><ul><li>如果元素上同时设置了 width 和 flex-basis，那么 width 的值就会被 flex-basis 覆盖掉。</li><li>width 属性只是一个当 flex-basis 没有被设置时的回退选项。min-width 和 max-width 则是 flex-basis 的下限和上限。</li></ul><p><code>order</code> 属性定义项目的排列顺序。</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>number</td><td>一个整数。数值越小，排列越靠前，默认为 0，可以是负值。</td></tr></tbody></table><p><code>align-self</code> 属性定义 flex 子项单独在侧轴方向上的对齐方式。</p><ul><li><code>auto</code> 默认值。元素继承了它的父容器的 align-items 属性。</li><li><code>stretch</code> 元素被拉伸以适应容器。</li><li><code>flex-start</code> 元素位于容器的开头。</li><li><code>flex-end</code> 元素位于容器的结尾。</li><li><code>center</code> 元素位于容器的中心。</li><li><code>baseline</code> 元素位于容器的基线上。</li></ul><h2 id="flex-布局注意事项"><a href="#flex-布局注意事项" class="headerlink" title="flex 布局注意事项"></a>flex 布局注意事项</h2><ul><li>flex 布局中慎用 position 定位。</li><li>flex 布局中 float 属性失效。</li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>CSS</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 动画</title>
    <url>/posts/19ff9408/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><p>本文主要介绍 CSS 相关动画属性。</p><a id="more"></a><hr><h2 id="CSS-动画"><a href="#CSS-动画" class="headerlink" title="CSS 动画"></a>CSS 动画</h2><p>CSS3 动画只兼容 IE9 以上。</p><p><code>transform</code> 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。</p><ul><li><code>scaleX(x)</code> 通过设置 X 轴的值来定义缩放转换。</li><li><code>scaleY(y)</code> 通过设置 Y 轴的值来定义缩放转换。</li><li><code>scale(x,y)</code> 设置 x, y 轴的值来定义缩放转换。</li><li><code>translateX(x)</code> x 轴移动。</li><li><code>translateY(y)</code> y 轴移动。</li><li><code>translate(x,y)</code> x, y 轴移动。</li><li><code>rotateX(angle)</code> 定义沿着 X 轴的 3D 旋转。angle 参数：-180deg（-180 度）。</li><li><code>rotateY(angle)</code> 定义沿着 Y 轴的 3D 旋转。</li><li><code>rotate(angle)</code> 定义 2D 旋转，在参数中规定角度。</li></ul><p><code>transform-origin</code> 属性是用来改变元素变形的原点，一般用来配合旋转来使用最多。</p><ul><li>注意：该属性必须与 transform 属性一同使用。</li><li>语法：transform-origin: x-axis y-axis z-axis;</li></ul><table><thead><tr><th>参数</th><th>说明</th><th>可选参数</th></tr></thead><tbody><tr><td><code>x-axis</code></td><td>定义视图被置于 X 轴的何处。</td><td>left、 center、 right、 length、 %</td></tr><tr><td><code>y-axis</code></td><td>定义视图被置于 Y 轴的何处。</td><td>top、 center、 bottom、 length、 %</td></tr></tbody></table><p><code>transition</code> 属性是一个简写属性，用于设置四个过渡属性：</p><p><code>transition-property</code> 规定设置过渡效果的 CSS 属性的名称。</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>none</code></td><td>没有属性会获得过渡效果。</td></tr><tr><td><code>all</code></td><td>所有属性都将获得过渡效果。</td></tr></tbody></table><ul><li>transition-property 值为 all 时，不管元素是否具有 transfrom 属性，只要元素发生改变，都会获得过渡效果。</li><li>过渡效果添加在哪个元素上，取决于是哪个元素需要过渡效果。</li></ul><p><code>transition-duration</code> 规定完成过渡效果需要多少秒或毫秒。</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>time</td><td>规定完成过渡效果需要花费的时间（以秒或毫秒计）。默认值是 0。</td></tr></tbody></table><p><code>transition-timing-function</code> 规定速度效果的速度曲线。</p><ul><li><code>linear</code> 规定以相同速度开始至结束的过渡效果。</li><li><code>ease</code> 规定慢速开始，然后变快，然后慢速结束的过渡效果。</li><li><code>ease-in</code> 规定以慢速开始的过渡效果。</li><li><code>ease-out</code> 规定以慢速结束的过渡效果。</li><li><code>ease-in-out</code> 规定以慢速开始和结束的过渡效果。</li><li><code>cubic-bezier(n,n,n,n)</code> 在 cubic-bezier 函数中定义自己的值。可能的值是 0 至 1 之间的数值。</li></ul><p><code>transition-delay</code> 定义过渡效果何时开始。</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>time</td><td>规定在过渡效果开始之前需要等待的时间，以秒或毫秒计。</td></tr></tbody></table><h2 id="3D-相关属性"><a href="#3D-相关属性" class="headerlink" title="3D 相关属性"></a>3D 相关属性</h2><p><code>transform-style</code> 属性规定如何在 3D 空间中呈现被嵌套的元素。</p><ul><li><code>flat</code> 子元素将不保留其 3D 位置。</li><li><code>preserve-3d</code> 子元素将保留其 3D 位置（3D 空间）。</li></ul><p><code>perspective</code> 属性定义 3D 元素距视图的距离，以像素计。</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>number</td><td>元素距离视图的距离，以像素计。</td></tr><tr><td>none</td><td>默认值，与 0 相同，不设置透视。</td></tr></tbody></table><ul><li>当为元素定义 perspective 属性时，其子元素会获得透视效果，而不是元素本身。</li><li>相当于创建一台照相机，number 值越大，元素与照相机距离越近，效果越明显。</li></ul><p>perspective-origin 定义 3D 元素基于的 X 轴和 Y 轴（改变摄像机的位置）。</p><ul><li>语法： <code>perspective-origin: x-axis y-axis;</code></li></ul><table><thead><tr><th>参数</th><th>说明</th><th>可选参数</th></tr></thead><tbody><tr><td>x-axis</td><td>定义该视图在 x 轴上的位置。默认值：50%。</td><td>left、center、right、length、%</td></tr><tr><td>y-axis</td><td>定义该视图在 y 轴上的位置。默认值：50%。</td><td></td></tr></tbody></table><p><code>backface-visibility</code> 属性定义当元素不面向屏幕时是否可见。</p><ul><li><code>visible</code> 背面是可见的。</li><li><code>hidden</code> 背面是不可见的。</li></ul><h2 id="自定义动画"><a href="#自定义动画" class="headerlink" title="自定义动画"></a>自定义动画</h2><p>通过 @keyframes 规则，您能够创建动画。创建动画的原理是，将一套 CSS 样式逐渐变化为另一套样式。以百分比来规定改变发生的时间，或者通过关键词 “from” 和 “to”，等价于 0% 和 100%。0% 是动画的开始时间，100% 动画的结束时间。</p><p>语法：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">keyframes</span> animationname &#123;</span><br><span class="line">    <span class="selector-tag">keyframes-selector</span> &#123;</span><br><span class="line">        css-styles;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>animationname</code> 必需。定义动画的名称。</p></li><li><p><code>keyframes-selector</code> 必需。动画时长的百分比。</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>0-100%</code></td><td></td></tr><tr><td><code>from</code></td><td>与 0% 相同</td></tr><tr><td><code>to</code></td><td>与 100% 相同</td></tr></tbody></table></li><li><p><code>css-styles</code> 必需。一个或多个合法的 CSS 样式属性。</p></li></ul><p><code>animation</code> 属性是一个简写属性，用于设置以下六个动画属性。</p><ul><li><p><code>animation-name</code> 规定需要绑定到选择器的 keyframe 名称。</p></li><li><p><code>animation-duration</code> 规定完成动画所花费的时间，以秒或毫秒计。</p></li><li><p><code>animation-timing-function</code> 规定动画的速度曲线。</p></li><li><p><code>animation-delay</code> 规定在动画开始之前的延迟。</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>time</td><td>可选。定义动画开始前等待的时间，以秒或毫秒计。默认值是 0。</td></tr></tbody></table></li><li><p><code>animation-iteration-count</code> 规定动画应该播放的次数。</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>n</td><td>定义动画播放次数的数值。</td></tr><tr><td><code>infinite</code></td><td>规定动画应该无限次播放。</td></tr></tbody></table></li><li><p><code>animation-direction</code> 规定是否应该轮流反向播放动画。</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>normal</code></td><td>默认值。动画应该正常播放。</td></tr><tr><td><code>alternate</code></td><td>动画应该轮流反向播放。</td></tr></tbody></table></li></ul><p><code>animation-fill-mode</code> 规定当动画不播放时要应用到元素的样式。</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>forwards</td><td>在动画结束后，动画将应用动画结束的属性值。</td></tr></tbody></table><p><code>animation-play-state</code> 规定动画正在运行还是暂停。</p><ul><li><code>paused</code> 规定动画已暂停。</li><li><code>running</code> 规定动画正在播放。</li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>CSS</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Grid网格布局</title>
    <url>/posts/d97530e8/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码，查看文章。</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="6e5131f70abd4631a6bd10a9b71e19cec6c92635443fe612b0df1066152ebcee">01118a64dfdab291d98e66adcd8332c5cb69c7e0e747bb01123a56b01db29c77177970e19c6aa6cdb4371f8b96838e356ffb1350636fece1e1fc05ba7f3d06b79d1990bd09f480fb209f174e512322d9ebd1efe95efb85181e940068776afb34</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>CSS</tag>
        <tag>未完待续</tag>
      </tags>
  </entry>
  <entry>
    <title>flex布局中的align-self属性不工作的原因?</title>
    <url>/posts/72293898/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><p>本文主要分析flex布局中的align-self属性不工作的原因。</p><a id="more"></a><hr><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>检查 flex 弹性盒是否存在 align-content 属性，align-content 优先级大于 align-items。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>如何清除行内块元素之间默认间距？</title>
    <url>/posts/613032c5/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><p>本文介绍清除行内块元素之间默认间距的四种方案。</p><a id="more"></a><hr><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>方案一：行内块元素设置浮动。</p><p>方案二：在产生边距的行内块的父元素设置属性：<code>font-size: 0px</code></p><p>方案三：在父元素上设置，word-spacing（词边距）的值设为合适的负值即可。</p><p>方案四：在 html 代码中将行内块元素放在同一行显示，不要进行美观缩进或者换行。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>实现滚动视差效果</title>
    <url>/posts/66b453b2/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><p>本文给出制作滚动视差效果的思路。</p><a id="more"></a><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>通过 background-attachment 属性实现。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">background-attachment</span>: fixed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>实现文本溢出显示省略号</title>
    <url>/posts/e0d499dc/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><p>本文贴出文本溢出显示省略号的 CSS 样式。</p><a id="more"></a><hr><h2 id="CSS-样式"><a href="#CSS-样式" class="headerlink" title="CSS 样式"></a>CSS 样式</h2><p>单行文本溢出显示省略号。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.text-overflow</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>:ellipsis;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多行文本溢出显示省略号。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.text-overflow</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">    <span class="attribute">-webkit-box-orient</span>: vertical;</span><br><span class="line">    <span class="attribute">-webkit-line-clamp</span>: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>清除浮动的三种方案</title>
    <url>/posts/771032e6/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><p>主要介绍为何要清除浮动平且给予清除浮动的三种解决方案</p><a id="more"></a><hr><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>为什么要清除浮动？</p><ul><li>清除浮动主要是为了解决，父元素因为子级元素浮动引起的内部高度为 0 的问题（高度塌陷）。</li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>通过 clear 解决高度塌陷的问题。设置空的 div 标签，然后设置 clear 属性为 both（不推荐）。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>伪元素写法。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clear</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>伪元素通过触发 BFC 清除浮动。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clear</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="comment">/* 触发 BFC */</span></span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是 CSS Reset？</title>
    <url>/posts/11d71e35/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><p>本文解释 CSS Reset 的定义。</p><a id="more"></a><hr><h2 id="CSS-Reset-定义"><a href="#CSS-Reset-定义" class="headerlink" title="CSS Reset 定义"></a>CSS Reset 定义</h2><p>HTML 标签在浏览器中都有默认的样式，不同的浏览器的默认样式之间存在差别。例如 ul 默认带有缩进样式，在 IE 下，它的缩进是由 margin 实现的，而在 Firefox 下却是由 padding 实现的。开发时浏览器的默认样式可能会给我们带来多浏览器兼容性问题，影响开发效率。所以解决的方法就是一开始就将浏览器的默认样式全部去掉，更准确说就是通过重新定义标签样式。“覆盖”浏览器的 CSS 默认属性。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>制作选项卡与面板连为一体的效果</title>
    <url>/posts/5930ffbe/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><p>本文给出制作选项卡与面板连为一体的效果的思路。</p><a id="more"></a><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>选项卡子元素高度大于父元素高度，父元素设置 <code>overflow:hidden</code> 属性。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么height设置百分比无效？</title>
    <url>/posts/481b104c/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><p>本文解释为什么height设置百分比无效？并给出解决方案。</p><a id="more"></a><hr><h2 id="为什么height设置百分比无效"><a href="#为什么height设置百分比无效" class="headerlink" title="为什么height设置百分比无效"></a>为什么height设置百分比无效</h2><p>页面并没有缺省的高度值，所以当你让一个元素的高度设定为百分比高度时，无法获取父元素的高度，也就无法计算自己的高度。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>如何设置元素高度为当前浏览器窗口的 50%？</p><ul><li>html 和 body 元素高度设置 100%，body 下的直接子元素高度设置 50%。</li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>如何填充剩余宽度？</title>
    <url>/posts/877bc66d/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><p>本文介绍两种元素填充剩余宽度的解决方案。</p><a id="more"></a><hr><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>方案一：前面的元素设置浮动，后面的元素必须块级元素，块级元素宽度默认是浏览器宽度，可以利用 margin-left 属性设置后面块级元素来控制宽度（显示区域）。</p><p>方案二：父盒子设置 flex 弹性收缩盒，前面的项目设置定宽，后面的项目设置 <code>flex:1</code>。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>正负 margin 特性</title>
    <url>/posts/460c0d5/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><p>本文介绍正负 margin 特性。</p><a id="more"></a><hr><h2 id="正-margin-特性"><a href="#正-margin-特性" class="headerlink" title="正 margin 特性"></a>正 margin 特性</h2><ul><li>margin 可以撑出一个盒子的宽度。例如： <code>margin:0 200px;</code> 。</li><li>要将网页填充满这个浏览器，不留边界。可以设置 body 标签 margin 值为 0px 。</li><li>所有毗邻的两个或更多盒元素的垂直外边距为正值会合并（margin-top 和 margin-bottom），相邻的垂直外边距会取最大值。</li><li>毗邻的定义为：同级或者嵌套的盒元素，并且它们之间没有非空内容、padding 或 border 分隔。</li></ul><h2 id="负-margin-的特性"><a href="#负-margin-的特性" class="headerlink" title="负 margin 的特性"></a>负 margin 的特性</h2><p>margin 为负且盒子 static 时：</p><ul><li>若属性为 top、left，盒子将被拉进指定的方向。</li><li>若属性为 bottom、right, 将后续的元素拖拉进来，覆盖本来的元素。</li><li>若 width 没有被设置，设定负 margin-left/right 会将元素拖向对应的方向，并增加宽度，此时的 margin 的作用就像 padding 一样。</li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 margin 无法水平居中和垂直居中的问题</title>
    <url>/posts/59108d5d/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><p>本文主要解决 margin 无法水平居中和垂直居中的问题。</p><a id="more"></a><hr><h2 id="解决-margin-水平居中无效方案"><a href="#解决-margin-水平居中无效方案" class="headerlink" title="解决 margin 水平居中无效方案"></a>解决 margin 水平居中无效方案</h2><p>父盒子设置 flex 属性，子盒子设置 <code>margin 0 auto;</code></p><h2 id="解决-margin-垂直居中无效方案"><a href="#解决-margin-垂直居中无效方案" class="headerlink" title="解决 margin 垂直居中无效方案"></a>解决 margin 垂直居中无效方案</h2><p>为什么 margin: auto 0; 无法实现垂直居中？</p><ul><li>在普通文档流中，<code>margin: auto 0;</code> 的效果等同于 <code>margin-top:0;</code> 和 <code>margin-bottom:0</code>。</li><li><code>position: absolute</code> 使绝对定位块跳出了内容流，内容流中的其余部分渲染时绝对定位部分不进行渲染。</li><li>为块区域设置 <code>top: 0;</code> <code>left: 0;</code> <code>bottom: 0;</code> <code>right: 0;</code> 将给浏览器重新分配一个边界框，此时该块块将填充其父元素的所有可用空间，所以 margin 垂直方向上有了可分配的空间。</li><li>再设置 margin 垂直方向上下为 auto，即可实现垂直居中。</li></ul><p>实现绝对居中：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 进阶之 CSS3 常用属性</title>
    <url>/posts/2cfbf6fb/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><p>本文主要介绍开发中常用的 CSS 属性。</p><a id="more"></a><hr><h2 id="class-属性"><a href="#class-属性" class="headerlink" title="class 属性"></a>class 属性</h2><p>class 属性可以指定多个类，每个类用空格隔开。</p><h2 id="基础属性"><a href="#基础属性" class="headerlink" title="基础属性"></a>基础属性</h2><h3 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h3><p><code>color</code> 属性规定文本的颜色。</p><h3 id="长度"><a href="#长度" class="headerlink" title="长度"></a>长度</h3><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>width</code></td><td>设置元素的宽度</td></tr><tr><td><code>height</code></td><td>设置元素的高度</td></tr><tr><td><code>min-width</code></td><td>设置元素的最小宽度</td></tr><tr><td><code>max-width</code></td><td>设置元素的最大宽度</td></tr></tbody></table><p>width 和 min-width 的区别？</p><ul><li>width 给块级元素/行内块元素设置固定的宽度，或者固定百分比的宽度。</li><li>min-width 当盒子内部元素宽度小于 min-width 的值时，盒子宽度为 min-width 的值，当盒子内容宽度大于 min-width 的值时，盒子随着内容的增加而被撑大。</li></ul><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><p>所有标签都适用盒子模型。都可以设置 padding、border 和 margin。</p><h3 id="content"><a href="#content" class="headerlink" title="content"></a>content</h3><p><code>content</code> 属性与 <code>:before</code> 及 <code>:after</code> 伪元素配合使用，来插入生成内容。</p><table><thead><tr><th>示例</th><th>说明</th></tr></thead><tbody><tr><td><code>content: &quot;&quot;;</code></td><td>内容为空。</td></tr><tr><td><code>content: &quot;str&quot;;</code></td><td>插入字符串 str。</td></tr><tr><td><code>content: &quot;字符编码&quot;;</code></td><td>字符编码格式：\21e0。</td></tr><tr><td><code>content: url(url);</code></td><td>请求外部资源。</td></tr><tr><td><code>content: attr（标签属性）;</code></td><td>插入标签属性值。</td></tr></tbody></table><h3 id="padding"><a href="#padding" class="headerlink" title="padding"></a>padding</h3><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>padding</code></td><td>内边距</td></tr><tr><td><code>padding-top</code></td><td>上内边距</td></tr><tr><td><code>padding-right</code></td><td>右内边距</td></tr><tr><td><code>padding-buttom</code></td><td>下内边距</td></tr><tr><td><code>padding-left</code></td><td>左内边距</td></tr></tbody></table><p>padding 用法示例：</p><table><thead><tr><th>CSS</th><th>说明</th></tr></thead><tbody><tr><td><code>padding:10px 5px 15px 20px;</code></td><td>上内边距是 10px，右内边距是 5px，下内边距是 15px，左内边距是 20px。</td></tr><tr><td><code>padding:10px 5px 15px;</code></td><td>上内边距是 10px，右内边距和左内边距是 5px，下内边距是 15px。</td></tr><tr><td><code>padding:10px 5px;</code></td><td>上内边距和下内边距是 10px，右内边距和左内边距是 5px。</td></tr><tr><td><code>padding:10px;</code></td><td>上内边距和下内边距是 10px，右内边距和左内边距是 5px。</td></tr></tbody></table><h3 id="margin"><a href="#margin" class="headerlink" title="margin"></a>margin</h3><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>margin</code></td><td>外边距</td></tr><tr><td><code>margin-top</code></td><td>上外边框</td></tr><tr><td><code>margin-left</code></td><td>左外边框</td></tr><tr><td><code>margin-buttom</code></td><td>下外边框</td></tr><tr><td><code>margin-right</code></td><td>右外边框</td></tr></tbody></table><h4 id="margin-参数说明"><a href="#margin-参数说明" class="headerlink" title="margin 参数说明"></a>margin 参数说明</h4><table><thead><tr><th>可选参数</th><th>说明</th></tr></thead><tbody><tr><td><code>auto</code></td><td>浏览器自动计算外边距</td></tr></tbody></table><p>示例：上下页面空白为 0px，左右页面空白自适应并且相等。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.auto</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h3><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>border</code></td><td>边框</td></tr><tr><td><code>border-top</code></td><td>上边框</td></tr><tr><td><code>border-right</code></td><td>右边框</td></tr><tr><td><code>border-buttom</code></td><td>下边框</td></tr><tr><td><code>border-left</code></td><td>左边框</td></tr></tbody></table><p>border 属性可以按顺序设置如下属性： <code>border-width border-style border-color</code> 。</p><p>border-style 属性用于设置元素所有边框的样式，或者单独地为各边设置边框样式。</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>solid</code></td><td>定义实线。</td></tr><tr><td><code>Dashed</code></td><td>定义虚线。在大多数浏览器中呈现为实线。</td></tr></tbody></table><p>可以利用 border 属性绘制三角形。</p><h2 id="display"><a href="#display" class="headerlink" title="display"></a>display</h2><p><code>display</code> 属性规定元素应该生成的框的类型。取值如下：</p><ul><li><code>none</code> 设置元素不显示。</li><li><code>block</code> 设置元素为块级元素，此元素前后会带有换行符。</li><li><code>inline</code> 为默认值。设置元素为内联元素，元素前后没有换行符。</li><li><code>inline-block</code> 设置元素为行内块元素。</li><li><code>table</code> 设置元素为块级表格来显示（类似 <code>&lt;table&gt;</code> ），表格前后带有换行符。</li><li><code>table-row</code> 设置元素为表格行来显示（类似 <code>&lt;tr&gt;</code> ）。</li><li><code>table-cell</code> 设置元素为表格单元格来显示（类似 <code>&lt;td&gt;</code> 和 <code>&lt;th&gt;</code> ）。</li></ul><p>注意：</p><ul><li>table 的 padding 属性会失效。</li><li>table-row 的 margin 和 padding 属性会失效。</li><li>table-cell 的 margin 属性会失效。</li></ul><h2 id="显示隐藏"><a href="#显示隐藏" class="headerlink" title="显示隐藏"></a>显示隐藏</h2><p><code>opacity</code> 属性设置元素的不透明级别。</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>value</td><td>规定不透明度。从 0.0（完全透明）到 1.0（完全不透明）。</td></tr></tbody></table><p><code>visibility</code> 属性规定元素是否可见。即使不可见的元素也会占据页面上的空间。</p><ul><li>visible 默认值。元素是可见的。</li><li>hidden 元素是不可见的（会占据页面上的空间）。</li></ul><h2 id="对齐居中"><a href="#对齐居中" class="headerlink" title="对齐居中"></a>对齐居中</h2><h3 id="line-height"><a href="#line-height" class="headerlink" title="line-height"></a>line-height</h3><p><code>line-height</code> 属性设置行高，间接设置行间距。参数可以是 length 或 % 。</p><p>如何通过 line-height 属性设置内联元素垂直居中？</p><ul><li>块级元素包含内联元素，块级标签中可以通过 line-height 属性控制内联元素的行间的距离，实现垂直居中。</li></ul><p>行间距计算公式：行间距 = 行高（line-height）- 字体大小</p><h3 id="vertical-align"><a href="#vertical-align" class="headerlink" title="vertical-align"></a>vertical-align</h3><p><code>vertical-align</code> 属性定义行内元素的基线相对于该元素所在行的基线的垂直对齐。</p><p>参数如下：</p><ul><li><code>length</code> 设置固定像素值。</li><li><code>%</code> 设置百分比。</li><li><code>baseline</code> 默认。元素放置在父元素的基线上。</li><li><code>middle</code> 把此元素放置在父元素的中部。</li><li><code>top</code> 把元素的顶端与行中最高元素的顶端对齐。</li><li><code>bottom</code> 把元素的顶端与行中最低的元素的顶端对齐。</li></ul><p>vertical-align 属性可以调整 textarea 标签前的文本处于中间、顶部还是底部。</p><h2 id="浮动和定位"><a href="#浮动和定位" class="headerlink" title="浮动和定位"></a>浮动和定位</h2><h3 id="float"><a href="#float" class="headerlink" title="float"></a>float</h3><p><code>float</code> 属性定义元素在哪个方向浮动。</p><p>参数如下：</p><ul><li><code>left</code> 元素向左浮动。</li><li><code>right</code> 元素向右浮动。</li></ul><p>内联元素设置 float 属性，该内联元素会自动转换为内联块级元素，所以内联元素设置了浮动元素，就可以设置宽高。</p><h3 id="position"><a href="#position" class="headerlink" title="position"></a>position</h3><p><code>position</code> 属性规定元素的定位类型。</p><ul><li><code>static</code> 默认值。没有定位，元素出现在正常的流中。</li><li><code>relative</code> 生成相对定位的元素，相对于其正常位置进行定位。</li><li><code>absolute</code> 生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。</li><li><code>fixed</code> 生成绝对定位的元素，相对于浏览器窗口进行定位。</li><li>sticky 粘性定位。</li></ul><p>层级关系：定位元素 &gt; 浮动元素 &gt; 文档流中的元素</p><p>position 可以撑出盒子的高度和宽度。例如：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h4><ul><li>不设置平移量，元素不会发生任何变化。</li><li>相对于其正常位置进行定位，不会脱离文档流的标准，就算移动元素，也不会影响其他元素。</li><li>不会改变元素的性质，块级还是块级，内联还是内联。</li></ul><h4 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h4><ul><li>绝对定位的元素相对于距离他最近的开启了定位的父元素进行定位，如果所有元素都没有开启定位，则相对于浏览器进行定位。</li><li>绝对定位的元素会脱离文档流，会提升元素的一个高度。</li><li>绝对定位元素会改变元素的性质，内联变内联块级，块级的长宽会被内容撑开，并且不独占一行。</li></ul><p>float 和绝对定位区别？</p><ul><li>一个元素浮动时，其他内容（例如：文字）会“环绕”该元素。</li><li>绝对定位是使元素完全的脱离文档流，并没有影响到其它元素的内部布局。</li></ul><h4 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h4><ul><li>固定定位是一种特殊的绝对定位，和绝对定位不同的是，该元素不会随滚动条的滚动而发生位置的改变。</li><li>元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。</li></ul><h4 id="粘性定位"><a href="#粘性定位" class="headerlink" title="粘性定位"></a>粘性定位</h4><p>可以说是 static（没有定位） 和 固定定位 fixed 的结合，它主要用在对 scroll 事件的监听上。简单来说在滑动过程中，某个元素距离其父元素的距离达到 sticky 粘性定位的要求时（比如 top：100px)；position:sticky 这时的效果相当于 fixed 定位，固定到适当位置。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.sticky</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: sticky;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="z-index"><a href="#z-index" class="headerlink" title="z-index"></a>z-index</h3><p><code>z-index</code> 属性设置元素的堆叠顺序。拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面。</p><ul><li><code>auto</code> 默认。堆叠顺序与父元素相等。</li><li><code>number</code> 设置元素的堆叠顺序。</li></ul><p>注意：</p><ul><li>元素可拥有负的 z-index 属性值。</li><li>z-index 仅能在定位元素上奏效。</li><li>如果 z-index 值一样，或者都没有 z-index 则优先显示代码靠后的元素。</li></ul><h3 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h3><p><code>clear</code> 属性规定元素的哪一侧不允许其他浮动元素。</p><ul><li><code>left</code> 在左侧不允许浮动元素。</li><li><code>right</code> 在右侧不允许浮动元素。</li><li><code>both</code> 在左右两侧均不允许浮动元素。</li></ul><h2 id="内容溢出"><a href="#内容溢出" class="headerlink" title="内容溢出"></a>内容溢出</h2><p><code>overflow</code> 属性规定当内容溢出元素框时发生的事情。</p><ul><li>scroll 内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容（始终显示）。</li><li>auto 如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容（溢出时显示）。</li><li>hidden 内容会被修剪，并且其余内容是不可见的。通过这个属性可以隐藏 iframe 标签中的嵌套页面的滚动条。</li></ul><p><code>text-overflow</code> 属性规定当文本溢出包含元素时发生的事情。</p><ul><li>ellipsis 显示省略符号来代表被修剪的文本。注意：多行文字没有效果，单行文字才能显示省略号。</li><li>clip 修剪文本。</li></ul><p>注意：必须配合 <code>overflow:hidden;</code> 属性使用。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p><code>background</code> 简写属性在一个声明中设置所有的背景属性，可以设置如下所有属性。</p><p><code>background-color</code> 规定要使用的背景颜色。</p><p><code>background-image</code> 属性会在元素的背景中设置一个图像。</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>url(&#39;URL&#39;)</code></td><td>指向图像的路径。</td></tr></tbody></table><ul><li>元素的背景占据了元素的全部尺寸，包括内边距和边框，但不包括外边距。</li><li>默认地，背景图像位于元素的左上角，并在水平和垂直方向上重复。</li><li>url 参数写在外部 css 文件中，则相对路径相对与这个外部 css 文件，而不是相对与 html 文件。</li></ul><p><code>background-position</code> 规定背景图像的位置。</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>xpos ypos</code></td><td>第一个值是水平位置，第二个值是垂直位置。</td></tr><tr><td><code>x% y%</code></td><td>第一个值是水平位置，第二个值是垂直位置。</td></tr></tbody></table><ul><li>还可以通过 top、 bottom、 left 、 right、 center 参数进行设置。</li></ul><p><code>background-repeat</code> 规定如何重复背景图像。</p><ul><li><code>repeat</code> 默认。背景图像将在垂直方向和水平方向重复。</li><li><code>repeat-x</code> 背景图像将在水平方向重复。</li><li><code>repeat-y</code> 背景图像将在垂直方向重复。</li><li><code>no-repeat</code> 背景图像将仅显示一次。</li></ul><p><code>background-attachment</code> 规定背景图像是否（随着滚动条滚动）固定或者随着页面的其余部分滚动。</p><ul><li><code>scroll</code> 默认值。背景图像会随着页面其余部分的滚动而移动。</li><li><code>fixed</code> 当页面的其余部分滚动时，背景图像不会移动。</li></ul><p><code>background-size</code> 规定背景图片的尺寸。</p><ul><li><code>cover</code> 把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。背景图像的某些部分也许无法显示在背景定位区域中。</li><li><code>contain</code> 把图像图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域。</li><li><code>length</code> 第一个值设置宽度，第二个值设置高度。如果只设置一个值，则第二个值会被设置为 “auto”。</li><li><code>percentage</code> 以父元素的百分比来设置背景图像的宽度和高度。如果只设置一个值，则第二个值会被设置为 “auto”。</li></ul><p><code>background-origin</code> 属性规定 background-position 属性相对于什么位置来定位。</p><ul><li><code>padding-box</code> 背景图像相对于内边距框来定位。</li><li><code>border-box</code> 背景图像相对于边框盒来定位。</li><li><code>content-box</code> 背景图像相对于内容框来定位。</li></ul><p><code>background-clip</code> 属性规定背景的绘制区域（是否在指定区域重复 repeat 绘制图片）。</p><ul><li><code>content-box</code> 背景被裁剪到内容框。</li><li><code>padding-box</code> 背景被裁剪到内边距框。</li><li><code>border-box</code> 背景被裁剪到边框盒（默认）。</li></ul><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p><code>font-size</code> 属性可设置字体的尺寸。参数可以是 length 或 % 。</p><p><code>font-weight</code> 属性设置文本的粗细。</p><ul><li><code>normal</code> 默认值。定义标准的字符。</li><li><code>bold</code> 定义粗体字符。</li><li><code>bolder</code> 定义更粗的字符。</li><li><code>lighter</code> 定义更细的字符。</li></ul><p><code>font-style</code> 属性定义字体的风格。</p><ul><li><code>italic</code> 浏览器会显示一个斜体的字体样式。</li><li><code>oblique</code> 浏览器会显示一个倾斜的字体样式。</li></ul><p><code>font-family</code> 规定元素的字体系列（字体风格、字体样式）。</p><ul><li>可以把多个字体名称作为一个“回退”系统来保存，如果浏览器不支持第一个字体，则会尝试下一个。</li><li>字体名称有连字符“-”、 空格或中文需要加双引号。</li></ul><h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><p><code>text-align</code> 属性规定元素中的文本的水平对齐方式。</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>left</code></td><td>把文本排列到左边。默认值：由浏览器决定。</td></tr><tr><td><code>right</code></td><td>把文本排列到右边。</td></tr><tr><td><code>center</code></td><td>把文本排列到中间。</td></tr></tbody></table><ul><li>块级元素包含内联元素，块级标签中可以通过 text-align 属性控制内联元素的排列方式。</li></ul><p><code>text-align-last</code> 属性规定如何对齐文本的最后一行，一般用于下拉框选项对象。</p><p><code>text-decoration</code> 属性规定添加到文本的修饰。</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>none</code></td><td>默认值。定义标准的文本。通常用这个属性去除 <code>&lt;a&gt;</code> 标签的下划线。</td></tr><tr><td><code>line-through</code></td><td>定义穿过文本下的一条线。</td></tr><tr><td><code>underline</code></td><td>定义文本下的一条线。</td></tr></tbody></table><ul><li>注意：下划线颜色与文本颜色保持一致。</li></ul><p><code>text-indent</code> 属性规定文本块中首行文本的缩进。取值可以是 length 或 % 。</p><p><code>text-shadow</code> 属性向文本设置阴影。</p><ul><li><code>h-shadow</code> 必需。水平阴影的位置。</li><li><code>v-shadow</code> 必需。垂直阴影的位置。</li><li><code>blur</code> 可选。模糊的距离。</li><li><code>color</code> 可选。阴影的颜色。</li></ul><p><code>user-select</code> 属性控制着用户能否选中文本。</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>none</td><td>文本不能被选择。</td></tr></tbody></table><h2 id="box-前缀"><a href="#box-前缀" class="headerlink" title="box 前缀"></a>box 前缀</h2><p><code>box-sizing</code> 属性允许您以特定的方式定义匹配某个区域的特定元素。</p><ul><li><p><code>content-box</code> 宽度和高度分别应用到元素的内容框。在宽度和高度之外绘制元素的内边距和边框。</p></li><li><p><code>border-box</code> 为元素设定的宽度和高度决定了元素的边框盒。</p><ul><li>为元素指定的任何内边距和边框都将在已设定的宽度和高度内进行绘制。</li><li>通过从已设定的宽度和高度分别减去边框和内边距才能得到内容的宽度和高度。</li><li>注意：没有指定长宽，box-sizing 属性无效。</li></ul></li></ul><p><code>box-shadow</code> 属性向框添加一个或多个阴影。</p><ul><li>语法： <code>box-shadow: h-shadow v-shadow blur spread color inset;</code></li><li><code>h-shadow</code> 必需。水平阴影的位置。允许负值。</li><li><code>v-shadow</code> 必需。垂直阴影的位置。允许负值。</li><li><code>blur</code> 可选。模糊距离。</li><li><code>spread</code> 可选。阴影的尺寸。</li><li><code>color</code> 可选。阴影的颜色。</li><li><code>inset</code> 可选。将外部阴影 (outset) 改为内部阴影。</li></ul><h2 id="圆角"><a href="#圆角" class="headerlink" title="圆角"></a>圆角</h2><ul><li><code>border-top-right-radius</code> 右上角半径。</li><li><code>border-buttom-right-radius</code> 右下角半径。</li><li><code>border-buttom-left-radius</code> 左下角半径。</li><li><code>border-top-right-radius</code> 左上角半径。</li><li><code>border-radius</code> 属性是一个简写属性，用于设置四个 border-*-radius 属性。取值可以是 length 或 % 。</li></ul><h2 id="用户自定义元素大小"><a href="#用户自定义元素大小" class="headerlink" title="用户自定义元素大小"></a>用户自定义元素大小</h2><p><code>resize</code> 属性指定一个元素是否是由用户调整大小的。</p><ul><li><code>none</code> 用户无法调整元素的尺寸。</li><li><code>both</code> 用户可调整元素的高度和宽度。</li></ul><h2 id="鼠标"><a href="#鼠标" class="headerlink" title="鼠标"></a>鼠标</h2><p><code>cursor</code> 属性规定要显示的光标的类型（形状）。</p><ul><li>pointer 光标呈现为指示链接的指针（一只手）。</li><li>wait 此光标指示程序正忙（通常是一只表或沙漏）。</li></ul><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p><code>list-style</code> 简写属性在一个声明中设置所有的列表属性。可以按顺序设置如下属性：</p><ul><li><code>list-style-type</code> 设置列表项标记的类型。参数 <code>none</code> 无标记。</li><li><code>list-style-position</code> 设置在何处放置列表项标记。</li><li><code>list-style-image</code> 使用图像来替换列表项的标记。</li></ul><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p><code>border-collapse</code> 设置表格的边框是否被合并为一个单一的边框，还是象在标准的 HTML 中那样分开显示。</p><ul><li><code>separate</code> 默认值。边框会被分开。不会忽略 border-spacing 和 empty-cells 属性。</li><li><code>collapse</code> 如果可能，边框会合并为一个单一的边框。会忽略 border-spacing 和 empty-cells 属性。</li></ul><p><code>border-spacing</code> 属性设置相邻单元格的边框间的距离（仅用于“边框分离”模式）。</p><ul><li><code>border-spacing: length length;</code> length 不允许使用负值。</li><li>定义一个 length 参数，那么定义的是水平和垂直间距。</li><li>定义两个 length 参数，那么第一个设置水平间距，而第二个设置垂直间距。</li></ul><p><code>empty-cells</code> 属性设置是否显示表格中的空单元格（仅用于“分离边框”模式）。</p><ul><li><code>hide</code> 不在空单元格周围绘制边框。</li><li><code>show</code> 在空单元格周围绘制边框。默认。</li></ul><p><code>table-layout</code> 属性用来显示表格单元格、行、列的算法规则。</p><ul><li><code>automatic</code> 默认。列宽度由单元格内容设定。自动表格布局中，列的宽度是由列单元格中没有折行的最宽的内容设定的。</li><li><code>fixed</code> 列宽由表格宽度和列宽度设定。固定表格布局中，水平布局仅取决于表格宽度、列宽度、表格边框宽度、单元格间距，而与单元格的内容无关。</li></ul><h2 id="outline"><a href="#outline" class="headerlink" title="outline"></a>outline</h2><p>在浏览器里，当鼠标点击或使用 Tab 键让一个链接或者一个 radio 获得焦点的时候，该元素将会被一个轮廓虚线框围绕。这个轮廓虚线框就是 outline 。</p><p><code>outline</code> （轮廓）是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。可以按顺序设置如下属性：</p><ul><li><code>outline-color</code> 规定边框的颜色。</li><li><code>outline-style</code> 规定边框的样式。</li><li><code>outline-width</code> 规定边框的宽度。</li></ul><h2 id="appearance"><a href="#appearance" class="headerlink" title="appearance"></a>appearance</h2><p><code>appearance</code> 属性可以将元素渲染成 button 的风格，也可以渲染成“输入框”、“选择框”等效果。</p><ul><li><code>button</code> 作为一个按钮，呈现元素。</li><li><code>none</code> 不适用任何风格。</li></ul><p><code>-webkit-appearance</code> 是 appearance 的兼容性写法。</p><h2 id="实验性效果"><a href="#实验性效果" class="headerlink" title="实验性效果"></a>实验性效果</h2><p><code>filter</code> 属性定义了元素（通常是 <code>&lt;img&gt;</code> ) 的可视效果（例如：模糊与饱和度）。</p><ul><li><code>blur(px)</code> 给图像设置高斯模糊。</li><li>背景图片设置模糊，图片上面添加一层蒙版（背景颜色为黑色，设置透明度），会有不错的视觉效果。</li></ul><p><code>mask</code> （遮罩）属性是一个简写属性。该属性还没有标准化，可能需要添加浏览器前缀才能产生效果。</p><table><thead><tr><th>属性</th><th>参数</th></tr></thead><tbody><tr><td>mask-image</td><td>url / gradient 可以使用图片或渐变作为遮罩层。</td></tr><tr><td>mask-repeat</td><td>repeat / repeat-x / repeat-y / no-repeat</td></tr><tr><td>mask-position</td><td>x y</td></tr><tr><td>mask-size</td><td>auto / width height</td></tr></tbody></table><p>box-reflect 设置倒影。</p><ul><li><p>语法： <code>box-reflect: none | &lt;direction&gt; &lt;offset&gt;? &lt;mask-box-image&gt;?</code></p></li><li><p>direction 设置倒影的方向。</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>above</td><td>在原图的上方。</td></tr><tr><td>below</td><td>在原图的下方。</td></tr><tr><td>left</td><td>在原图的左侧。</td></tr><tr><td>right</td><td>在原图的右侧。</td></tr></tbody></table></li><li><p>offset 生成倒影与原图之间的间距。可选参数：px 或 %</p></li><li><p>mask-box-image 设置倒影的遮罩效果（也可以是线性渐变）。</p></li></ul><p>示例：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">-webkit-box-reflect</span>: below <span class="number">20px</span> <span class="built_in">url</span>(./love.png);</span><br><span class="line">    <span class="comment">/* 或 */</span></span><br><span class="line">    <span class="attribute">-webkit-box-reflect</span>: below <span class="number">20px</span> <span class="built_in">linear-gradient</span>(rgba(255, 255, 255, 0), <span class="built_in">rgba</span>(255, 255, 255, 1));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：倒影渐变只支持透明度渐变，不支持颜色渐变。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>CSS</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>页面布局</title>
    <url>/posts/227c5097/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><p>本文主要介绍三种基本页面布局。</p><a id="more"></a><hr><h2 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h2><p>HTML 结构</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"center_inbox"</span>&gt;</span>中间自适应<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"left"</span>&gt;</span>左列定宽<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"right"</span>&gt;</span>右列定宽<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS 样式</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-id">#left</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f00</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#center</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#eeff2b</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#center_inbox</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">480px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">220px</span> <span class="number">0</span> <span class="number">120px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#right</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#0f0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h2><p>HTML 结构</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"center"</span>&gt;</span>中间自适应<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"left"</span>&gt;</span>左列定宽<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"right"</span>&gt;</span>右列定宽<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS 样式</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#parent</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">215px</span> <span class="number">0</span> <span class="number">115px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#left</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative; <span class="comment">/*因为使用 padding，所以要使用 relative 移动元素。*/</span></span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">115px</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f00</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#center</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box; <span class="comment">/*消除边框的 1 像素点，使右 div 可以移上来。*/</span></span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#eeff2b</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#right</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">215px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#0f0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="九宫格布局"><a href="#九宫格布局" class="headerlink" title="九宫格布局"></a>九宫格布局</h2><p>HTML 结构</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS 样式</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#parent</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.row</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>CSS</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>如何修改input元素的placeholder属性？</title>
    <url>/posts/d5127cfe/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><p>本文讲述如何修改input元素的placeholder属性。</p><a id="more"></a><hr><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>通过伪类修改 input 标签的 placeholder 属性。</p><ul><li><code>::-webkit-input-placeholder</code> 使用 webkit 内核的浏览器。</li><li><code>:-moz-placeholder</code> Firefox 版本 4-18。</li><li><code>::-moz-placeholder</code> Firefox 版本 19+。</li><li><code>:-ms-input-placeholder</code> IE 浏览器。</li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 选择器</title>
    <url>/posts/d318b1f4/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><p>CSS 选择器用于选择你想要的元素的样式的模式。</p><a id="more"></a><hr><h2 id="一般选择器"><a href="#一般选择器" class="headerlink" title="一般选择器"></a>一般选择器</h2><h3 id="通用选择器"><a href="#通用选择器" class="headerlink" title="通用选择器"></a>通用选择器</h3><p>选择所有元素。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="comment">/* CSS 样式 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h3><p>选择所有 a 标签。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="comment">/* CSS 样式 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><p>选择 class 属性为 class 的元素。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.class</span> &#123;</span><br><span class="line">    <span class="comment">/* CSS 样式 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="id-选择器"><a href="#id-选择器" class="headerlink" title="id 选择器"></a>id 选择器</h3><p>选择 id 属性为 id 的元素。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#id</span> &#123;</span><br><span class="line">    <span class="comment">/* CSS 样式 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h3><p>复合选择器相当于编程语言的且。</p><p>示例：选择同时拥有 class1 和 class2 的元素。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.class1</span><span class="selector-class">.class2</span> &#123;</span><br><span class="line">    <span class="comment">/* CSS 样式 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：选择 a 标签为 class 的元素。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-class">.class</span> &#123;</span><br><span class="line">    <span class="comment">/* CSS 样式 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：选择 a 标签 id 属性为 id 的元素。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-id">#id</span> &#123;</span><br><span class="line">    <span class="comment">/* CSS 样式 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分组选择器"><a href="#分组选择器" class="headerlink" title="分组选择器"></a>分组选择器</h3><p>群组选择器相当于编程中的或。</p><p>选择 a 标签或类名为 class 或 id 属性为 id 的元素。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span>, <span class="selector-class">.class</span>, <span class="selector-id">#id</span> &#123;</span><br><span class="line">    <span class="comment">/* CSS 样式 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="否定伪类"><a href="#否定伪类" class="headerlink" title="否定伪类"></a>否定伪类</h3><p>否定伪类把筛选出来的结果排除掉指定元素。</p><p>示例：选择除了 class 为 “different” 外的所有 li 元素。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:not(.different)</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">3em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：选择 table 表格中 tbody 部分非首个、非最后一个的 tr。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">table</span> <span class="selector-tag">tbody</span> <span class="selector-tag">tr</span><span class="selector-pseudo">:not(</span><span class="selector-pseudo">:first-child)</span><span class="selector-pseudo">:not(</span><span class="selector-pseudo">:last-child)</span> <span class="selector-tag">td</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：否定伪类不会增加选择器的优先级。</p><h3 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h3><p>后代选择器选择祖先标签的所有后代标签。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h2</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="comment">/* CSS 样式 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="直接后代选择器"><a href="#直接后代选择器" class="headerlink" title="直接后代选择器"></a>直接后代选择器</h3><p>直接后代选择器是选择祖先标签的直接后代标签。不会选择间接后代标签。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h2</span> &gt; <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="comment">/* CSS 样式 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="兄弟选择器"><a href="#兄弟选择器" class="headerlink" title="兄弟选择器"></a>兄弟选择器</h3><p>查找后边一个兄弟元素。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> + <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>:<span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查找后边所有兄弟元素。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> ~ <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>:<span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><p>对有 href 属性的锚（a 元素）应用样式。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href]</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将同时有 href 和 title 属性的 HTML 超链接的文本设置为红色。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href]</span><span class="selector-attr">[title]</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将指向 Web 服务器上某个指定文档的超链接变成红色。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href="https://www.baidu.com/"]</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选择 class 属性中包含 important 的元素。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-attr">[class~="important"]</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="子串匹配属性选择器"><a href="#子串匹配属性选择器" class="headerlink" title="子串匹配属性选择器"></a>子串匹配属性选择器</h4><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>[abc^=”def”]</td><td>选择 abc 属性值以 “def” 开头的所有元素</td></tr><tr><td>[abc$=”def”]</td><td>选择 abc 属性值以 “def” 结尾的所有元素</td></tr><tr><td>[abc*=”def”]</td><td>选择 abc 属性值中包含子串 “def” 的所有元素</td></tr></tbody></table><h4 id="特定属性选择类型"><a href="#特定属性选择类型" class="headerlink" title="特定属性选择类型"></a>特定属性选择类型</h4><p><code>[attribute|=value]</code> 用于选取带有以指定值开头的属性值的元素，该值必须是整个单词。</p><p>选择 lang 属性等于 en 或以 en- 开头的所有元素。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*<span class="selector-attr">[lang|="en"]</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设一个 HTML 文档中有一系列图片，其中每个图片的文件名都形如 figure-1.jpg 和 figure-2.jpg。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span><span class="selector-attr">[src|="figure"]</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid gray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="序号选择器"><a href="#序号选择器" class="headerlink" title="序号选择器"></a>序号选择器</h2><h3 id="不区分类型"><a href="#不区分类型" class="headerlink" title="不区分类型"></a>不区分类型</h3><table><thead><tr><th>选择器</th><th>解释</th></tr></thead><tbody><tr><td><code>:first-child</code></td><td>选择第一个子元素</td></tr><tr><td><code>:last-child</code></td><td>选择最后一个子元素</td></tr><tr><td><code>:nth-child(n)</code></td><td>选择器匹配属于其父元素的第 N 个子元素，不论元素的类型。</td></tr><tr><td><code>:nth-last-child(n)</code></td><td>选择器匹配属于其父元素的倒数第 N 个子元素，不论元素的类型。</td></tr></tbody></table><h3 id="区分类型"><a href="#区分类型" class="headerlink" title="区分类型"></a>区分类型</h3><table><thead><tr><th>选择器</th><th>解释</th></tr></thead><tbody><tr><td><code>:first-of-type</code></td><td></td></tr><tr><td><code>:last-of-type</code></td><td></td></tr><tr><td><code>:nth-of-type(n)</code></td><td>选择器匹配属于父元素的特定类型的第 N 个子元素的每个元素。</td></tr><tr><td><code>:nth-last-of-type(n)</code></td><td></td></tr></tbody></table><p><code>:nth-child</code> 和 <code>:nth-of-type</code> 的区别？</p><ul><li><code>ele:nth-of-type(n)</code> 是指父元素下第 n 个 ele 元素。</li><li><code>ele:nth-child(n)</code> 是指父元素下第 n 个元素且这个元素为 ele，若不是则选择失败。</li></ul><h3 id="奇偶选择"><a href="#奇偶选择" class="headerlink" title="奇偶选择"></a>奇偶选择</h3><table><thead><tr><th>选择器</th><th>解释</th></tr></thead><tbody><tr><td><code>:nth-child(odd)</code></td><td>选择级别中所有奇数。</td></tr><tr><td><code>:nth-child(even)</code></td><td>选择级别中所有偶数。</td></tr><tr><td><code>:nth-child(nx + y)</code></td><td>x, y 用户自定义，n 为计数器，从 0 开始递增选择。</td></tr></tbody></table><p><code>:nth-child</code> 中 n 取负值，会有“向前”的效果，比如 <code>:nth-child(-n+3)</code> 选择前三个元素。</p><p><code>:nth-child(-n+3)</code> 可以写成 <code>:nth-child(3-n)</code> 形式。</p><h3 id="only-child-选择器"><a href="#only-child-选择器" class="headerlink" title=":only-child 选择器"></a>:only-child 选择器</h3><p><code>:only-child</code> 匹配属于其父元素的唯一子元素的元素。</p><p>示例：选择父元素里只含有 p 元素的 p 元素。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:only-child</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#ff0000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HTML 代码</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="empty-选择器"><a href="#empty-选择器" class="headerlink" title=":empty 选择器"></a>:empty 选择器</h3><p><code>:empty</code> 选择每个没有任何子级的元素或文本的元素（元素里不包含任何东西）。</p><h2 id="伪类和伪元素"><a href="#伪类和伪元素" class="headerlink" title="伪类和伪元素"></a>伪类和伪元素</h2><p>语法上，伪类是以但冒号 “:” 开头。伪元素是以 双冒号 “::” 开头。</p><h3 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h3><ul><li><code>:hover</code> 选择被鼠标悬浮着的元素。</li><li><code>:focus</code> 选择拥有键盘输入焦点的元素。</li><li><code>:first-child</code> 选择满足是其父元素的第一个子元素的元素。</li><li><code>:active</code> 向激活（在鼠标点击与释放之间发生的事件）的元素添加特殊的样式。</li><li><code>:checked</code> 选择器匹配每个选中的输入元素（仅适用于单选按钮或复选框）。</li><li>:root 匹配文档的根元素。在 HTML 中根元素始终是 HTML 元素。</li><li>:target 选取当前活动的目标元素。锚链接指向文档内某个具体的元素，该被链接的元素就是目标元素。</li><li>:disabled 匹配每个被禁用（disabled）的元素（大多用在表单元素上）。</li><li>:enabled 匹配每个已启用的元素（大多用在表单元素上）。</li></ul><h3 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h3><table><thead><tr><th>伪元素</th><th>解释</th></tr></thead><tbody><tr><td><code>::first-letter</code></td><td>选择指定元素的第一个单词。</td></tr><tr><td><code>::first-line</code></td><td>选择指定元素的第一行。</td></tr><tr><td><code>::after</code></td><td>选择指定元素的内容后面插入内容。</td></tr><tr><td><code>::before</code></td><td>选择指定元素的内容前面插入内容。</td></tr></tbody></table><h2 id="选择器优先级别"><a href="#选择器优先级别" class="headerlink" title="选择器优先级别"></a>选择器优先级别</h2><p>CSS 优先级由 0, 0, 0, 0 这样的特殊值来表示，计算规则是左大右小的，例如：1, 0, 0, 0 &gt; 0, 99, 99, 99</p><table><thead><tr><th>选择器</th><th>选择器的权值</th><th>解释</th></tr></thead><tbody><tr><td>通用选择器</td><td>0</td><td></td></tr><tr><td>继承</td><td>0</td><td></td></tr><tr><td>标签选择器</td><td>1</td><td></td></tr><tr><td>类选择器</td><td>10</td><td></td></tr><tr><td>属性选择器</td><td>10</td><td></td></tr><tr><td>伪类 或 伪元素</td><td>10</td><td></td></tr><tr><td>id 选择器</td><td>100</td><td></td></tr><tr><td>复合选择器</td><td>选择器权值相加</td><td></td></tr><tr><td>内联</td><td>1000</td><td></td></tr><tr><td>!important</td><td>无穷大</td><td>!important 提升指定样式规则的应用优先权。</td></tr></tbody></table><p>特点：</p><ul><li>选择器的针对性越强，优先级别越高。</li><li>CSS 优先级先比较权值再比较先后顺序。权值大的 CSS 样式会覆盖权值小的 CSS 样式，权值相同则按执行顺序决定。</li><li>直接后代选择器（子代选择器）和后代选择器权值计算方式一样。</li></ul><p>示例：两个 CSS 样式权值相同，所以后定义的样式会覆盖先定义的样式。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &gt; <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>CSS</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 入门笔记</title>
    <url>/posts/6dba1056/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><p>本篇主要介绍 CSS 基本知识。</p><a id="more"></a><hr><h2 id="CSS-书写方式"><a href="#CSS-书写方式" class="headerlink" title="CSS 书写方式"></a>CSS 书写方式</h2><ul><li>内联样式，在 HTML 元素中使用 style 属性。</li><li>页内样式，在 HTML 文档头部 <code>&lt;head&gt;</code> 区域使用 <code>&lt;style&gt;</code> 标签 来包含 CSS 样式。</li><li>外部样式，在外部 CSS 文件中书写 CSS 样式，然后通过 <code>&lt;link&gt;</code> 标签引用。</li></ul><h2 id="CSS-语法规则"><a href="#CSS-语法规则" class="headerlink" title="CSS 语法规则"></a>CSS 语法规则</h2><ul><li>CSS 样式的书写是通过键值对的方式书写。通过分号 “ ; ” 来分割不同的 CSS 属性。</li><li>CSS 样式可以理解为编程中的函数。所以末尾不用加分号。</li><li>内联样式的优先级别最高。样式的优先级别默认是跟浏览器的执行顺序有关。CSS 代码越靠前，其优先级<strong>越低</strong>。</li></ul><h2 id="CSS-单位"><a href="#CSS-单位" class="headerlink" title="CSS 单位"></a>CSS 单位</h2><h3 id="em"><a href="#em" class="headerlink" title="em"></a>em</h3><p>em 相对长度单位。相对于当前对象内文本的字体尺寸。</p><h3 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h3><p>rem 是指相对于根元素的字体大小单位，一旦根元素（html 标签）的 font-size 变化，那么整个网页中运用到 rem 单位的元素也会随之改变。浏览器默认字体大小是 16px，那么 1rem 等于 16px。</p><h3 id="vw、vh、vmin、vmax"><a href="#vw、vh、vmin、vmax" class="headerlink" title="vw、vh、vmin、vmax"></a>vw、vh、vmin、vmax</h3><p>vw、vh、vmin、vmax 是一种视窗单位，也是相对单位。它相对的不是父节点或者页面的根节点。而是由视窗（Viewport）大小来决定的，单位 1，代表类似于 1%。</p><ul><li>vw：视窗宽度的百分比（1vw 代表视窗的宽度为 1%）。</li><li>vh：视窗高度的百分比。</li><li>vmin：当前 vw 和 vh 中较小的一个值。</li><li>vmax：当前 vw 和 vh 中较大的一个值。</li></ul><p>如果浏览器设置为1100px宽、700px高，1vmin会是7px,1vmax为11px。然而，如果宽度设置为800px，高度设置为1080px，1vmin将会等于8px而1vmax将会是10.8px。著作权归作者所有。</p><h2 id="元素分类"><a href="#元素分类" class="headerlink" title="元素分类"></a>元素分类</h2><p>在 CSS 中，HTML 中的标签元素大体被分为三种不同的类型：块级元素、行内元素、行内块级元素。</p><h3 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h3><p>常见块级元素：ul、li、form、div、p、h1-h6、hr</p><p>特点：</p><ul><li>自己单独占一行。</li><li>能随时设置宽度和高度。</li><li>块级标签之间换行符不会保持一定间距。</li><li>块级元素不设置长宽，则它的长宽默认由子元素撑开。</li></ul><h3 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h3><p>常见内联元素：a、br、img、label、span</p><p>特点：</p><ul><li>不会自己独占一行。不可以设置宽高。</li><li>内联标签之间换行符会保持一定间距。</li></ul><h3 id="行内块级元素"><a href="#行内块级元素" class="headerlink" title="行内块级元素"></a>行内块级元素</h3><p>常见行内块级元素：input、select、textarea、button</p><p>特点：</p><ul><li>可以独占一行。</li><li>可以设置宽高。</li></ul><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ul><li>可继承属性，控制文本属性。例如：文字颜色、 文字居中、 文字行高… 。</li><li>不可继承性，区块控制属性。例如：高度、 宽度、 背景颜色… 。</li></ul><h2 id="CSS-注释"><a href="#CSS-注释" class="headerlink" title="CSS 注释"></a>CSS 注释</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 内容 */</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>CSS</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>DNS 预解析</title>
    <url>/posts/36124585/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><p>本文介绍 DNS 预解析是什么？</p><a id="more"></a><hr><h2 id="DNS-预解析"><a href="#DNS-预解析" class="headerlink" title="DNS 预解析"></a>DNS 预解析</h2><p>当你浏览网页时，浏览器会在加载网页时对网页中的域名进行解析缓存，这样在你单击当前网页中的连接时就无需进行 DNS 的解析（直接访问 IP 地址），减少用户等待时间。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 提前解析百度的 IP 地址并缓存 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"www.baidu.com"</span> /&gt;</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>锚链接</title>
    <url>/posts/647dd0f4/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><p>本文主要介绍锚链接是什么。</p><a id="more"></a><hr><h2 id="锚链接"><a href="#锚链接" class="headerlink" title="锚链接"></a>锚链接</h2><p>通过 a 标签 href 属性创建锚链接。</p><p>锚链接以特殊字符 “#” 为创建锚链接，# 号后面跟标签 id 属性，点击 URL 就会跳转到指定标签（一般是标题）。</p><p>锚链接不会发生请求，只做 js 跳转。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>a 标签 href 属性禁止跳转</title>
    <url>/posts/44715c99/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><p>实现 a 标签不发生任何跳转。</p><a id="more"></a><hr><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>如果不想刷新当前页面，可以在 href 属性后面添加 <code>javascript:;</code> 。</p><p>该语句表示在触发默认动作时，执行一段 JavaScript 代码，而 <code>javascript:;</code> 表示什么都不执行，这样点击时就没有任何反应。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>IE 条件注释的使用</title>
    <url>/posts/2f70e7fe/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><p>通过 IE 条件注释我们可以很好解决 IE 浏览器的兼容性问题，作为前端有必要了解一下</p><a id="more"></a><hr><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>IE5 ~ IE9 浏览器支持 if 条件注释，从 IE10 开始，IE 浏览器已经不再支持条件注释。而其他浏览器直接识别成普通注释。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>判断是否为 IE 浏览器。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if IE]&gt; html 代码 &lt;![endif]--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if !IE]&gt; html 代码 &lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><p>判断 IE 版本。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if IE 6]&gt; html 代码 &lt;![endif]--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if IE 8]&gt; html 代码 &lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><p>判断是 IE 版本范围（即：&lt;, &lt;=, &gt;, &gt;=）。IE8 以下版本的浏览器才会执行内部的 html 代码，如需要包含 IE8 则使用 lte。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if lt IE 8]&gt; html 代码 &lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><p>IE7 以上版本的浏览器才会执行内部的 html 代码，如需要包含 IE7 则使用 gte。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if gt IE 7]&gt; html 代码 &lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML 中，table 的 cellpadding 和 cellspacing 属性失效解决方案</title>
    <url>/posts/31a9d5a2/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><p>本文主要解决 table 标签中 cellpadding 和 cellspacing 属性失效的问题。</p><a id="more"></a><hr><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>如果 cellpadding 和 cellspacing 属性无效，可以通过 css 样式 border-collapse 属性控制。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">  <span class="attribute">border-collapse</span>: collapse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>CSS</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>select和option标签如何文本居中？</title>
    <url>/posts/660b5771/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><p>本文实现 select 和 option 标签内容做居中处理。</p><a id="more"></a><hr><h2 id="select-文字居中"><a href="#select-文字居中" class="headerlink" title="select 文字居中"></a>select 文字居中</h2><p>CSS 样式：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">text-align</span>: <span class="selector-tag">center</span>;</span><br><span class="line"><span class="selector-tag">text-align-last</span>: <span class="selector-tag">center</span>;</span><br></pre></td></tr></table></figure><h2 id="option-文字居中"><a href="#option-文字居中" class="headerlink" title="option 文字居中"></a>option 文字居中</h2><p>向标签内不断填充空格（ <code>&amp;nbsp;</code> 转义字符），实现文本居中。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>CSS</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>网站推荐</title>
    <url>/posts/42075/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><h1 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h1><table><thead><tr><th align="left">网站</th><th align="left">网址</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">百度</td><td align="left"><a href="https://www.baidu.com/" target="_blank" rel="noopener">https://www.baidu.com/</a></td><td align="left"></td></tr><tr><td align="left">搜狗搜索</td><td align="left"><a href="https://www.sogou.com/" target="_blank" rel="noopener">https://www.sogou.com/</a></td><td align="left">可以搜索微信和知乎内容。</td></tr><tr><td align="left">微软必应</td><td align="left"><a href="https://cn.bing.com/" target="_blank" rel="noopener">https://cn.bing.com/</a></td><td align="left"></td></tr><tr><td align="left">秘迹搜索</td><td align="left"><a href="https://mijisou.com/" target="_blank" rel="noopener">https://mijisou.com/</a></td><td align="left"></td></tr><tr><td align="left">多吉搜索</td><td align="left"><a href="https://dogedoge.com/" target="_blank" rel="noopener">https://dogedoge.com/</a></td><td align="left"></td></tr><tr><td align="left">谷歌</td><td align="left"><a href="https://www.google.com.hk/" target="_blank" rel="noopener">https://www.google.com.hk/</a></td><td align="left">需要翻墙。</td></tr></tbody></table><a id="more"></a><h1 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h1><table><thead><tr><th align="left">网站</th><th align="left">网址</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">bilibili</td><td align="left"><a href="https://www.bilibili.com/" target="_blank" rel="noopener">https://www.bilibili.com/</a></td><td align="left">哔哩哔哩有很多学习资源。</td></tr><tr><td align="left">YouTube</td><td align="left"><a href="https://www.youtube.com/" target="_blank" rel="noopener">https://www.youtube.com/</a></td><td align="left">需要翻墙。</td></tr><tr><td align="left">樱花动漫</td><td align="left"><a href="http://www.yhdm.tv/" target="_blank" rel="noopener">http://www.yhdm.tv/</a></td><td align="left"></td></tr><tr><td align="left">蜗牛视频</td><td align="left"><a href="https://www.snailok.com/" target="_blank" rel="noopener">https://www.snailok.com/</a></td><td align="left"></td></tr><tr><td align="left">电影天堂</td><td align="left"><a href="https://www.dygod.net/" target="_blank" rel="noopener">https://www.dygod.net/</a></td><td align="left"></td></tr></tbody></table><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><table><thead><tr><th align="left">网站</th><th align="left">网址</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">pixiv</td><td align="left"><a href="https://www.pixiv.net/" target="_blank" rel="noopener">https://www.pixiv.net/</a></td><td align="left">需要翻墙。</td></tr><tr><td align="left">花瓣网</td><td align="left"><a href="https://huaban.com/" target="_blank" rel="noopener">https://huaban.com/</a></td><td align="left"></td></tr><tr><td align="left">Pixabay</td><td align="left"><a href="https://pixabay.com/zh/photos/" target="_blank" rel="noopener">https://pixabay.com/zh/photos/</a></td><td align="left"></td></tr><tr><td align="left">Pexels</td><td align="left"><a href="https://www.pexels.com/zh-tw/" target="_blank" rel="noopener">https://www.pexels.com/zh-tw/</a></td><td align="left"></td></tr><tr><td align="left">The Stocks</td><td align="left"><a href="http://thestocks.im/" target="_blank" rel="noopener">http://thestocks.im/</a></td><td align="left"></td></tr><tr><td align="left">Unsplash</td><td align="left"><a href="https://unsplash.com/" target="_blank" rel="noopener">https://unsplash.com/</a></td><td align="left"></td></tr><tr><td align="left">Magdeleine</td><td align="left"><a href="https://magdeleine.co/" target="_blank" rel="noopener">https://magdeleine.co/</a></td><td align="left"></td></tr><tr><td align="left">FreeJPG</td><td align="left"><a href="https://en.freejpg.com.ar/" target="_blank" rel="noopener">https://en.freejpg.com.ar/</a></td><td align="left"></td></tr><tr><td align="left">Foodiesfeed</td><td align="left"><a href="https://www.foodiesfeed.com/" target="_blank" rel="noopener">https://www.foodiesfeed.com/</a></td><td align="left"></td></tr></tbody></table><h1 id="资讯"><a href="#资讯" class="headerlink" title="资讯"></a>资讯</h1><table><thead><tr><th align="left">网站</th><th align="left">网址</th><th align="left">补充</th></tr></thead><tbody><tr><td align="left">中关村在线</td><td align="left"><a href="http://www.zol.com.cn/" target="_blank" rel="noopener">http://www.zol.com.cn/</a></td><td align="left"></td></tr><tr><td align="left">游侠网</td><td align="left"><a href="https://www.ali213.net/" target="_blank" rel="noopener">https://www.ali213.net/</a></td><td align="left"></td></tr><tr><td align="left">3dm</td><td align="left"><a href="https://www.3dmgame.com/" target="_blank" rel="noopener">https://www.3dmgame.com/</a></td><td align="left"></td></tr><tr><td align="left">少数派</td><td align="left"><a href="https://sspai.com/" target="_blank" rel="noopener">https://sspai.com/</a></td><td align="left"></td></tr><tr><td align="left">异次元软件世界</td><td align="left"><a href="https://www.iplaysoft.com/" target="_blank" rel="noopener">https://www.iplaysoft.com/</a></td><td align="left">推广各种优秀实用软件、网络资源的网站。</td></tr><tr><td align="left">不死鸟</td><td align="left"><a href="https://hao.su/" target="_blank" rel="noopener">https://hao.su/</a></td><td align="left">推荐各种黑科技网站和软件。</td></tr><tr><td align="left">神马天堂网</td><td align="left"><a href="https://www.smttw.com/" target="_blank" rel="noopener">https://www.smttw.com/</a></td><td align="left"></td></tr></tbody></table><h1 id="网站导航"><a href="#网站导航" class="headerlink" title="网站导航"></a>网站导航</h1><table><thead><tr><th align="left">网站</th><th align="left">网址</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">爱达杂货铺</td><td align="left"><a href="https://adzhp.cn/" target="_blank" rel="noopener">https://adzhp.cn/</a></td><td align="left"></td></tr><tr><td align="left">China.TG</td><td align="left"><a href="https://china.tg/" target="_blank" rel="noopener">https://china.tg/</a></td><td align="left"></td></tr><tr><td align="left">优设导航</td><td align="left"><a href="https://hao.uisdc.com/" target="_blank" rel="noopener">https://hao.uisdc.com/</a></td><td align="left">推荐设计相关的网站。</td></tr><tr><td align="left">爱站网</td><td align="left"><a href="https://top.aizhan.com/" target="_blank" rel="noopener">https://top.aizhan.com/</a></td><td align="left">用于查看网站排行。</td></tr></tbody></table><h1 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h1><table><thead><tr><th align="left">网站</th><th align="left">网址</th></tr></thead><tbody><tr><td align="left">腾讯软件中心</td><td align="left"><a href="https://pc.qq.com/" target="_blank" rel="noopener">https://pc.qq.com/</a></td></tr><tr><td align="left">MSDN, 我告诉你</td><td align="left"><a href="https://msdn.itellyou.cn/" target="_blank" rel="noopener">https://msdn.itellyou.cn/</a></td></tr></tbody></table><h1 id="文档资源"><a href="#文档资源" class="headerlink" title="文档资源"></a>文档资源</h1><table><thead><tr><th align="left">网站</th><th align="left">网址</th></tr></thead><tbody><tr><td align="left">OfficePLUS</td><td align="left"><a href="http://www.officeplus.cn/Template/Home.shtml" target="_blank" rel="noopener">http://www.officeplus.cn/Template/Home.shtml</a></td></tr><tr><td align="left">Docer稻壳儿</td><td align="left"><a href="http://www.docer.com/" target="_blank" rel="noopener">http://www.docer.com/</a></td></tr><tr><td align="left">优品PPT</td><td align="left"><a href="http://www.ypppt.com/" target="_blank" rel="noopener">http://www.ypppt.com/</a></td></tr></tbody></table><h1 id="免费网盘"><a href="#免费网盘" class="headerlink" title="免费网盘"></a>免费网盘</h1><table><thead><tr><th align="left">网站</th><th align="left">网址</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">坚果云</td><td align="left"><a href="https://www.jianguoyun.com/" target="_blank" rel="noopener">https://www.jianguoyun.com/</a></td><td align="left">支持 WebDAV 协议。</td></tr><tr><td align="left">蓝奏·云存储</td><td align="left"><a href="http://www.lanzou.com/" target="_blank" rel="noopener">http://www.lanzou.com/</a></td><td align="left"></td></tr><tr><td align="left">firefox send</td><td align="left"><a href="https://send.firefox.com/" target="_blank" rel="noopener">https://send.firefox.com/</a></td><td align="left"></td></tr><tr><td align="left">奶牛快传</td><td align="left"><a href="https://cowtransfer.com/" target="_blank" rel="noopener">https://cowtransfer.com/</a></td><td align="left"></td></tr><tr><td align="left">BitSend</td><td align="left"><a href="https://bitsend.jp/" target="_blank" rel="noopener">https://bitsend.jp/</a></td><td align="left">1. BitSend 是一个日本的免费网盘。<br>2. 没有容量限制和流量限制，可以用来进行临时的大文件转存下载使用。<br>3. 速度对比其他国外网盘相当快，上传下载几乎和国内网盘差不多速度。<br>4. 需要注意的是 BitSend 最多可选择保留 14 天，适合临时分享文件。</td></tr></tbody></table><h1 id="百度网盘"><a href="#百度网盘" class="headerlink" title="百度网盘"></a>百度网盘</h1><table><thead><tr><th align="left">网站</th><th align="left">网址</th><th align="left">补充说明</th></tr></thead><tbody><tr><td align="left">胖次网盘搜索</td><td align="left"><a href="https://www.panc.cc/" target="_blank" rel="noopener">https://www.panc.cc/</a></td><td align="left"></td></tr><tr><td align="left">大力盘</td><td align="left"><a href="http://dalipan.com/" target="_blank" rel="noopener">http://dalipan.com/</a></td><td align="left"></td></tr><tr><td align="left">大圣盘</td><td align="left"><a href="https://www.dashengpan.com/" target="_blank" rel="noopener">https://www.dashengpan.com/</a></td><td align="left"></td></tr><tr><td align="left">云盘精灵</td><td align="left"><a href="https://www.yunpanjingling.com/" target="_blank" rel="noopener">https://www.yunpanjingling.com/</a></td><td align="left">需要付费使用（费用不算高）。</td></tr></tbody></table><h1 id="磁力搜索"><a href="#磁力搜索" class="headerlink" title="磁力搜索"></a>磁力搜索</h1><table><thead><tr><th align="left">网站</th><th align="left">网址</th></tr></thead><tbody><tr><td align="left">Btdad</td><td align="left"><a href="http://www.btdad.xyz" target="_blank" rel="noopener">http://www.btdad.xyz</a></td></tr><tr><td align="left">磁力管家</td><td align="left"><a href="http://cili78.xyz/" target="_blank" rel="noopener">http://cili78.xyz/</a></td></tr><tr><td align="left">磁力狗</td><td align="left"><a href="http://www.ciligou.co/" target="_blank" rel="noopener">http://www.ciligou.co/</a></td></tr><tr><td align="left">超人搜索</td><td align="left"><a href="https://www.chaorensoso.xyz/" target="_blank" rel="noopener">https://www.chaorensoso.xyz/</a></td></tr></tbody></table><h1 id="查询工具"><a href="#查询工具" class="headerlink" title="查询工具"></a>查询工具</h1><table><thead><tr><th align="left">网站</th><th align="left">网址</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">百度地图</td><td align="left"><a href="https://map.baidu.com/" target="_blank" rel="noopener">https://map.baidu.com/</a></td><td align="left"></td></tr><tr><td align="left">企查查</td><td align="left"><a href="https://www.qichacha.com/" target="_blank" rel="noopener">https://www.qichacha.com/</a></td><td align="left">企业信息查询。</td></tr><tr><td align="left">911查询</td><td align="left"><a href="https://911cha.com/" target="_blank" rel="noopener">https://911cha.com/</a></td><td align="left">日常生活查询。</td></tr></tbody></table><h1 id="其他工具"><a href="#其他工具" class="headerlink" title="其他工具"></a>其他工具</h1><table><thead><tr><th align="left">网站</th><th align="left">网址</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">图怪兽</td><td align="left"><a href="https://818ps.com/" target="_blank" rel="noopener">https://818ps.com/</a></td><td align="left">在线图片编辑器。</td></tr><tr><td align="left">百度云盘万能钥匙</td><td align="left"><a href="http://tools.bugscaner.com/baiduyunpassword/" target="_blank" rel="noopener">http://tools.bugscaner.com/baiduyunpassword/</a></td><td align="left">获取百度网盘提取码。</td></tr><tr><td align="left">PanDownload网页版</td><td align="left"><a href="https://www.baiduwp.com/" target="_blank" rel="noopener">https://www.baiduwp.com/</a></td><td align="left">百度网盘分享链接在线解析。</td></tr><tr><td align="left">随机身份证号码生成器</td><td align="left"><a href="http://sfz.uzuzuz.com/" target="_blank" rel="noopener">http://sfz.uzuzuz.com/</a></td><td align="left"></td></tr><tr><td align="left">爱资料在线工具</td><td align="left"><a href="https://www.toolnb.com/" target="_blank" rel="noopener">https://www.toolnb.com/</a></td><td align="left"></td></tr><tr><td align="left">一唯科技</td><td align="left"><a href="https://www.ieway.cn/" target="_blank" rel="noopener">https://www.ieway.cn/</a></td><td align="left">1. 课程视频加密网站，需要付费。<br>2. 加密的视频需要官网提供的播放器才能解密。</td></tr></tbody></table><h1 id="学习网站"><a href="#学习网站" class="headerlink" title="学习网站"></a>学习网站</h1><h2 id="课程"><a href="#课程" class="headerlink" title="课程"></a>课程</h2><table><thead><tr><th align="left">网站</th><th align="left">网址</th></tr></thead><tbody><tr><td align="left">网易云课堂</td><td align="left"><a href="https://study.163.com/" target="_blank" rel="noopener">https://study.163.com/</a></td></tr><tr><td align="left">腾讯课堂</td><td align="left"><a href="https://ke.qq.com/" target="_blank" rel="noopener">https://ke.qq.com/</a></td></tr><tr><td align="left">黑马程序员</td><td align="left"><a href="http://www.itheima.com/" target="_blank" rel="noopener">http://www.itheima.com/</a></td></tr><tr><td align="left">慕课网</td><td align="left"><a href="https://www.imooc.com/" target="_blank" rel="noopener">https://www.imooc.com/</a></td></tr><tr><td align="left">中国大学MOOC</td><td align="left"><a href="https://www.icourse163.org/" target="_blank" rel="noopener">https://www.icourse163.org/</a></td></tr><tr><td align="left">小雨课堂</td><td align="left"><a href="http://www.520it.com/ke/" target="_blank" rel="noopener">http://www.520it.com/ke/</a></td></tr></tbody></table><h2 id="在线教程"><a href="#在线教程" class="headerlink" title="在线教程"></a>在线教程</h2><table><thead><tr><th align="left">网站</th><th align="left">网址</th></tr></thead><tbody><tr><td align="left">廖雪峰的官方网站</td><td align="left"><a href="https://www.liaoxuefeng.com/" target="_blank" rel="noopener">https://www.liaoxuefeng.com/</a></td></tr><tr><td align="left">阮一峰的个人网站</td><td align="left"><a href="http://www.ruanyifeng.com/" target="_blank" rel="noopener">http://www.ruanyifeng.com/</a></td></tr><tr><td align="left">CodeSheep · 程序羊</td><td align="left"><a href="https://www.codesheep.cn/" target="_blank" rel="noopener">https://www.codesheep.cn/</a></td></tr><tr><td align="left">百度前端技术学院</td><td align="left"><a href="http://ife.baidu.com/" target="_blank" rel="noopener">http://ife.baidu.com/</a></td></tr><tr><td align="left">易百教程</td><td align="left"><a href="https://www.yiibai.com/" target="_blank" rel="noopener">https://www.yiibai.com/</a></td></tr><tr><td align="left">看云</td><td align="left"><a href="https://www.kancloud.cn/" target="_blank" rel="noopener">https://www.kancloud.cn/</a></td></tr></tbody></table><h2 id="交流论坛"><a href="#交流论坛" class="headerlink" title="交流论坛"></a>交流论坛</h2><table><thead><tr><th align="left">网站</th><th align="left">网址</th></tr></thead><tbody><tr><td align="left">CSDN</td><td align="left"><a href="https://www.csdn.net/" target="_blank" rel="noopener">https://www.csdn.net/</a></td></tr><tr><td align="left">博客园</td><td align="left"><a href="https://www.cnblogs.com/" target="_blank" rel="noopener">https://www.cnblogs.com/</a></td></tr><tr><td align="left">掘金</td><td align="left"><a href="https://juejin.im/" target="_blank" rel="noopener">https://juejin.im/</a></td></tr><tr><td align="left">SegmentFault 思否</td><td align="left"><a href="https://segmentfault.com/" target="_blank" rel="noopener">https://segmentfault.com/</a></td></tr><tr><td align="left">开源中国</td><td align="left"><a href="https://www.oschina.net/" target="_blank" rel="noopener">https://www.oschina.net/</a></td></tr><tr><td align="left">Awesomes</td><td align="left"><a href="https://www.awesomes.cn/" target="_blank" rel="noopener">https://www.awesomes.cn/</a></td></tr></tbody></table><h2 id="前端导航"><a href="#前端导航" class="headerlink" title="前端导航"></a>前端导航</h2><table><thead><tr><th align="left">网站</th><th align="left">网址</th></tr></thead><tbody><tr><td align="left">醉牛前端</td><td align="left"><a href="http://f2er.club/" target="_blank" rel="noopener">http://f2er.club/</a></td></tr></tbody></table><h2 id="做题系统"><a href="#做题系统" class="headerlink" title="做题系统"></a>做题系统</h2><table><thead><tr><th align="left">网站</th><th align="left">网址</th></tr></thead><tbody><tr><td align="left">中山职业技术学院</td><td align="left"><a href="http://120.25.233.137/JudgeOnline/" target="_blank" rel="noopener">http://120.25.233.137/JudgeOnline/</a></td></tr><tr><td align="left">力扣(LeetCode)官网</td><td align="left"><a href="https://leetcode-cn.com/" target="_blank" rel="noopener">https://leetcode-cn.com/</a></td></tr></tbody></table><h1 id="网站设计"><a href="#网站设计" class="headerlink" title="网站设计"></a>网站设计</h1><h2 id="快速建站"><a href="#快速建站" class="headerlink" title="快速建站"></a>快速建站</h2><table><thead><tr><th align="left">网站</th><th align="left">网址</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">WordPress</td><td align="left"><a href="https://cn.wordpress.org/" target="_blank" rel="noopener">https://cn.wordpress.org/</a></td><td align="left">能让您轻松创建美丽网站、博客和应用的开源软件。</td></tr><tr><td align="left">凡科网</td><td align="left"><a href="https://www.fkw.com/" target="_blank" rel="noopener">https://www.fkw.com/</a></td><td align="left"></td></tr><tr><td align="left">Typecho Official Site</td><td align="left"><a href="http://typecho.org/" target="_blank" rel="noopener">http://typecho.org/</a></td><td align="left"></td></tr></tbody></table><h2 id="网站模板"><a href="#网站模板" class="headerlink" title="网站模板"></a>网站模板</h2><table><thead><tr><th align="left">网站</th><th align="left">网址</th></tr></thead><tbody><tr><td align="left">模板之家</td><td align="left"><a href="http://www.cssmoban.com/" target="_blank" rel="noopener">http://www.cssmoban.com/</a></td></tr><tr><td align="left">站长素材</td><td align="left"><a href="http://sc.chinaz.com/" target="_blank" rel="noopener">http://sc.chinaz.com/</a></td></tr><tr><td align="left">源码之家</td><td align="left"><a href="http://www.mycodes.net/" target="_blank" rel="noopener">http://www.mycodes.net/</a></td></tr></tbody></table><h2 id="原型图设计"><a href="#原型图设计" class="headerlink" title="原型图设计"></a>原型图设计</h2><table><thead><tr><th align="left">网站</th><th align="left">网址</th></tr></thead><tbody><tr><td align="left">墨刀</td><td align="left"><a href="https://free.modao.cc/" target="_blank" rel="noopener">https://free.modao.cc/</a></td></tr></tbody></table><h2 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h2><table><thead><tr><th align="left">网站</th><th align="left">网址</th></tr></thead><tbody><tr><td align="left">阿里巴巴矢量图标库</td><td align="left"><a href="https://www.iconfont.cn/" target="_blank" rel="noopener">https://www.iconfont.cn/</a></td></tr><tr><td align="left">Easyicon</td><td align="left"><a href="https://www.easyicon.net/" target="_blank" rel="noopener">https://www.easyicon.net/</a></td></tr><tr><td align="left">unDraw</td><td align="left"><a href="https://undraw.co/" target="_blank" rel="noopener">https://undraw.co/</a></td></tr><tr><td align="left">icomoon</td><td align="left"><a href="https://icomoon.io/" target="_blank" rel="noopener">https://icomoon.io/</a></td></tr></tbody></table><h2 id="配色"><a href="#配色" class="headerlink" title="配色"></a>配色</h2><table><thead><tr><th align="left">网站</th><th align="left">网址</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">配色软件园</td><td align="left"><a href="http://www.peise.net/palette/" target="_blank" rel="noopener">http://www.peise.net/palette/</a></td><td align="left">致力于安卓软件和游戏的交流与学习。</td></tr><tr><td align="left">Color Hunt</td><td align="left"><a href="https://colorhunt.co/" target="_blank" rel="noopener">https://colorhunt.co/</a></td><td align="left"></td></tr><tr><td align="left">ColorDrop</td><td align="left"><a href="https://colordrop.io/" target="_blank" rel="noopener">https://colordrop.io/</a></td><td align="left"></td></tr></tbody></table><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><table><thead><tr><th align="left">网站</th><th align="left">网址</th></tr></thead><tbody><tr><td align="left">jq 插件库</td><td align="left"><a href="http://www.jq22.com/" target="_blank" rel="noopener">http://www.jq22.com/</a></td></tr><tr><td align="left">jQuery 之家</td><td align="left"><a href="http://www.htmleaf.com/" target="_blank" rel="noopener">http://www.htmleaf.com/</a></td></tr><tr><td align="left">jqueryschool</td><td align="left"><a href="http://www.jq-school.com/" target="_blank" rel="noopener">http://www.jq-school.com/</a></td></tr></tbody></table><h2 id="技术支持"><a href="#技术支持" class="headerlink" title="技术支持"></a>技术支持</h2><table><thead><tr><th align="left">网站</th><th align="left">网址</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">JSON.cn</td><td align="left"><a href="https://www.json.cn/" target="_blank" rel="noopener">https://www.json.cn/</a></td><td align="left">json 数据格式化网站。</td></tr><tr><td align="left">Google Fonts</td><td align="left"><a href="http://www.googlefonts.cn/chinese" target="_blank" rel="noopener">http://www.googlefonts.cn/chinese</a></td><td align="left">字体粘贴即用，让网页字体个性化。</td></tr><tr><td align="left">ImgURL 图床</td><td align="left"><a href="https://imgurl.org/" target="_blank" rel="noopener">https://imgurl.org/</a></td><td align="left">免费图片上传，自动生成链接，一键复制。</td></tr><tr><td align="left">JSONPlaceholder</td><td align="left"><a href="http://jsonplaceholder.typicode.com/" target="_blank" rel="noopener">http://jsonplaceholder.typicode.com/</a></td><td align="left">提供免费的在线 REST API 的网站。</td></tr><tr><td align="left">Firebase</td><td align="left"><a href="https://firebase.google.cn/" target="_blank" rel="noopener">https://firebase.google.cn/</a></td><td align="left">1. 无需管理基础架构，快速构建您的应用。<br>2. 提供免费的后端服务和云端数据库（NoSQL）。</td></tr><tr><td align="left">jsDelivr</td><td align="left"><a href="https://www.jsdelivr.com/" target="_blank" rel="noopener">https://www.jsdelivr.com/</a></td><td align="left">1. 一个免费，快速，可靠的开源 CDN 服务。<br>2. jsDelivr 提供 npm，GitHub，WordPress 等项目的镜像。</td></tr></tbody></table><h3 id="使用-jsDelivr-访问-github-的资源"><a href="#使用-jsDelivr-访问-github-的资源" class="headerlink" title="使用 jsDelivr 访问 github 的资源"></a>使用 jsDelivr 访问 github 的资源</h3><h4 id="URL-格式说明"><a href="#URL-格式说明" class="headerlink" title="URL 格式说明"></a>URL 格式说明</h4><table><thead><tr><th align="left">格式</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径</code></td><td align="left">1. gh 表示访问 GitHub 的资源。<br>2. 版本号不是必需的。</td></tr></tbody></table><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><table><thead><tr><th align="left">示例</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>https://cdn.jsdelivr.net/gh/user/repo@version/file</code></td><td align="left">加载任何 Github 发布、提交或分支。</td></tr><tr><td align="left"><code>https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/dist/jquery.min.js</code></td><td align="left">1. 加载 jQuery 3.2.1 版本<br>2. 必须在 Github 发布版本。</td></tr><tr><td align="left"><code>https://cdn.jsdelivr.net/gh/jquery/jquery@3/dist/jquery.min.js</code></td><td align="left">使用版本范围而不是特定版本。</td></tr><tr><td align="left"><code>https://cdn.jsdelivr.net/gh/jquery/jquery/dist/jquery.min.js</code></td><td align="left">完全省略该版本以获取最新版本。</td></tr><tr><td align="left"><code>https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/src/core.min.js</code></td><td align="left">1. 将 <code>.min</code> 添加到任何 JS/CSS 文件中以获取缩小版本。<br>2. 如果不存在，将为会自动生成。</td></tr><tr><td align="left"><code>https://cdn.jsdelivr.net/gh/jquery/jquery/</code></td><td align="left">在末尾添加 / 以获取资源目录列表。</td></tr></tbody></table><h1 id="代码托管"><a href="#代码托管" class="headerlink" title="代码托管"></a>代码托管</h1><table><thead><tr><th align="left">网站</th><th align="left">网址</th></tr></thead><tbody><tr><td align="left">SourceForge</td><td align="left"><a href="https://sourceforge.net/" target="_blank" rel="noopener">https://sourceforge.net/</a></td></tr><tr><td align="left">GitHub</td><td align="left"><a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a></td></tr><tr><td align="left">码云</td><td align="left"><a href="https://gitee.com/" target="_blank" rel="noopener">https://gitee.com/</a></td></tr><tr><td align="left">CODING</td><td align="left"><a href="https://coding.net/" target="_blank" rel="noopener">https://coding.net/</a></td></tr><tr><td align="left">npm</td><td align="left"><a href="https://www.npmjs.com/" target="_blank" rel="noopener">https://www.npmjs.com/</a></td></tr></tbody></table><h1 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h1><table><thead><tr><th align="left">网站</th><th align="left">网址</th></tr></thead><tbody><tr><td align="left">阿里云</td><td align="left"><a href="https://www.aliyun.com/" target="_blank" rel="noopener">https://www.aliyun.com/</a></td></tr><tr><td align="left">腾讯云</td><td align="left"><a href="https://cloud.tencent.com/" target="_blank" rel="noopener">https://cloud.tencent.com/</a></td></tr><tr><td align="left">七牛云</td><td align="left"><a href="https://www.qiniu.com/" target="_blank" rel="noopener">https://www.qiniu.com/</a></td></tr><tr><td align="left">硅云</td><td align="left"><a href="https://www.vpsor.cn/" target="_blank" rel="noopener">https://www.vpsor.cn/</a></td></tr></tbody></table><!-- rebuild by neat -->]]></content>
  </entry>
  <entry>
    <title>软件推荐</title>
    <url>/posts/34021/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><h1 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h1><h2 id="软件介绍"><a href="#软件介绍" class="headerlink" title="软件介绍"></a>软件介绍</h2><table><thead><tr><th align="left">软件</th><th align="left">官网</th><th align="left">说明</th><th align="left">是否中文</th></tr></thead><tbody><tr><td align="left">Google Chrome</td><td align="left"><a href="https://www.google.cn/intl/zh-CN/chrome/" target="_blank" rel="noopener">https://www.google.cn/intl/zh-CN/chrome/</a></td><td align="left"></td><td align="left">是</td></tr><tr><td align="left">欧朋浏览器</td><td align="left"><a href="http://www.oupeng.com/" target="_blank" rel="noopener">http://www.oupeng.com/</a></td><td align="left">支持用户数据云同步。</td><td align="left">是</td></tr><tr><td align="left">火狐浏览器</td><td align="left"><a href="http://www.firefox.com.cn/" target="_blank" rel="noopener">http://www.firefox.com.cn/</a></td><td align="left">支持用户数据云同步。</td><td align="left">是</td></tr><tr><td align="left">火绒安全</td><td align="left"><a href="https://www.huorong.cn/" target="_blank" rel="noopener">https://www.huorong.cn/</a></td><td align="left">安全软件，界面简洁没有广告。</td><td align="left">是</td></tr><tr><td align="left">WPS Office</td><td align="left"><a href="https://www.apipost.cn/" target="_blank" rel="noopener">https://www.apipost.cn/</a></td><td align="left">金山出品的办公软件。</td><td align="left">是</td></tr><tr><td align="left">Bandizip</td><td align="left"><a href="http://www.bandisoft.com/" target="_blank" rel="noopener">http://www.bandisoft.com/</a></td><td align="left">免费的压缩、解压软件。</td><td align="left">是</td></tr><tr><td align="left">VLC media player</td><td align="left"><a href="https://www.videolan.org/" target="_blank" rel="noopener">https://www.videolan.org/</a></td><td align="left">多媒体播放器。</td><td align="left">是</td></tr><tr><td align="left">Snipaste</td><td align="left"><a href="https://www.snipaste.com/" target="_blank" rel="noopener">https://www.snipaste.com/</a></td><td align="left">屏幕截图软件。</td><td align="left">是</td></tr><tr><td align="left">Captura</td><td align="left"><a href="https://github.com/MathewSachin/Captura/releases/" target="_blank" rel="noopener">https://github.com/MathewSachin/Captura/releases/</a></td><td align="left">1. 屏幕录制软件，免费无水印。<br>2. 安装完毕可以到设置选项选择支持中文。<br>3. 使用软件前需要配置 <a href="http://ffmpeg.org/" target="_blank" rel="noopener">FFmpeg</a> 的bin目录。</td><td align="left">是</td></tr></tbody></table><a id="more"></a><h2 id="Google-浏览器"><a href="#Google-浏览器" class="headerlink" title="Google 浏览器"></a>Google 浏览器</h2><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><table><thead><tr><th align="left">快捷键</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">Ctrl+f5</td><td align="left">强制刷新</td></tr><tr><td align="left">Ctrl+shift+del</td><td align="left">清除浏览器缓存</td></tr></tbody></table><h2 id="火狐浏览器"><a href="#火狐浏览器" class="headerlink" title="火狐浏览器"></a>火狐浏览器</h2><h3 id="书签工具栏、书签菜单和其他书签"><a href="#书签工具栏、书签菜单和其他书签" class="headerlink" title="书签工具栏、书签菜单和其他书签"></a>书签工具栏、书签菜单和其他书签</h3><table><thead><tr><th align="left">书签</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">书签工具栏</td><td align="left">显示在地址栏下方的工具栏，可以快速打开书签。</td></tr><tr><td align="left">书签菜单</td><td align="left">书签工具栏和其他书签是书签菜单的子集。</td></tr><tr><td align="left">其他书签</td><td align="left">存放待处理书签的容器，所以添加书签默认是其他书签。</td></tr></tbody></table><h2 id="VLC-媒体播放器"><a href="#VLC-媒体播放器" class="headerlink" title="VLC 媒体播放器"></a>VLC 媒体播放器</h2><h3 id="倍速播放"><a href="#倍速播放" class="headerlink" title="倍速播放"></a>倍速播放</h3><h4 id="将速度选择器添加到工具栏"><a href="#将速度选择器添加到工具栏" class="headerlink" title="将速度选择器添加到工具栏"></a>将速度选择器添加到工具栏</h4><ol><li><p>工具 -&gt; 自定义界面。</p><img src="23.png" width="50%"></li><li><p>将速度选择器拖动到工具栏第二行。</p><img src="24.png" width="50%"></li><li><p>可以添加适当占位符。</p><img src="25.png" width="50%"></li><li><p>关闭即可。</p><img src="26.png" width="50%"></li></ol><h4 id="通过快捷键倍速播放"><a href="#通过快捷键倍速播放" class="headerlink" title="通过快捷键倍速播放"></a>通过快捷键倍速播放</h4><ol><li><p>工具 -&gt; 偏好设置。</p><img src="27.png" width="50%"></li><li><p>选择“热键”选项，可以自行设置快捷键。</p><img src="28.png" width="50%"></li></ol><h2 id="WPS-Office"><a href="#WPS-Office" class="headerlink" title="WPS Office"></a>WPS Office</h2><h3 id="去除广告"><a href="#去除广告" class="headerlink" title="去除广告"></a>去除广告</h3><ol><li><p>打开WPS配置工具。</p><p><img src="14.png" alt></p></li><li><p>高级 -&gt; 其它选项</p><img src="15.png" width="40%"><ul><li>把上图两个选项取消掉。</li></ul></li></ol><h3 id="关闭消息提醒"><a href="#关闭消息提醒" class="headerlink" title="关闭消息提醒"></a>关闭消息提醒</h3><ol><li><p>设置 -&gt; 消息管理</p><img src="18.png" width="20%"></li><li><p>点击设置图标，把所有选项都关闭。</p><img src="19.png" width="80%"></li></ol><h1 id="黑科技"><a href="#黑科技" class="headerlink" title="黑科技"></a>黑科技</h1><h2 id="软件介绍-1"><a href="#软件介绍-1" class="headerlink" title="软件介绍"></a>软件介绍</h2><table><thead><tr><th align="left">软件</th><th align="left">官网</th><th align="left">说明</th><th align="left">是否中文</th></tr></thead><tbody><tr><td align="left">PanDownload</td><td align="left"><a href="http://pandownload.com/" target="_blank" rel="noopener">http://pandownload.com/</a></td><td align="left">百度网盘下载器，下载百度网盘资源不限速。</td><td align="left">是</td></tr><tr><td align="left">速盘</td><td align="left"><a href="http://www.speedpan.com/" target="_blank" rel="noopener">http://www.speedpan.com/</a></td><td align="left">百度网盘资源下载工具，需要付费使用。</td><td align="left">是</td></tr><tr><td align="left">ENFI下载器</td><td align="left"><a href="http://www.enfi.cloud/#/index" target="_blank" rel="noopener">http://www.enfi.cloud/#/index</a></td><td align="left">百度网盘资源下载工具，需要付费使用。</td><td align="left">是</td></tr><tr><td align="left">迅雷极速版</td><td align="left"><a href="https://www.lanzous.com/i84d2jg" target="_blank" rel="noopener">https://www.lanzous.com/i84d2jg</a></td><td align="left">磁力下载工具。</td><td align="left">是</td></tr><tr><td align="left">qBittorren</td><td align="left"><a href="https://www.qbittorrent.org/" target="_blank" rel="noopener">https://www.qbittorrent.org/</a></td><td align="left">1. 磁力下载工具。<br>2. 如果迅雷遇到版权问题或敏感资源不能下载，可以使用该软件下载。</td><td align="left">是</td></tr><tr><td align="left">Internet Download Manager</td><td align="left"><a href="https://www.internetdownloadmanager.com/" target="_blank" rel="noopener">https://www.internetdownloadmanager.com/</a></td><td align="left">下载工具，试用软件，需要付费。</td><td align="left">是</td></tr><tr><td align="left">Free Download Manager</td><td align="left"><a href="https://www.freedownloadmanager.org/zh/" target="_blank" rel="noopener">https://www.freedownloadmanager.org/zh/</a></td><td align="left">开源下载工具，和 IDM 类似。</td><td align="left">是</td></tr><tr><td align="left">CCleaner</td><td align="left"><a href="https://www.ccleaner.com/" target="_blank" rel="noopener">https://www.ccleaner.com/</a></td><td align="left">出色的计算机文件清理工具，可以清理注册表。</td><td align="left">是</td></tr><tr><td align="left">Wise Disk Cleaner</td><td align="left"><a href="http://www.wisecleaner.com/download.html" target="_blank" rel="noopener">http://www.wisecleaner.com/download.html</a></td><td align="left">磁盘清理工具，免费的自动清理功能。</td><td align="left">是</td></tr><tr><td align="left">Dism++</td><td align="left"><a href="http://www.chuyu.me/zh-Hans/index.html" target="_blank" rel="noopener">http://www.chuyu.me/zh-Hans/index.html</a></td><td align="left">系统优化工具。</td><td align="left">是</td></tr><tr><td align="left">Total Uninstall</td><td align="left"><a href="https://www.martau.com/" target="_blank" rel="noopener">https://www.martau.com/</a></td><td align="left">卸载工具，试用软件，需要付费。</td><td align="left">是</td></tr><tr><td align="left">Geek Uninstaller</td><td align="left"><a href="https://geekuninstaller.com/" target="_blank" rel="noopener">https://geekuninstaller.com/</a></td><td align="left">卸载工具，免费使用。</td><td align="left">是</td></tr><tr><td align="left">AdGuard</td><td align="left"><a href="https://adguard.com/zh_cn/welcome.html" target="_blank" rel="noopener">https://adguard.com/zh_cn/welcome.html</a></td><td align="left">广告拦截软件，加载网页将需要更多时间。</td><td align="left">是</td></tr><tr><td align="left">Recuva</td><td align="left"><a href="https://www.ccleaner.com/recuva" target="_blank" rel="noopener">https://www.ccleaner.com/recuva</a></td><td align="left">文件恢复工具。</td><td align="left">是</td></tr><tr><td align="left">易我数据恢复向导</td><td align="left"><a href="https://www.easeus.com.cn/tryorbuy.htm" target="_blank" rel="noopener">https://www.easeus.com.cn/tryorbuy.htm</a></td><td align="left">国内文件恢复工具。</td><td align="left">是</td></tr></tbody></table><h2 id="qBittorren"><a href="#qBittorren" class="headerlink" title="qBittorren"></a>qBittorren</h2><h3 id="科普"><a href="#科普" class="headerlink" title="科普"></a>科普</h3><h4 id="种子、-磁力链、-番号的关系？"><a href="#种子、-磁力链、-番号的关系？" class="headerlink" title="种子、 磁力链、 番号的关系？"></a>种子、 磁力链、 番号的关系？</h4><ul><li>种子其实是 BT（BitTorrent） 下载的俗称，是人们 BT 下载的特性将其称为种子。通常为 .torrent 后缀的文件。</li><li>BT 下载需要先下一个种子文件，然后再通过种子文件下载资源，这样比较麻烦而且种子不易保存。</li><li>所以就产生了磁力链接将种子文件转换为一串代码，这样，只要用这段代码就可以直接下载。</li><li>而番号这个概念提出更多的是将杂乱无章的磁力链收录起来，整理的一个索引（包括影片的简介，剧照、磁力链等等）。</li><li>用一个简易的，便于记忆的编号来代替某个磁力链或者种子以便于记忆或者分享。</li></ul><h4 id="BT-下载原理"><a href="#BT-下载原理" class="headerlink" title="BT 下载原理"></a>BT 下载原理</h4><ul><li>BT 是 BitTorrent 协议的简称，该协议就是就是用于 P2P 下载的。</li><li>P2P 应该是 Person to Person，其实 P2P 的本名 Peer to Peer，P2P 网络就叫对等网络，这里没有一个总存储服务器的概念，不是把所有资源都集中存储在某个服务器，大家都去那下载，而是分布式地存储在各个用户手里，我既是 A 资源的下载者，也是 B 资源的上传者，其他用户也是一样，所以每个用户都是对等的，故谓之对等网络。</li><li>既然很多人手里都已经有了该资源，是不是可以利用起来，提供给其他人下载，同时当你有了需要的资源而别人有时，你也可以从其他很多人手里下载，这样不仅保证了资源的可获得性，而且下载速度也可以很快，毕竟可以同时从很多人手里并行下载，这也就是为了 BT 下载可以速度很快的原因。</li></ul><h4 id="BT-种子文件"><a href="#BT-种子文件" class="headerlink" title="BT 种子文件"></a>BT 种子文件</h4><ul><li>原本的资源文件在制作种子文件时会被分为很多份，比如一个 2G 的视频被分成一千份，在你下载的过程中，其实可以并行地从很多个握有该资源的用户（做种的机器）手里分开下载这些小块。</li><li>但同时，你一个视频或者压缩文件被分成这么多份去下载，万一下载完了组装不起来了怎么办？这就需要下载完后对每一小份进行校验，校验方式就是利用存储在种子文件中的每一份的 hash 值。</li><li>Tracker 地址。当你要下载一个资源的时候，会找很多手里有这个资源的用户去下载，但怎么知道谁手里有呢？这时就会访问<strong>种子文件中</strong>记录的Tracker 地址，其实也就是一个服务器地址，这个服务器不提供资源下载，它的作用是帮你牵线搭桥，告诉你谁有资源，并安排你从谁那边下载哪些部分。</li></ul><h3 id="添加-Tracker-服务器"><a href="#添加-Tracker-服务器" class="headerlink" title="添加 Tracker 服务器"></a>添加 Tracker 服务器</h3><ol><li><p><a href="https://github.com/ngosang/trackerslist" target="_blank" rel="noopener">Tracker 服务器</a></p></li><li><p>工具 -&gt; 选项</p><img src="29.png" width="40%"></li><li><p>Tracker 服务器记录每一条用空行隔开。</p><img src="30.png" width="60%"></li></ol><h2 id="IDM"><a href="#IDM" class="headerlink" title="IDM"></a>IDM</h2><h3 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h3><ol><li><a href="https://www.lanzous.com/i84d1yf" target="_blank" rel="noopener">Internet Download Manager Crack</a></li><li>将破解程序移动到 IDM 根目录。</li><li>运行软件，点击 <kbd>Crack IDM</kbd> 按钮即可破解。</li></ol><h3 id="百度网盘高速下载"><a href="#百度网盘高速下载" class="headerlink" title="百度网盘高速下载"></a>百度网盘高速下载</h3><h4 id="直连下载"><a href="#直连下载" class="headerlink" title="直连下载"></a>直连下载</h4><ol><li><p>安装 Tampermonkey 谷歌插件。</p><p><img src="3.png" alt></p></li><li><p>点击获取新脚本。</p><p><img src="4.png" alt></p></li><li><p>点击进入 GreasyFork 网站。</p><p><img src="5.png" alt></p></li><li><p>搜索百度网盘直链下载助手。</p><p><img src="6.png" alt></p></li><li><p>点击安装。</p><p><img src="7.png" alt></p></li><li><p>继续点击安装。</p><img src="31.png" width="100%"></li><li><p>可点击 Tampermonkey 插件的管理面板查看是否安装成功。</p><p><img src="8.png" alt></p></li><li><p>如果一切顺利，打开百度网盘网页版会多出一个下载助手的按钮。</p><p><img src="9.png" alt></p></li><li><p>选择文件，点击直连下载就会自动弹出IDM的下载窗口。</p><p><img src="10.png" alt></p></li><li><p>下载速度如下。</p><p><img src="11.png" alt></p></li></ol><h4 id="显示链接下载"><a href="#显示链接下载" class="headerlink" title="显示链接下载"></a>显示链接下载</h4><ol><li><p>百度网盘直链下载助手显示链接利用 IDM 下载。</p></li><li><p>选择资源，点击下载助手 -&gt; API下载 -&gt; 显示链接</p><img src="32.png" width="50%"></li><li><p>在链接上右击，选择“使用 IDM 下载”（浏览器必须集成 IDM 插件才会有此选项）。</p><img src="33.png" width="50%"></li></ol><h3 id="暂停调用-IDM"><a href="#暂停调用-IDM" class="headerlink" title="暂停调用 IDM"></a>暂停调用 IDM</h3><ol><li><p>下载任何资源都会默认调用 IDM 下载器，我们想暂时不调用 IDM 下载器，使用默认浏览器下载资源。</p></li><li><p>通过按住<kbd>Alt</kbd>+点击下载链接即可暂停调用 IDM 下载器。</p><img src="13.png" width="40%"></li></ol><h2 id="Total-Uninstall"><a href="#Total-Uninstall" class="headerlink" title="Total Uninstall"></a>Total Uninstall</h2><h3 id="关闭自动备份功能"><a href="#关闭自动备份功能" class="headerlink" title="关闭自动备份功能"></a>关闭自动备份功能</h3><ol><li><p>工具 -&gt; 选项</p><img src="16.png" width="50%"></li><li><p>把箭头所指选项的钩去掉</p><img src="17.png" width="50%"></li></ol><h2 id="Recuva"><a href="#Recuva" class="headerlink" title="Recuva"></a>Recuva</h2><h3 id="设置配置"><a href="#设置配置" class="headerlink" title="设置配置"></a>设置配置</h3><ol><li><p>设置选项：</p><img src="21.png" width="40%"></li><li><p>一般设置：</p><img src="20.png" width="40%"></li><li><p>动作设置：</p><img src="22.png" width="40%"></li></ol><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>数据恢复时恢复路径不要选择丢失数据的盘符，以免覆盖要恢复的数据。</li><li>删除文件并非真正的把文件删除了，而是把索引删除了，让用户不可见，等新的数据写入的时候就会有概率覆盖掉丢失文件的内容。</li><li>磁盘容量越大，恢复数据的概率也就越大，新数据写入磁盘的时候，可能没有覆盖掉丢失的数据，而是写入磁盘的其他位置。</li></ul><h1 id="程序员"><a href="#程序员" class="headerlink" title="程序员"></a>程序员</h1><h2 id="软件介绍-2"><a href="#软件介绍-2" class="headerlink" title="软件介绍"></a>软件介绍</h2><table><thead><tr><th align="left">软件</th><th align="left">官网</th><th align="left">说明</th><th align="left">是否中文</th></tr></thead><tbody><tr><td align="left">微PE工具箱</td><td align="left"><a href="http://www.wepe.com.cn/" target="_blank" rel="noopener">http://www.wepe.com.cn/</a></td><td align="left">安装U盘PE系统。</td><td align="left">是</td></tr><tr><td align="left">Notepad++</td><td align="left"><a href="https://notepad-plus-plus.org/" target="_blank" rel="noopener">https://notepad-plus-plus.org/</a></td><td align="left">文本编辑器，作为国人不推荐使用。</td><td align="left">是</td></tr><tr><td align="left">Postman</td><td align="left"><a href="https://www.getpostman.com/" target="_blank" rel="noopener">https://www.getpostman.com/</a></td><td align="left">接口测试工具。</td><td align="left">不是</td></tr><tr><td align="left">ApiPost</td><td align="left"><a href="https://www.apipost.cn/" target="_blank" rel="noopener">https://www.apipost.cn/</a></td><td align="left">接口测试工具，需要登录注册才可使用。</td><td align="left">是</td></tr><tr><td align="left">IETester</td><td align="left"><a href="http://www.ietester.cn/" target="_blank" rel="noopener">http://www.ietester.cn/</a></td><td align="left">一个 ie 浏览器多版本测试工具。</td><td align="left">是</td></tr><tr><td align="left">TortoiseGit</td><td align="left"><a href="https://tortoisegit.org/" target="_blank" rel="noopener">https://tortoisegit.org/</a></td><td align="left">git 图形化工具。</td><td align="left">是</td></tr><tr><td align="left">TeamViewer</td><td align="left"><a href="https://www.teamviewer.cn/cn/" target="_blank" rel="noopener">https://www.teamviewer.cn/cn/</a></td><td align="left">Windows 远程控制软件。</td><td align="left">是</td></tr><tr><td align="left">向日葵</td><td align="left"><a href="https://sunlogin.oray.com/personal/" target="_blank" rel="noopener">https://sunlogin.oray.com/personal/</a></td><td align="left">国内 Windows 远程控制软件。</td><td align="left">是</td></tr><tr><td align="left">花生壳</td><td align="left"><a href="https://hsk.oray.com/" target="_blank" rel="noopener">https://hsk.oray.com/</a></td><td align="left">内网穿透工具。</td><td align="left">是</td></tr></tbody></table><h2 id="Notepad"><a href="#Notepad" class="headerlink" title="Notepad++"></a>Notepad++</h2><h3 id="抵制-Notepad"><a href="#抵制-Notepad" class="headerlink" title="抵制 Notepad++"></a>抵制 Notepad++</h3><ul><li>Notepad++ 作者在软件官网公然发布危险政治文章，挑战中国人民底线，妄图分裂中国。</li><li>是否使用取决与个人。</li><li>可以使用 Visual Studio Code 取代 Notepad++，Notepad++ 能做到的 Visual Studio Code 也能做到。</li></ul><h2 id="TortoiseGit"><a href="#TortoiseGit" class="headerlink" title="TortoiseGit"></a>TortoiseGit</h2><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>TortoiseGit 向 github 远程推送（push）文件是会报一个异常 <code>no supported authentication methods avaiable</code>，解决办法：</p><ol><li>找到 TortoiseGit -&gt; Settings -&gt; Network</li><li>将 SSH client 指向 D:\git\usr\bin\ssh.exe （我的 Git 工具安装在 d 盘）</li></ol><!-- rebuild by neat -->]]></content>
  </entry>
  <entry>
    <title>科学上网</title>
    <url>/posts/8c46c59b/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><h2 id="浏览器插件-谷歌访问助手"><a href="#浏览器插件-谷歌访问助手" class="headerlink" title="浏览器插件-谷歌访问助手"></a>浏览器插件-谷歌访问助手</h2><p>百度谷歌访问助手，下载插件，打开谷歌浏览器找到扩展程序选项，将 crx 文件拖到到谷歌浏览器。</p><p>如果出现下图问题：</p><img src="/posts/8c46c59b/01.jpg"><p>可以把 crx 后缀修改为 rar 后缀，解压该压缩文件，再次打开谷歌浏览器的扩展程序选项，打开开发者模式，点击下图选项，选择刚解压出来的文件夹。</p><img src="/posts/8c46c59b/02.jpg"><p>添加成功，默认打开一个页面，点击下图选项。</p><img src="/posts/8c46c59b/04.jpg"><p>然后再点击下图链接。</p><img src="/posts/8c46c59b/05.jpg"><p>完成下图配置，即可永久激活（以后默认打开 hao245 网站）。</p><img src="/posts/8c46c59b/06.jpg"><p>手动关闭（此步可忽略）。</p><img src="/posts/8c46c59b/03.jpg"><p>正常访问谷歌（只能使用谷歌搜索）。</p><img src="/posts/8c46c59b/07.jpg"><a id="more"></a><h2 id="shadowsocksr"><a href="#shadowsocksr" class="headerlink" title="shadowsocksr"></a>shadowsocksr</h2><p>下载地址：<a href="https://github.com/shadowsocksrr/shadowsocksr-csharp/releases" target="_blank" rel="noopener">https://github.com/shadowsocksrr/shadowsocksr-csharp/releases</a></p><h3 id="导入-SS-SSR-账号"><a href="#导入-SS-SSR-账号" class="headerlink" title="导入 SS/SSR 账号"></a>导入 SS/SSR 账号</h3><p>导入 ssr 链接：托盘右击纸飞机，选择 “<strong>剪切板批量导入ssr://链接</strong>” 选项。</p><p>订阅链接：</p><ol><li>右击纸飞机 -&gt; 系统代理模式 -&gt; PAC模式。</li><li>右击纸飞机 -&gt; 服务器订阅 -&gt; SSR服务器订阅设置。</li><li>点击窗口左下角 “<strong>Add</strong>” 新增订阅，将网上的订阅链接将其粘贴至 “<strong>网址</strong>” 栏，点击 “<strong>确定</strong>”。</li><li>右击纸飞机 -&gt; 服务器订阅 -&gt; 更新SSR服务器订阅（不通过代理）。</li><li>右击纸飞机 -&gt; 服务器，选择合适服务器。</li></ol><p>扫描二维码：某些网站通过二维码方式分享 SS/SSR 账号。</p><img src="/posts/8c46c59b/17.png"><h3 id="分享-SS-SSR-账号和订阅链接网站"><a href="#分享-SS-SSR-账号和订阅链接网站" class="headerlink" title="分享 SS/SSR 账号和订阅链接网站"></a>分享 SS/SSR 账号和订阅链接网站</h3><table><thead><tr><th align="left">网站</th><th align="left">地址</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">沃享小颗粒</td><td align="left"><a href="https://www.xiaokeli.me/" target="_blank" rel="noopener">https://www.xiaokeli.me/</a></td><td align="left">订阅链接，需要付费。</td></tr><tr><td align="left">几鸡-学习助理</td><td align="left"><a href="https://jiji.pw/" target="_blank" rel="noopener">https://jiji.pw/</a></td><td align="left">订阅链接。</td></tr><tr><td align="left">free-ss.site</td><td align="left"><a href="https://free-ss.site/" target="_blank" rel="noopener">https://free-ss.site/</a></td><td align="left">通过二维码方式分享 SS/SSR 账号。</td></tr><tr><td align="left">Freedom</td><td align="left"><a href="http://nulastudio.org/Freedom/" target="_blank" rel="noopener">http://nulastudio.org/Freedom/</a></td><td align="left">通过二维码方式分享 SS/SSR 账号。</td></tr><tr><td align="left">放牧的风</td><td align="left"><a href="https://www.youneed.win/" target="_blank" rel="noopener">https://www.youneed.win/</a></td><td align="left">定期分享 SS/SSR 账号。</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>软件推荐</tag>
        <tag>科学上网</tag>
      </tags>
  </entry>
  <entry>
    <title>Git服务器搭建</title>
    <url>/posts/39f350e2/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><table><thead><tr><th align="left">Git 服务器</th><th align="left">网址</th></tr></thead><tbody><tr><td align="left">Gogs</td><td align="left"><a href="https://gogs.io/" target="_blank" rel="noopener">https://gogs.io/</a></td></tr><tr><td align="left">GitLab</td><td align="left"><a href="https://about.gitlab.com/" target="_blank" rel="noopener">https://about.gitlab.com/</a></td></tr></tbody></table><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>软件推荐</tag>
        <tag>Git</tag>
        <tag>服务搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub使用教程</title>
    <url>/posts/a8afd8f9/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><h2 id="SSH-配置"><a href="#SSH-配置" class="headerlink" title="SSH 配置"></a>SSH 配置</h2><p>如果使用 SSH 方式推送代码，需要配置 SSH Key。</p><p>把邮件地址换成自己的邮件地址，该命令意思是生成 SSH Key。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br></pre></td></tr></table></figure><p>运行命令一路回车，使用默认值即可。如果运行顺利，会在用户主目录生成 .ssh 目录，里面有 id_rsa （私钥）和 id_rsa.pub （公钥）两个文件。</p><p>进入用户主目录：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~</span><br></pre></td></tr></table></figure><p>然后登录 github 账号找到 SSH Keys 选项，添加 SSH Key，Key 内容为 id_rsa.pub （公钥）内容。</p><p>GitHub 允许你添加多个 Key。假定你有若干电脑，只要把每台电脑的 Key 都添加到 GitHub，就可以在每台电脑上往 GitHub 推送了。</p><p>在 GitHub 上免费托管的 Git 仓库，任何人都可以看到（但只有你自己才能改）。</p><p>验证 SSH 配置是否成功：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><h2 id="watch、star-和-fork-的区别"><a href="#watch、star-和-fork-的区别" class="headerlink" title="watch、star 和 fork 的区别"></a>watch、star 和 fork 的区别</h2><p>watch:</p><p>对于别人的项目，默认自己都处于 Not watching 的状态；当你选择 Watching，表示你以后会关注这个项目的所有动态。这个项目以后只要发生变动，如被别人提交了 push request、被别人发起了 issue 等等情况，你都会在自己的个人通知中心，收到一条通知消息。如果你设置了个人邮箱，那么你的邮箱也可能收到相应的邮件。</p><p>star:</p><p>类似关注或者点赞，当你点击 star，表示你喜欢这个项目，和对这个项目的支持。</p><p>fork:</p><p>点击 fork，相当于你自己有了一份原项目的拷贝，当然这个拷贝只是针对当时的项目文件；如果后续原项目文件发生改变，你必须通过其他的方式去同步。</p><h2 id="添加协作者（push权限）"><a href="#添加协作者（push权限）" class="headerlink" title="添加协作者（push权限）"></a>添加协作者（push权限）</h2><p>设置选项，找到协作者（Collaborators）选项，添加用户。</p><h2 id="GitHub-Pages-预览-HTML"><a href="#GitHub-Pages-预览-HTML" class="headerlink" title="GitHub Pages 预览 HTML"></a>GitHub Pages 预览 HTML</h2><p>你的仓库 -&gt; Settings -&gt; Options -&gt; GitHub Pages</p><p>Source 中选择 master branch。</p><p>找到 GitHub Pages 中的地址，如下图所示：</p><img src="/posts/a8afd8f9/1.jpg"><p>在上面的地址基础上加上你的相对与仓库的文件路径。</p><h3 id="GitHub-Pages-自定义域名"><a href="#GitHub-Pages-自定义域名" class="headerlink" title="GitHub Pages 自定义域名"></a>GitHub Pages 自定义域名</h3><p>仓库 -&gt; Settings</p><p>箭头处填写对应域名即可（允许该域名进行CNAME访问）。</p><img src="/posts/a8afd8f9/3.png"><p>等待域名生效，一般为 10 分钟。</p><p>补充：DNS 服务器中将记录类型配置成 CNAME（别名记录），记录值填写 GitHub Pages 分配的域名。</p><h2 id="Github-发布二进制文件让其他人下载"><a href="#Github-发布二进制文件让其他人下载" class="headerlink" title="Github 发布二进制文件让其他人下载"></a>Github 发布二进制文件让其他人下载</h2><p>仓库主页 -&gt; release</p><img src="/posts/a8afd8f9/2.jpg"><p>点击下图箭头所指按钮。</p><img src="/posts/a8afd8f9/3.jpg"><p>根据下图提示输入相应内容即可。</p><img src="/posts/a8afd8f9/4.jpg"><p>分布完成别人即可下载你的发布内容。</p><h2 id="Github-搜索指令"><a href="#Github-搜索指令" class="headerlink" title="Github 搜索指令"></a>Github 搜索指令</h2><table><thead><tr><th align="left">命令</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">stars:&gt;=500</td><td align="left">搜索 star 大于等于 500 的项目。</td></tr><tr><td align="left">stars:&gt;=500 language:java</td><td align="left">搜索 star 大于等于 500 的项目且为 JAVA 语言的项目。</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>网站推荐</tag>
      </tags>
  </entry>
  <entry>
    <title>码云使用教程</title>
    <url>/posts/9481d10b/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><h2 id="从-Github-导入项目到码云"><a href="#从-Github-导入项目到码云" class="headerlink" title="从 Github 导入项目到码云"></a>从 Github 导入项目到码云</h2><img src="/posts/9481d10b/1.png"><h2 id="自动同步-Github-项目"><a href="#自动同步-Github-项目" class="headerlink" title="自动同步 Github 项目"></a>自动同步 Github 项目</h2><p>仓库 -&gt; 管理 -&gt; 基本设置</p><img src="/posts/9481d10b/2.png"><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>网站推荐</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用命令</title>
    <url>/posts/4e8d671c/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><h2 id="命令规则"><a href="#命令规则" class="headerlink" title="命令规则"></a>命令规则</h2><p><code>-</code> 后一般跟短命令选项（通常是单字母，也有一些命令是例外的）；<code>--</code> 后一般跟长命令选项。</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><table><thead><tr><th align="left">命令</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">cd ~</td><td align="left">进入用户主目录</td></tr><tr><td align="left">pwd</td><td align="left">查看当前路径</td></tr><tr><td align="left">ls</td><td align="left">显示文件和目录</td></tr><tr><td align="left">mkdir dir1</td><td align="left">创建一个叫做 ‘dir1’ 的目录</td></tr><tr><td align="left">rm -f file1</td><td align="left">删除一个叫做 ‘file1’ 的文件</td></tr><tr><td align="left">rmdir dir1</td><td align="left">删除一个叫做 ‘dir1’ 的目录’</td></tr><tr><td align="left">mv dir1 new_dir</td><td align="left">重命名/移动一个目录</td></tr><tr><td align="left">cp file1 ./</td><td align="left">复制一个文件到当前目录</td></tr><tr><td align="left">cat 文件名.后缀</td><td align="left">显示文件内容</td></tr><tr><td align="left">tail -f ./debug.log</td><td align="left">实时查看文件中的内容</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>SMB局域网共享</title>
    <url>/posts/66cb4fd3/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><h2 id="共享文件夹并创建映射"><a href="#共享文件夹并创建映射" class="headerlink" title="共享文件夹并创建映射"></a>共享文件夹并创建映射</h2><p>局域网共享先关闭防火墙，避免其他计算机无法访问本机。</p><p>文件夹 -&gt; 右键 -&gt; 属性</p><img src="/posts/66cb4fd3/14.png"><a id="more"></a><p>共享 -&gt; 网络和共享中心</p><img src="/posts/66cb4fd3/16.png"><p>选择来宾和公网选项，启用两个选项，保存更改。</p><img src="/posts/66cb4fd3/15.png"><p>选择共享。</p><img src="/posts/66cb4fd3/17.png"><p>直接点击共享，也可添加 everyone 用户。</p><img src="/posts/66cb4fd3/18.png"><p>点击确定，红框为网络共享路径。</p><img src="/posts/66cb4fd3/19.png"><p>复制共享路径。</p><img src="/posts/66cb4fd3/20.png"><p>我的电脑右键，选择<code>映射网络驱动器</code>选项。</p><img src="/posts/66cb4fd3/21.png"><p>粘贴网络共享路径。</p><img src="/posts/66cb4fd3/22.png"><p>打开我的电脑即可看到网络映射。</p><img src="/posts/66cb4fd3/23.png"><h2 id="删除网络驱动器"><a href="#删除网络驱动器" class="headerlink" title="删除网络驱动器"></a>删除网络驱动器</h2><p>网络映射右键 -&gt; 断开连接</p><img src="/posts/66cb4fd3/24.png"><h2 id="关闭共享"><a href="#关闭共享" class="headerlink" title="关闭共享"></a>关闭共享</h2><p>点击高级共享。</p><img src="/posts/66cb4fd3/25.png"><p>取消共享此文件选项 -&gt; 应用 -&gt; 确定</p><img src="/posts/66cb4fd3/26.png"><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows服务位置</title>
    <url>/posts/12ee053c/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><p>我的电脑 -&gt; 管理</p><img src="/posts/12ee053c/27.png"><p>服务和应用程序 -&gt; 服务</p><img src="/posts/12ee053c/28.png"><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Hosts文件配置</title>
    <url>/posts/86b87c2f/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>将一些常用的网址域名与其对应的 IP 地址建立一个关联“数据库”。当用户在浏览器中输入一个需要登录的网址时，系统会首先自动从 Hosts 文件中寻找对应的IP地址，一旦找到，系统会立即打开对应网页；如果没有找到，则系统会再将网址提交 DNS 域名解析服务器进行 IP 地址的解析。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>路径：C:\Windows\System32\drivers\etc</p><p>配置如下：</p><img src="/posts/86b87c2f/5.png"><p>访问<code>www.baidu.com</code>的时候会默认寻找127.0.0.1（本机）。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>CMD</title>
    <url>/posts/b9fb5e4a/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><table><thead><tr><th align="left">命令</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">path</td><td align="left">检测环境变量。</td></tr><tr><td align="left">盘符:</td><td align="left">进入指定盘(例子：d:进入d盘)。</td></tr><tr><td align="left">cd 文件夹</td><td align="left">进入文件夹。</td></tr><tr><td align="left">ipconfig</td><td align="left">显示当前的 TCP/IP 参数。</td></tr><tr><td align="left">netstat –ano</td><td align="left">查看进程端口。</td></tr><tr><td align="left">cls</td><td align="left">清除cmd记录。</td></tr><tr><td align="left">dir</td><td align="left">显示文件和目录。</td></tr><tr><td align="left">nslookup 域名</td><td align="left">正向解析：通过域名查找ip。补充：域名由主机头（www）+域名名称（baidu）+服务机构（com）组成。</td></tr></tbody></table><a id="more"></a><h2 id="cmd-窗口快捷键"><a href="#cmd-窗口快捷键" class="headerlink" title="cmd 窗口快捷键"></a>cmd 窗口快捷键</h2><table><thead><tr><th align="left">组合键</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">Ctrl+C</td><td align="left">强制终止正在运行的 cmd 命令</td></tr></tbody></table><h2 id="以管理员身份运行-cmd"><a href="#以管理员身份运行-cmd" class="headerlink" title="以管理员身份运行 cmd"></a>以管理员身份运行 cmd</h2><p>找到cmd程序右键即可。</p><img src="/posts/b9fb5e4a/4.png"><h2 id="在任意路径快速打开-cmd"><a href="#在任意路径快速打开-cmd" class="headerlink" title="在任意路径快速打开 cmd"></a>在任意路径快速打开 cmd</h2><p>在路径处敲 CMD，回车即可在此路径快速打开 CMD 窗口。</p><img src="/posts/b9fb5e4a/13.png"><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>batch批处理</title>
    <url>/posts/8bb0ab6c/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>批处理(Batch 简称 BAT)，也称为批处理脚本，应用于 DOS 和 Windows 系统中。</p><p>批处理文件的扩展名为 bat 或 cmd。</p><p>批处理文件包含了大量的基本 DOS 命令，是一种可执行文件。</p><a id="more"></a><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>输出 Hello World 到控制台，pause 将程序暂时挂起。</p><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> Hello World!</span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><table><thead><tr><th align="left">DOS 命令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">关键字 /?</td><td align="left">获取帮助。</td></tr><tr><td align="left">echo</td><td align="left">输出当前的回显状态(是否处于打开状态)。</td></tr><tr><td align="left">echo on</td><td align="left">打开命令的回显。</td></tr><tr><td align="left">echo off</td><td align="left">关闭命令的回显（运行 BAT 脚本不会将 DOS 命令打印到控制台）。</td></tr><tr><td align="left">echo Hello world!</td><td align="left">输出 Hello world! 到控制台。</td></tr><tr><td align="left">@</td><td align="left">如果在某一条命令最前面加上 @ ，那么这一行命令就不会显示出来。</td></tr><tr><td align="left"><code>&gt;</code></td><td align="left">1. 将输出结果打印到某个文件（echo Hello world!&gt;d:\a.txt）。<br>2. 如果以前该文件中已经存在，并且有自己的内容，那么以前的内容就被覆盖掉。</td></tr><tr><td align="left">pause&gt;nul</td><td align="left">1. 表示将 pause 这条命令的输出显示到空设备里，nul 表示为空。<br>2. 用了这条命令后，“按任意键继续…”的提示就不再出现了。</td></tr><tr><td align="left">title</td><td align="left">后面跟字符串可以改变当前命令提示符的标题名称。</td></tr><tr><td align="left">rem</td><td align="left">注释功能，rem 和它后面跟的文字在实际运行时并不会起任何作用。</td></tr><tr><td align="left">::</td><td align="left">注释功能，rem 是一种命令，在 echo on 的情况下会被显示出来，而 :: 却不会。</td></tr><tr><td align="left">set var=Hello world!</td><td align="left">1. 将 Hello world! 赋值到 var 变量中。<br>2. 如果 var 后面有空格，BAT 将这个空格识别为字符串。</td></tr><tr><td align="left"><code>set var=&lt;nul</code></td><td align="left">释放 var 变量。</td></tr><tr><td align="left">set var</td><td align="left">查看 var 变量中的值。</td></tr><tr><td align="left">set v</td><td align="left">可以查看所有以字母 v 开头变量的值。</td></tr><tr><td align="left">set</td><td align="left">直接输入 set 可以查看所有变量的值。</td></tr><tr><td align="left">set var1=%var%</td><td align="left">变量两侧加上百分符号 % 用来表示该变量的值(内容)。</td></tr><tr><td align="left">set /a var=48</td><td align="left">1. 在 set 后面加上 /a 的参数可以给变量赋予一个数值型的值。<br>2. 该数值型的变量是一个 32 位的整数型数值。</td></tr><tr><td align="left">set /p var=请输入一些文字：</td><td align="left">可以显示出一段提示文字“请输入一些文字：”并将用户输入的信息存到变量 var 里。</td></tr><tr><td align="left">echo %var:o=z%</td><td align="left">1. 百分号可以对变量中的字符串有效地进行编辑或变换。<br>2. 语法：<code>%变量:变量中想要被代替的内容=代替的内容%</code><br>3. % 包起来的内容表示变量，所以替换的新值可以赋值给另一个变量。</td></tr><tr><td align="left">%var:~m%</td><td align="left">1. m 为正数，表示取变量 var 中左侧第 m 个字符以后的内容。<br>2. m 为负数，表示取变量 var 中右侧第 m 个字符以后的内容。</td></tr><tr><td align="left">%var:~m,n%</td><td align="left"></td></tr></tbody></table><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>运行指令</title>
    <url>/posts/2ccfb6c2/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><table><thead><tr><th align="left">命令</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">cmd</td><td align="left">打开cmd</td></tr><tr><td align="left">osk</td><td align="left">打开虚拟键盘</td></tr><tr><td align="left">notepad</td><td align="left">打开记事本</td></tr><tr><td align="left">calc</td><td align="left">打开计算器</td></tr><tr><td align="left">firewall.cpl</td><td align="left">打开防火墙设置</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>软件安装路径</title>
    <url>/posts/efc17973/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><h2 id="软件安装在-C-盘还是安装在-D-盘？"><a href="#软件安装在-C-盘还是安装在-D-盘？" class="headerlink" title="软件安装在 C 盘还是安装在 D 盘？"></a>软件安装在 C 盘还是安装在 D 盘？</h2><p>软件一般安装在 C 盘（C 盘的个人文件夹、注册表、系统文件夹里面都存储了这个软件的某些信息），安装在 C 盘便于做备份还原（ghost 备份还原）；游戏、绿色软件安装在 D 盘。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>系统托盘的隐藏和显示</title>
    <url>/posts/6f7fa4d5/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><p>任务栏右键，选择任务栏设置。</p><img src="/posts/6f7fa4d5/1.png"><p>选择箭头所指选项。</p><img src="/posts/6f7fa4d5/2.png"><p>切换按钮即可隐藏和显示系统托盘。</p><img src="/posts/6f7fa4d5/3.png"><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>vim编辑器入门</title>
    <url>/posts/6b8f0853/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><table><thead><tr><th align="left">命令</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">i 键</td><td align="left">插入模式</td></tr><tr><td align="left">: 键</td><td align="left">命令模式</td></tr><tr><td align="left">:wq</td><td align="left">保存并退出</td></tr><tr><td align="left">:q!</td><td align="left">强制退出</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>通过防火墙屏蔽指定IP地址</title>
    <url>/posts/327fe82b/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>出则规则使用来限制对外访问的，也就是说从本机发出的请求。</p><p>入站规则是用来限制远程主机访问本机的服务的。</p><p>规则生效的前提是防火墙处于开启状态。</p><a id="more"></a><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>运行窗口输入 firewall.cpl 回车。</p><p>打开高级设置。</p><img src="/posts/327fe82b/6.png"><p>出站规则 -&gt; 新建规则。</p><img src="/posts/327fe82b/7.png"><p>选择自定义。</p><img src="/posts/327fe82b/8.png"><p>保持默认，一直点下一步，何时应用规则选择公用。</p><img src="/posts/327fe82b/9.png"><p>描述就是规则名称。</p><img src="/posts/327fe82b/10.png"><p>在新建规则右键属性-&gt;选择作用域-&gt;在远程IP地址点击添加按钮-&gt;输入要屏蔽的IP地址即可。</p><img src="/posts/327fe82b/11.png"><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows常用快捷键</title>
    <url>/posts/38844/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><h3 id="Ctrl-组合键"><a href="#Ctrl-组合键" class="headerlink" title="Ctrl 组合键"></a>Ctrl 组合键</h3><table><thead><tr><th align="left">组合键</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">Ctrl+C</td><td align="left">复制</td></tr><tr><td align="left">Ctrl+V</td><td align="left">粘贴</td></tr><tr><td align="left">Ctrl+X</td><td align="left">剪切</td></tr><tr><td align="left">Ctrl+S</td><td align="left">保存</td></tr><tr><td align="left">Ctrl+A</td><td align="left">全选</td></tr><tr><td align="left">Ctrl+鼠标左键</td><td align="left">多选文件</td></tr><tr><td align="left">Ctrl+alt+下</td><td align="left">多选行</td></tr><tr><td align="left">Ctrl+Z</td><td align="left">撤消上一步操作</td></tr><tr><td align="left">Ctrl+Y</td><td align="left">恢复上一步操作</td></tr><tr><td align="left">Ctrl+F</td><td align="left">搜索</td></tr><tr><td align="left">Ctrl+Tab</td><td align="left">切换页面</td></tr><tr><td align="left">Ctrl+W</td><td align="left">关闭当前网页</td></tr><tr><td align="left">Ctrl+shift+esc</td><td align="left">打开任务管理器</td></tr></tbody></table><a id="more"></a><h3 id="win-组合键"><a href="#win-组合键" class="headerlink" title="win 组合键"></a>win 组合键</h3><table><thead><tr><th align="left">组合键</th><th align="left">功能</th><th align="left">补充</th></tr></thead><tbody><tr><td align="left">win+D</td><td align="left">从当前窗口切换到桌面</td><td align="left"></td></tr><tr><td align="left">Win+Tab</td><td align="left">激活任务视图</td><td align="left"></td></tr><tr><td align="left">Win+M</td><td align="left">最小化所有窗口</td><td align="left"></td></tr><tr><td align="left">Win+Shift+M</td><td align="left">还原最小化的窗口</td><td align="left"></td></tr><tr><td align="left">win+L</td><td align="left">锁定当前用户</td><td align="left"></td></tr><tr><td align="left">Win+G</td><td align="left">打开Xbox游戏录制工具栏，供用户录制游戏视频或截屏</td><td align="left"></td></tr><tr><td align="left">win+R</td><td align="left">打开运行界面</td><td align="left"></td></tr><tr><td align="left">win+1</td><td align="left">打开固定在任务栏的第一个程序。</td><td align="left"><kbd>win</kbd>+<kbd>2</kbd> 表示打开任务栏第二个程序，以此类推…</td></tr><tr><td align="left">win+E</td><td align="left">打开我的电脑。</td><td align="left"></td></tr></tbody></table><h3 id="shift-组合键"><a href="#shift-组合键" class="headerlink" title="shift 组合键"></a>shift 组合键</h3><table><thead><tr><th align="left">组合键</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">shift+del</td><td align="left">永久删除文件</td></tr><tr><td align="left">shift+鼠标左键</td><td align="left">多选文件（指定文件到目标文件的所有文件）</td></tr><tr><td align="left">Shift+鼠标右键</td><td align="left">选择在此处打开命令行</td></tr><tr><td align="left">tab</td><td align="left">在选项之间向前移动</td></tr><tr><td align="left">Shift+Tab</td><td align="left">在选项之间向后移动</td></tr><tr><td align="left">Shift+任意字母</td><td align="left">快速切换大小写</td></tr></tbody></table><h3 id="alt-组合键"><a href="#alt-组合键" class="headerlink" title="alt 组合键"></a>alt 组合键</h3><table><thead><tr><th align="left">组合键</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">Alt+Tab</td><td align="left">切换程序</td></tr><tr><td align="left">Alt+双击文件</td><td align="left">查看文件属性</td></tr><tr><td align="left">Alt+空格+C</td><td align="left">关闭窗口</td></tr></tbody></table><h3 id="单键"><a href="#单键" class="headerlink" title="单键"></a>单键</h3><table><thead><tr><th align="left">按键</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">f2</td><td align="left">重命名</td></tr><tr><td align="left">f5</td><td align="left">刷新</td></tr></tbody></table><h3 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h3><table><thead><tr><th align="left">组合键</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left"><kbd>Print Screen</kbd></td><td align="left">截取整个屏幕</td></tr><tr><td align="left">alt+<kbd>Print Screen</kbd></td><td align="left">截取当前窗口</td></tr><tr><td align="left">win+<kbd>Print Screen</kbd></td><td align="left">自动截屏并保存</td></tr><tr><td align="left">alt+A</td><td align="left">微信截屏（前提安装微信客户端）</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器配置</title>
    <url>/posts/15841/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><h2 id="TCP-协议"><a href="#TCP-协议" class="headerlink" title="TCP 协议"></a>TCP 协议</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul><li>TCP 属于传输层协议，是一种面相连接的可靠的协议。</li><li>面向连接是指用户首先必须先建立一个连接（三次握手）,然后用这个连接传输数据,再释放或关闭连接（四次挥手）。</li></ul><h3 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h3><ol><li>第一次握手：建立连接时，客户端发送syn包（syn=x）到服务器，并进入 SYN_SENT 状态，等待服务器确认。</li><li>第二次握手：服务器收到 syn 包，必须确认客户的 SYN（ack=x+1），同时自己也发送一个 SYN 包（syn=y），即 SYN+ACK 包，此时服务器进入 SYN_RECV 状态；</li><li>第三次握手：客户端收到服务器的 SYN+ACK 包，向服务器发送确认包 ACK(ack=y+1），此包发送完毕，客户端和服务器进入 ESTABLISHED（TCP连接成功）状态，完成三次握手。</li></ol><h3 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h3><ol><li>客户端进程发出连接释放报文，并且停止发送数据。</li><li>服务器收到连接释放报文，发出确认报文，ACK=1，ack=u+1，并且带上自己的序列号 seq=v，此时，服务端就进入了 CLOSE-WAIT（关闭等待）状态。</li><li>客户端收到服务器的确认请求后，此时，客户端就进入 FIN-WAIT-2 （终止等待 2）状态，等待服务器发送连接释放报文（在这之前还需要接受服务器发送的最后的数据）。</li><li>服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN=1，ack=u+1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为 seq=w，此时，服务器就进入了 LAST-ACK（最后确认）状态，等待客户端的确认。</li><li>客户端收到服务器的连接释放报文后，必须发出确认，ACK=1，ack=w+1，而自己的序列号是 seq=u+1，此时，客户端就进入了 TIME-WAIT（时间等待）状态。</li><li>服务器只要收到了客户端发出的确认，立即进入 CLOSED 状态。同样，撤销 TCB 后，就结束了这次的 TCP 连接。</li></ol><a id="more"></a><h3 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h3><ul><li>在计算机网络里，有两种常见的参考模型即：OSI 参考模型和 TCP/IP 参考模型。</li><li>由此可见 TCP 本身是传输层的协议， 而 TCP/IP 是一种网络参考模型。</li></ul><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><h3 id="域名组成"><a href="#域名组成" class="headerlink" title="域名组成"></a>域名组成</h3><p>域名由主机头（www）+域名名称（baidu）+服务机构（com）组成。</p><h3 id="记录类型"><a href="#记录类型" class="headerlink" title="记录类型"></a>记录类型</h3><table><thead><tr><th align="left">参数</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left"><strong>A</strong></td><td align="left">将域名指向一个IP地址，就需要添加A记录。</td></tr><tr><td align="left"><strong>CNAME</strong></td><td align="left">将域名指向另一个域名，再由另一个域名提供ip地址。</td></tr><tr><td align="left">AAAA</td><td align="left">指定主机名（域名）对应的IPv6地址（例如：ff06:0:0:0:0:0:0:c3）记录。</td></tr><tr><td align="left">MX</td><td align="left">如果需要设置邮箱，让邮箱能收到邮件，就需要添加MX记录。</td></tr><tr><td align="left">NS</td><td align="left">域名服务器记录，如果需要把子域名交给其他DNS服务商解析，就需要添加NS记录。</td></tr><tr><td align="left">TXT</td><td align="left">可以填写任何东西，长度限制255。绝大多数的TXT记录是用来做SPF记录（反垃圾邮件）。</td></tr><tr><td align="left">显性URL</td><td align="left">从一个地址301重定向到另一个地址的时候，就需要添加显性URL记录（注：DNSPod目前只支持301重定向）。</td></tr><tr><td align="left">隐性URL</td><td align="left">类似于显性URL，区别在于隐性URL不会改变地址栏中的域名。</td></tr><tr><td align="left">SRV</td><td align="left">记录了哪台计算机提供了哪个服务。格式为：<code>服务的名字 + 点 + 协议的类型</code>，例如：_xmpp-server._tcp。</td></tr></tbody></table><h3 id="主机记录"><a href="#主机记录" class="headerlink" title="主机记录"></a>主机记录</h3><table><thead><tr><th align="left">参数</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">www</td><td align="left">解析后的域名为：<a href="http://www.xxx.com" target="_blank" rel="noopener">www.xxx.com</a></td></tr><tr><td align="left">@</td><td align="left">直接解析主域名：xxx.com</td></tr><tr><td align="left">*</td><td align="left">泛解析，匹配其他所有域名：*.1756260160.com</td></tr></tbody></table><h3 id="CNAME"><a href="#CNAME" class="headerlink" title="CNAME"></a>CNAME</h3><ul><li>CNAME 被称为规范名字，这种记录允许您将多个域名映射到同一台计算机。</li><li>默认情况下，服务器是允许CNAME访问的。</li><li>一般网站都做了 CNAME 访问策略。</li></ul><h3 id="线路"><a href="#线路" class="headerlink" title="线路"></a>线路</h3><p>让指定线路的用户访问这个IP。</p><table><thead><tr><th align="left">参数</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">默认</td><td align="left">必须添加，否则只有单独指定的线路才能访问您的网站（如果双线解析，建议「默认」线路填写「电信IP」）。</td></tr><tr><td align="left">联通</td><td align="left">单独为「联通用户」指定服务器 IP，其他用户依然访问「默认」。</td></tr><tr><td align="left">搜索引擎</td><td align="left">指定一个服务器 IP 让蜘蛛抓取。</td></tr></tbody></table><h3 id="记录值"><a href="#记录值" class="headerlink" title="记录值"></a>记录值</h3><table><thead><tr><th align="left">记录类型</th><th align="left">记录值</th></tr></thead><tbody><tr><td align="left">A</td><td align="left">填写您服务器 IP。</td></tr><tr><td align="left">CNAME</td><td align="left">填写域名。</td></tr><tr><td align="left">MX</td><td align="left">填写邮件服务器提供的 IP 和 域名。</td></tr><tr><td align="left">TXT</td><td align="left">一般用于 Google、QQ等企业邮箱的反垃圾邮件设置。</td></tr><tr><td align="left">显性URL</td><td align="left">填写要跳转到的网址。</td></tr><tr><td align="left">隐性URL</td><td align="left">填写要引用内容的网址。</td></tr><tr><td align="left">AAAA</td><td align="left">填写 IPv6 地址。</td></tr><tr><td align="left">NS</td><td align="left">系统默认添加的两个NS记录请不要修改。NS向下授权，填写dns域名。</td></tr><tr><td align="left">SRV</td><td align="left">格式为：<code>优先级 空格 权重 空格 端口 空格 主机名</code>，记录生成后会自动在域名后面补一个<code>.</code>。</td></tr></tbody></table><h3 id="MX优先级"><a href="#MX优先级" class="headerlink" title="MX优先级"></a>MX优先级</h3><ul><li>首先，如果只有一条 MX 记录，谈优先级是没有意义的，当存在多条 MX 记录时优先级才会有意义。</li><li>MX 优先级是指指定邮件服务器接收邮件的先后顺序（1-50），一般 MX 优先级默认设置为 5、10、15 等（数值越小优先级越高）。</li></ul><h3 id="TTL"><a href="#TTL" class="headerlink" title="TTL"></a>TTL</h3><p>即 Time To Live，缓存的生存时间。指地方dns缓存您域名记录信息的时间，缓存失效后会再次到DNSPod获取记录值。数值越小，修改记录生效时间越快。</p><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">600（10分钟）</td><td align="left">建议正常情况下使用 600。</td></tr><tr><td align="left">60（1分钟）</td><td align="left">如果您经常修改IP，修改记录一分钟即可生效。长期使用 60，解析速度会略受影响。</td></tr><tr><td align="left">3600（1小时）</td><td align="left">如果您IP极少变动（一年几次），建议选择 3600，解析速度快。如果要修改IP，提前一天改为 60，即可快速生效。</td></tr></tbody></table><h2 id="URI、URL-与-URN"><a href="#URI、URL-与-URN" class="headerlink" title="URI、URL 与 URN"></a>URI、URL 与 URN</h2><h3 id="URI"><a href="#URI" class="headerlink" title="URI"></a>URI</h3><ul><li>统一资源标识符（Uniform Resource Identifier，URI)是一个用于标识某一互联网资源名称的字符串。</li><li>该种标识允许用户对任何（包括本地和互联网）的资源通过特定的协议进行交互操作。</li><li>URI 通常由三部分组成：<ol><li>问资源的命名机制。</li><li>存放资源的主机名。</li><li>资源自身的名称，由路径表示，着重强调于资源。</li></ol></li></ul><h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><ul><li>URL 是 URI 的一个子集，它是 Uniform Resource Locator 的缩写，译为“统一资源定位符”。</li><li>URL 一般由三部组成：<ol><li>协议(或称为服务方式)。</li><li>存有该资源的主机 IP 地址(有时也包括端口号)。</li><li>主机资源的具体地址，如目录和文件名等。</li></ol></li><li>URL 定义了该如何访问资源，URL 是一种具体的 URI，它是 URI 的一个子集，它不仅唯一标识资源，而且还提供了定位该资源的信息。</li><li>URI 是一种语义上的抽象概念，可以是绝对的，也可以是相对的，而 URL 则必须提供足够的信息来定位，是绝对的。</li></ul><h3 id="URN"><a href="#URN" class="headerlink" title="URN"></a>URN</h3><ul><li><p>URN，uniform resource name，统一资源命名，是通过名字来标识资源。</p></li><li><p>书籍的 ISBN 码和产品在系统内的序列号，尽管没有告诉你用什么方式或者到什么地方去找到目标，但是你有足够的信息来检索到它。</p></li><li><p>URL 是 URI 的子集，所有的 URL 都是 URI，但不是每个 URI 都是 URL，还有可能是 URN。</p><img src="30.png" width="40%"></li><li><p>使用 URN，就可以将资源四处迁移，而不用担心迁移后无法访问。</p></li><li><p>P2P 下载中使用的磁力链接是 URN 的一种实现，它可以持久化的标识一个 BT 资源，资源分布式的存储在 P2P 网络中，无需中心服务器用户即可找到并下载它。</p></li></ul><h1 id="服务器基本概念"><a href="#服务器基本概念" class="headerlink" title="服务器基本概念"></a>服务器基本概念</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li>服务器究其根本就是电脑，是提供服务（例如安装 Apache/Tomcat 提供 HTTP 服务）的设备。</li><li>一般服务器默认对上传文件存在大小限制，如果要上传大文件需要修改服务器配置。</li></ul><h2 id="服务器类型"><a href="#服务器类型" class="headerlink" title="服务器类型"></a>服务器类型</h2><table><thead><tr><th align="left">服务器类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">Web 服务器</td><td align="left">只能解析静态页面，即 html 页面，它请求的路径是固定的。</td></tr><tr><td align="left">应用服务器</td><td align="left">应用服务器是指通过各种协议把商业逻辑曝露给客户端的程序。</td></tr><tr><td align="left">Web 应用服务器</td><td align="left">可以解析动态的 jsp 页面，即它请求的路径是动态生成的，负责的是请求的逻辑处理。</td></tr></tbody></table><h1 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h1><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><p>Apache 是世界使用排名第一的 Web 服务器软件。</p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ol><li><p><a href="http://www.apache.org/" target="_blank" rel="noopener">进入 Apache 官网地址</a></p></li><li><p>点击如图链接。<br><img src="1.png" alt></p></li><li><p>找到httpd目录。</p><p><img src="2.png" alt></p></li><li><p>点击下方链接。</p><p><img src="3.png" alt></p></li><li><p>选择Windows。</p><img src="4.png" width="50%"></li><li><p>选择第一种下载方式。</p><img src="5.png" width="40%"></li><li><p>点击图标下载64位，下方为32位。</p><img src="6.png" width="50%"><ul><li><p>Apache VC14代表什么意思？</p><ul><li>这个版本的Apache是基于VC14的控件库编写，所以电脑要安装相应的控件库才能运行。</li></ul></li></ul></li><li><p>配置httpd.conf文件，位置在Apache根目录下的conf目录。</p><img src="7.png" width="50%"></li><li><p>这是Apache的存放目录。我这里保持默认，如果安装目录名称不是Apache24记得修改。</p><img src="8.png" width="50%"></li><li><p>这是Apache占用端口，默认80。</p><img src="9.png" width="50%"></li><li><p>以<strong>管理员身份</strong>打开cmd，进入bin目录，输入<code>&quot;httpd.exe -k install -n apache&quot;</code>命令安装Apache服务。</p><img src="12.png" width="50%"><ul><li><p>出现上图信息证明安装成功。</p></li><li><p>该命令的意思是，安装apache服务，并将该服务名称命名为apache。</p></li><li><p>如果出现下图信息则要以<strong>管理员身份</strong>打开cmd。</p><img src="11.png" width="75%"></li></ul></li></ol><h2 id="启动与关闭"><a href="#启动与关闭" class="headerlink" title="启动与关闭"></a>启动与关闭</h2><h3 id="通过命令行方式启动关闭-Apache"><a href="#通过命令行方式启动关闭-Apache" class="headerlink" title="通过命令行方式启动关闭 Apache"></a>通过命令行方式启动关闭 Apache</h3><table><thead><tr><th align="left">命令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">httpd.exe -k start</td><td align="left">启动已安装的Apache服务。</td></tr><tr><td align="left">httpd.exe -k restart</td><td align="left">重启已安装的Apache服务。</td></tr><tr><td align="left">httpd.exe -k stop | httpd.exe -k shutdown</td><td align="left">停止已安装的Apache服务。</td></tr></tbody></table><h3 id="利用Apache自带软件启动关闭Apache。"><a href="#利用Apache自带软件启动关闭Apache。" class="headerlink" title="利用Apache自带软件启动关闭Apache。"></a>利用Apache自带软件启动关闭Apache。</h3><p>软件在 bin 目录下，打开软件即可控制 Apache。</p><img src="13.png" width="25%"><h2 id="通过-CMD-命令卸载"><a href="#通过-CMD-命令卸载" class="headerlink" title="通过 CMD 命令卸载"></a>通过 CMD 命令卸载</h2><ol><li><code>httpd.exe -k uninstall -n &quot;apache&quot;</code> 移除特定的 Apache 服务，apache 是 Apache 服务器的服务名。</li><li><code>sc delete apache</code> 从注册表中删除服务子项。</li></ol><h2 id="Apache-根目录下的各个文件的用途"><a href="#Apache-根目录下的各个文件的用途" class="headerlink" title="Apache 根目录下的各个文件的用途"></a>Apache 根目录下的各个文件的用途</h2><img src="14.png" width="40%"><h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h2 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h2><ul><li>Nginx 是一款是由俄罗斯的程序设计师 Igor Sysoev 所开发高性能的 Web 和反向代理服务器，也是一个 IMAP/POP3/SMTP 代理服务器。</li><li>在高连接并发的情况下，Nginx 是 Apache 服务器不错的替代品。</li></ul><h2 id="官网地址"><a href="#官网地址" class="headerlink" title="官网地址"></a>官网地址</h2><ol><li><p><a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">Nginx 官网地址</a></p></li><li><p>选择 Windows 稳定版。</p><img src="16.png" width="50%"></li></ol><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><p>在 nginx 根目录执行如下命令。</p><img src="15.png" width="25%"><ul><li>建议使用命令启动 nginx 服务器。</li><li>也可以双击根目录下 nginx.exe 文件启动服务器（不建议）。</li></ul><h2 id="基础模块"><a href="#基础模块" class="headerlink" title="基础模块"></a>基础模块</h2><h3 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...              #全局块</span><br><span class="line"></span><br><span class="line">events &#123;         #events块</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http      #http块</span><br><span class="line">&#123;</span><br><span class="line">    ...   #http全局块</span><br><span class="line">    server        #server块</span><br><span class="line">    &#123; </span><br><span class="line">        ...       #server全局块</span><br><span class="line">        location [PATTERN]   #location块</span><br><span class="line">        &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        location [PATTERN] </span><br><span class="line">        &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    server</span><br><span class="line">    &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...     #http全局块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基础模块说明"><a href="#基础模块说明" class="headerlink" title="基础模块说明"></a>基础模块说明</h3><table><thead><tr><th align="left">模块名称</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">全局块</td><td align="left">配置影响 nginx 全局的指令。</td></tr><tr><td align="left">events 块</td><td align="left">配置影响 nginx 服务器或与用户的网络连接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等。</td></tr><tr><td align="left">http 块</td><td align="left">可以嵌套多个 server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。如文件引入，mime-type 定义，日志自定义，是否使用 sendfile 传输文件，连接超时时间，单连接请求数等。</td></tr><tr><td align="left">server 块</td><td align="left">配置虚拟主机的相关参数，一个 http 中可以有多个 server。</td></tr><tr><td align="left">location 块</td><td align="left">配置请求的路由，以及各种页面的处理情况。</td></tr></tbody></table><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="反向代理和负载均衡"><a href="#反向代理和负载均衡" class="headerlink" title="反向代理和负载均衡"></a>反向代理和负载均衡</h3><h4 id="模块介绍"><a href="#模块介绍" class="headerlink" title="模块介绍"></a>模块介绍</h4><h5 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h5><ul><li>proxy_pass 为反向代理模块。</li><li>代理服务器接受网络上的请求，然后将请求转发给被代理的服务器（可以是内网主机或公网主机），并将从服务器上得到的结果返回给客户端。</li><li>反向代理服务器和目标服务器对外就是一个服务器，暴露的是代理服务器地址，隐藏了真实服务器IP地址。</li><li>可以利用反向代理特性（隐藏真实服务器的域名或 IP 地址）解决浏览器跨域问题。</li></ul><h5 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h5><ul><li>upstream 为负载均衡模块。</li><li>简单而言就是当有 2 台或以上服务器时，根据规则随机的将请求分发到指定的服务器上处理。</li></ul><h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><ol><li><p>打开 Nginx 根目录下的 conf/nginx.conf 文件。</p></li><li><p>在 http 模块下添加 upstream 模块。</p><img src="25.png" width="50%"><ul><li>upstream 对应的名字为 upstream 模块名，示例中的 localhost 可以改为其他任意名字，例如：abc。</li><li>upstream 模块可以包含一个或多个 server 模块，一个 server 模块对应一个主机地址。</li><li>其中 server 中对应的值可以是域名或 IP 地址，不能包含 http 关键字或磁盘路径。</li><li>这样 upstream 模块名就可以表示一个或多个主机地址，负载均衡配置完毕。</li></ul></li><li><p>在 http 模块下添加如下配置。</p><img src="22.png" width="40%"><ul><li>这段配置表示导入 vhost 目录下的任意名字的 conf 文件。</li></ul></li><li><p>在 conf 目录下添加 vhost 目录。</p><img src="23.png" width="50%"></li><li><p>在 vhost 目录下添加后缀为 conf 的文件，内容如下：</p><img src="24.png" width="50%"><ul><li>listen 为虚拟主机端口号。</li><li>server_name 为域名。</li><li>当 nginx 接受到请求后，会匹配其配置中的 service 模块。</li><li>匹配方法就是靠请求携带的 host 和 port 正好对应其配置中的 server_name 和 listen。</li><li>proxy_pass 配置参数为 URL。<ul><li>URL 中的主机地址必须和 upstream 中的模块名一样，才能读取 upstream 中的 server 模块配置的主机地址。</li><li>例如 upstream 模块名为 abc，server 模块中 proxy_pass 对应的参数为 <code>http://abc/</code>。</li><li>示例为 localhost，proxy_pass 对应配置参数为 <code>http://localhost/</code>。</li><li>proxy_pass 可以直接配置域名，不读取 upstream 模块的配置参数，例如：<code>https://www.baidu.com/</code>，反向代理配置完毕。</li></ul></li><li>proxy_connect_timeout 超时时间。</li></ul></li><li><p>nginx -s reload 重启 Nginx 服务器更新配置（命令提示框没有什么报错信息代表重启成功）。</p></li><li><p>访问 <code>http://localhost</code> 会正常访问欢迎页。</p><ul><li>本机的 8080 端口配置 http 服务，而 8088 端口没有配置 http 服务。</li><li>但是访问 <code>http://localhost</code> 的时候，也不会有问题，会将请求默认转发到 <code>http://localhost:8080</code>。</li><li>说明负载均衡的时候有一台服务器挂掉，请求会转发到正常工作的服务器。</li></ul></li></ol><h3 id="localtion"><a href="#localtion" class="headerlink" title="localtion"></a>localtion</h3><table><thead><tr><th align="left">配置</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">location /</td><td align="left">通用匹配，任何未匹配到其他location的请求都会匹配到。</td></tr><tr><td align="left">location /uri</td><td align="left">不带任何修饰符，表示前缀匹配。</td></tr><tr><td align="left">location = /uri</td><td align="left">= 开头表示精确前缀匹配，只有完全匹配才能生效。</td></tr><tr><td align="left">location ^~ /uri</td><td align="left">^~ 开头表示普通字符串匹配上以后不再进行正则匹配。</td></tr><tr><td align="left">location ~ pattern</td><td align="left">~ 开头表示区分大小写的正则匹配。</td></tr><tr><td align="left">location ~* pattern</td><td align="left">~* 开头表示不区分大小写的正则匹配。</td></tr></tbody></table><h3 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h3><img src="27.png" width="40%"><ul><li>root 指定网站默认根目录，root 可以作用在 server 块或 location 块。</li><li>静态资源默认存放在 nginx 根目录下 html 目录。</li><li>index 指定默认加载网页。</li></ul><h3 id="目录浏览"><a href="#目录浏览" class="headerlink" title="目录浏览"></a>目录浏览</h3><h4 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location /download &#123;</span><br><span class="line">    root /home/map/www/;</span><br><span class="line">    autoindex on;</span><br><span class="line">    autoindex_format html;</span><br><span class="line">    autoindex_exact_size off;</span><br><span class="line">    autoindex_localtime on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><table><thead><tr><th align="left">参数</th><th align="left">示例</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">autoindex</td><td align="left">on | off</td><td align="left">打开关闭目录浏览功能。</td></tr><tr><td align="left">autoindex_format</td><td align="left">html、xml、json、jsonp</td><td align="left">设置展示目录风格。</td></tr><tr><td align="left">autoindex_exact_size</td><td align="left">on | off</td><td align="left">是否显示文件字节数。</td></tr><tr><td align="left">autoindex_localtime</td><td align="left">on | off</td><td align="left">是否以服务器的文件时间作为显示的时间。</td></tr></tbody></table><h3 id="多虚拟机共用端口"><a href="#多虚拟机共用端口" class="headerlink" title="多虚拟机共用端口"></a>多虚拟机共用端口</h3><p>nginx 可以配置多个虚拟机共用 80 端口。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;         </span><br><span class="line">    listen 80;</span><br><span class="line">    server_name apitest.aa.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://10.26.31.176:8081; ;</span><br><span class="line">        root html;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;         </span><br><span class="line">    listen 80;</span><br><span class="line">    server_name api.aa.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://10.26.31.176:8080;</span><br><span class="line">        root html;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运用 nginx 虚拟机特性，就算一台服务器也可以本地配置多个网站。</li><li>多个网站分别在不同目录，例如：A 网站的本地路劲为 html/a，B 网站的本地路径为 html/b。</li><li>根据不同的域名区分 A 和 B 网站，而且 A 和 B 网站共用 80 端口。</li><li>示例中由于反向代理远程主机，两个站点目录都在 nginx 根目录下的 html 目录。</li></ul><h3 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h3><h4 id="拓扑图"><a href="#拓扑图" class="headerlink" title="拓扑图"></a>拓扑图</h4><p>此拓扑图采用动静分离的思想。</p><img src="28.png" width="50%"><h4 id="配置-3"><a href="#配置-3" class="headerlink" title="配置"></a>配置</h4><p>静态文件都会到本地 /Users/dalaoyang/Downloads/static 目录下去找，直接通过 nginx 返回这些资源。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       10000;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://localhost:8888;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        &#125;</span><br><span class="line">        location ~ .*\.(html|htm|gif|jpg|jpeg|bmp|png|ico|js|css)$ &#123;</span><br><span class="line">            root /Users/dalaoyang/Downloads/static;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>示例中 html、htm、gif、jpg、jpeg、bmp、png、ico、js、css 会由 nginx 直接返回。</li><li>其他资源请求会转发到本地 8888 端口的服务器处理。</li></ul><h3 id="轮询机制"><a href="#轮询机制" class="headerlink" title="轮询机制"></a>轮询机制</h3><h4 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h4><p>当 weight 不指定时，各服务器 weight 相同， 每个请求按时间顺序逐一分配到不同的后端服务器。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">upstream bakend &#123;</span><br><span class="line">    server 192.168.1.10;</span><br><span class="line">    server 192.168.1.11;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果后端服务器 down 掉，能自动剔除。</li></ul><h4 id="权重"><a href="#权重" class="headerlink" title="权重"></a>权重</h4><p>指定轮询几率，weight 和访问比率成正比，用于后端服务器性能不均的情况。</p><img src="18.png" width="50%"><ul><li>那么 10 次一般只会有 1 次会访问到 8081，而有 9 次会访问到 8080。</li></ul><h4 id="ip-hash"><a href="#ip-hash" class="headerlink" title="ip_hash"></a>ip_hash</h4><p>上面的 2 种方式都有一个问题，那就是下一个请求来的时候请求可能分发到另外一个服务器，当我们的程序不是无状态的时候（采用了 session 保存数据），这时候就有一个很大的很问题了，比如把登录信息保存到了 session 中，那么跳转到另外一台服务器的时候就需要重新登录了，所以很多时候我们需要一个客户只访问一个服务器，那么就需要用 iphash 了，iphash 的每个请求按访问 ip 的 hash 结果分配，这样每个访客固定访问一个后端服务器，可以解决 session 的问题。</p><img src="19.png" width="50%"><h4 id="fair"><a href="#fair" class="headerlink" title="fair"></a>fair</h4><p>按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p><img src="20.png" width="50%"><ul><li>需要安装第三方模块才能生效。</li></ul><h4 id="url-hash"><a href="#url-hash" class="headerlink" title="url_hash"></a>url_hash</h4><p>按访问 url 的 hash 结果来分配请求，使每个 url 定向到同一个后端服务器，后端服务器为缓存时比较有效。</p><img src="21.png" width="50%"><ul><li>在 upstream 中加入 hash 语句，server 语句中不能写入 weight 等其他的参数，hash_method 是使用的 hash 算法。</li><li>需要安装第三方模块才能生效。</li></ul><h3 id="expires-缓存"><a href="#expires-缓存" class="headerlink" title="expires 缓存"></a>expires 缓存</h3><h4 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h4><p>在访问量比较大的网站中，利用客户端来缓存网站上不经常变更的图片，是给服务器减压的一个很方便且实用的做法。</p><h4 id="参数说明-1"><a href="#参数说明-1" class="headerlink" title="参数说明"></a>参数说明</h4><p>格式 | 说明<br>30s | 表示把数据缓存 30 秒。<br>30m | 表示把数据缓存 30 分。<br>10h | 表示把数据缓存 10 小时。<br>1d | 表示把数据缓存 1 天。</p><h4 id="配置-4"><a href="#配置-4" class="headerlink" title="配置"></a>配置</h4><p>静态资源缓存 3 天。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location ~* \.(gif|jpg|jpeg|png) &#123;</span><br><span class="line">    root /var/mywww/html/public/;</span><br><span class="line">    expires 3d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h3><h4 id="介绍-4"><a href="#介绍-4" class="headerlink" title="介绍"></a>介绍</h4><ul><li><p>gzip 是 nginx 服务器的 ngx_http_gzip_module 模块提供的在线实时数据压缩功能。</p></li><li><p>通过开启 gzip 功能，可对服务器响应的数据进行压缩处理，变成体积更小的二进制文件。</p></li><li><p>在高PV的网站应用中，可以节省海量的带宽。</p></li><li><p>客户端浏览器发出的请求头中声明了支持 gzip 类型的压缩文件，若服务器端开启了 gzip 压缩功能，那么响应数据会经过压缩后再返回客户端，由客户端负责解压缩再渲染。</p><img src="29.png" width="50%"></li><li><p>一般情况下，不建议对图片、mp3等二进制文件配置压缩，因为二进制文件的压缩率比较小，但耗费的 cpu 资源却很高。</p></li></ul><h4 id="配置-5"><a href="#配置-5" class="headerlink" title="配置"></a>配置</h4><p>gzip 压缩可以配置 http、server 和 location 模块下。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name test.com www.test.com;</span><br><span class="line">        root /webroot/www;</span><br><span class="line">        location ~ .*\.(jpg|gif|png|bmp)$ &#123;</span><br><span class="line">                gzip on;</span><br><span class="line">                gzip_http_version 1.1;</span><br><span class="line">                gzip_comp_level 3;</span><br><span class="line">                gzip_types text/plain application/json application/x-javascript application/css application/xml application/xml+rss text/javascript application/x-httpd-php image/jpeg image/gif image/png image/x-ms-bmp;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="参数说明-2"><a href="#参数说明-2" class="headerlink" title="参数说明"></a>参数说明</h4><table><thead><tr><th align="left">参数</th><th align="left">示例</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">gzip</td><td align="left">on | off</td><td align="left">是否开启 gzip。</td></tr><tr><td align="left">gzip_buffers</td><td align="left">32 4K | 16 8K</td><td align="left">缓冲（压缩数据缓冲在内存中，当达到N块内存，每块MK时，输出缓存）。</td></tr><tr><td align="left">gzip_comp_level</td><td align="left">[1-9]</td><td align="left">压缩级别，级别越高，压缩比越大，越消耗 CPU 资源，推荐 6。</td></tr><tr><td align="left">gzip_disable</td><td align="left"></td><td align="left">指定不进行 gzip 压缩的 uri。</td></tr><tr><td align="left">gzip_min_length</td><td align="left">200</td><td align="left">启用 gzip 压缩的最小文件，小于设置值的文件将不会压缩。</td></tr><tr><td align="left">gzip_http_version</td><td align="left">1.0 | 1.1</td><td align="left">指定进行压缩的最小 http 协议版本。</td></tr><tr><td align="left">gzip_proxied</td><td align="left"></td><td align="left">如果请求者是代理服务器，该如何缓存。</td></tr><tr><td align="left">gzip_types</td><td align="left">text/plain application/xml</td><td align="left">指定要压缩的文件的类型（mime.types），多种类型用空格隔开。</td></tr><tr><td align="left">gzip_vary</td><td align="left">on | off</td><td align="left">是否在 http header 中添加 Vary: Accept-Encoding，建议开启。</td></tr></tbody></table><h3 id="健康检测"><a href="#健康检测" class="headerlink" title="健康检测"></a>健康检测</h3><h4 id="被动检测"><a href="#被动检测" class="headerlink" title="被动检测"></a>被动检测</h4><h5 id="介绍-5"><a href="#介绍-5" class="headerlink" title="介绍"></a>介绍</h5><ul><li>当 Nginx 认为一台应用服务器不能被访问的时候，它会暂时停止向这台应用上面分发请求。</li><li>直到 Nginx 认为该应用服务器可以再次被访问的时候才会再向这台应用服务器上面分发请求。</li></ul><h5 id="参数说明-3"><a href="#参数说明-3" class="headerlink" title="参数说明"></a>参数说明</h5><ul><li><p>max_fails</p><ol><li>设置访问失败的最大次数。</li><li>当 Nginx 向一台服务器分发请求，如果失败的次数达到该参数设置的数量，则 Nginx 认为该应用服务器不能访问。</li><li>在接下来的请求就不会再发给该应用服务器，直到达到 fail_timeout 设置的时间才会再次向这台应用分发请求。</li></ol></li><li><p>fail_timeout</p><ol><li>该参数表示停止分发请求至该应用服务器的时间。</li><li>如果 Nginx 认为一台应用服务器不能被访问了，则Nginx就会停止向这台应用服务器上分发请求。</li><li>那需要多长时间 Nginx 才会认为该服务器可以被访问从而向其分发请求呢？这就需要通过该参数来设置这个时间了。</li></ol></li><li><p>fail_timeout 和 max_fails 的默认值分别为 10s 和 1 次。</p></li></ul><h5 id="配置-6"><a href="#配置-6" class="headerlink" title="配置"></a>配置</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    upstream onmpw &#123;</span><br><span class="line">        server 192.168.144.128;</span><br><span class="line">        server 192.168.144.132 max_fails=3 fail_timeout=30s;</span><br><span class="line">        server 192.168.144.131 max_fails=2;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://onmpw;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="主动监测"><a href="#主动监测" class="headerlink" title="主动监测"></a>主动监测</h4><ul><li>由 Nginx 定期的向每台应用服务器发送特殊的请求，来监测应用服务器是否可以正常访问，这种方式称为主动监测。</li><li>需要指出的是，主动检测指令 health_check 目前只有 nginx 商业版本才提供。</li></ul><h3 id="return-指令"><a href="#return-指令" class="headerlink" title="return 指令"></a>return 指令</h3><p>return 指令可以写在 server、location、if 里面。</p><table><thead><tr><th align="left">语法</th><th align="left">示例</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>return code [text];</code></td><td align="left"><code>return 200 &quot;ok&quot;;</code></td><td align="left">会直接向响应 ok 回去。</td></tr><tr><td align="left"><code>return code URL;</code></td><td align="left"><code>return 301 http://www.baidu.com;</code></td><td align="left">301 重定向。</td></tr><tr><td align="left"><code>return URL;</code></td><td align="left"><code>return http://www.baidu.com</code></td><td align="left">使用默认返回码 302 重定向。</td></tr></tbody></table><h3 id="防盗链"><a href="#防盗链" class="headerlink" title="防盗链"></a>防盗链</h3><h4 id="盗链定义"><a href="#盗链定义" class="headerlink" title="盗链定义"></a>盗链定义</h4><ul><li>此内容不在自己服务器上，而通过技术手段，绕过别人放广告有利益的最终页，直接在自己的有广告有利益的页面上向最终用户提供此内容。</li><li>常常是一些名不见经传的小网站来盗取一些有实力的大网站的地址（比如一些音乐、图片、软件的下载地址）然后放置在自己的网站中，通过这种方法盗取大网站的空间和流量。</li><li>这些非法访问并不会给网站带来利益或好处，相反，这会浪费网站的带宽，增加服务器的连接压力。</li></ul><h4 id="防盗链原理"><a href="#防盗链原理" class="headerlink" title="防盗链原理"></a>防盗链原理</h4><ul><li>referer 是 http 请求头中的一部分，当浏览器向 Web 服务器发出请求时，一般会带上这个属性用来表明网页的来源。</li><li>防盗链的基本原理就是根据请求头中 referer 属性得到网页来源，从而实现访问控制。</li></ul><h4 id="配置-7"><a href="#配置-7" class="headerlink" title="配置"></a>配置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location ~* \.(gif|jpg|png|swf|flv)$ &#123; </span><br><span class="line">    valid_referers none blocked www.jzxue.com jzxue.com ; </span><br><span class="line">    if ($invalid_referer) &#123; </span><br><span class="line">        rewrite ^/ http://www.jzxue.com/retrun.html; </span><br><span class="line">        #return 403; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>nginx 会通过查看 referer 字段和 valid_referers 后面的 referer 列表进行匹配，如果匹配到了就 invalid_referer 字段值为 0 否则设置该值为 1。</li><li>none 代表请求头中没有 referer 信息，这一般是直接在浏览器输入图片网址。</li><li>blocked 代表被防火墙过滤标记过的请求。</li><li>如果匹配不到通过 rewrite 指令直接重定向到 <code>http://www.jzxue.com/retrun.html</code> 或者直接返回 403。</li></ul><h3 id="并发模型"><a href="#并发模型" class="headerlink" title="并发模型"></a>并发模型</h3><h4 id="介绍-6"><a href="#介绍-6" class="headerlink" title="介绍"></a>介绍</h4><h5 id="基础说明"><a href="#基础说明" class="headerlink" title="基础说明"></a>基础说明</h5><ul><li>nginx 中包含 epoll、poll、select、devpoll、kqueue、iocp 等不同的 IO 处理函数。</li><li>你不知道 Nginx 该使用哪种轮询方法的话，它会选择一个最适合你操作系统的。</li></ul><h5 id="select"><a href="#select" class="headerlink" title="select"></a>select</h5><ul><li>它仅仅知道了，有 I/O 事件发生了，却并不知道是哪那几个流（可能有一个，多个，甚至全部），我们只能无差别轮询所有流，找出能读出数据，或者写入数据的流，对他们进行操作。</li><li>所以 select 具有 O(n) 的无差别轮询复杂度，同时处理的流越多，无差别轮询时间就越长。</li></ul><h5 id="poll"><a href="#poll" class="headerlink" title="poll"></a>poll</h5><ul><li>poll 本质上和 select 没有区别，它将用户传入的数组拷贝到内核空间，然后查询每个fd对应的设备状态。</li><li>但是它没有最大连接数的限制，原因是它是基于链表来存储的。</li></ul><h5 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h5><ul><li>epoll 可以理解为 event poll，不同于忙轮询和无差别轮询，epoll 会把哪个流发生了怎样的 I/O 事件通知我们。</li><li>所以我们说 epoll 实际上是事件驱动（每个事件关联上fd）的，此时我们对这些流的操作都是有意义的（复杂度降低到了O(1)）。</li></ul><h4 id="配置-8"><a href="#配置-8" class="headerlink" title="配置"></a>配置</h4><p>我们也可以使用 use 指令在配置文件中显式地定义某个并发模型。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">events &#123;</span><br><span class="line">    use epoll;</span><br><span class="line">｝</span><br></pre></td></tr></table></figure><h1 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h1><h2 id="介绍-7"><a href="#介绍-7" class="headerlink" title="介绍"></a>介绍</h2><p>由 Apache 组织提供的一种 Web 应用服务器，提供对 jsp 和 Servlet 的支持，它是一种轻量级的 javaWeb 容器（服务器）。</p><h2 id="发布项目"><a href="#发布项目" class="headerlink" title="发布项目"></a>发布项目</h2><p>将 war 包部署到 Tomcat 根目录下的 webapp 目录，重启 Tomcat 即可运行 Web 项目。</p><h1 id="Solr"><a href="#Solr" class="headerlink" title="Solr"></a>Solr</h1><h3 id="介绍-8"><a href="#介绍-8" class="headerlink" title="介绍"></a>介绍</h3><ul><li>Solr 是一个搜索应用服务器，它对外提供类似于 WebService 的 API 接口。</li><li>Solr 是 Apache 的一个开源项目，采用 JAVA 开发，基于 Lucene 工具包实现的应用服务器。</li><li>Solr 运行在 Tomcat 等其他 Servlet 容器中。</li></ul><h3 id="中文分词器"><a href="#中文分词器" class="headerlink" title="中文分词器"></a>中文分词器</h3><ul><li>英文是以单词为单位的，单词与单词之间以空格或者逗号句号隔开。</li><li>而中文则以字为单位，字又组成词，字和词再组成句子。</li><li>所以对于英文，我们可以简单以空格判断某个字符串是否为一个单词，比如 I love China，love 和 China 很容易被程序区分开来。</li><li>但中文“我爱中国”就不一样了，电脑不知道“中国”是一个词语还是“爱中”是一个词语。</li></ul><!-- rebuild by neat -->]]></content>
  </entry>
  <entry>
    <title>业务流程</title>
    <url>/posts/65499/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><h1 id="系统简称"><a href="#系统简称" class="headerlink" title="系统简称"></a>系统简称</h1><h2 id="ERP"><a href="#ERP" class="headerlink" title="ERP"></a>ERP</h2><ul><li>ERP 系统企业资源计划的简称，为企业决策层及员工提供决策运行手段的管理平台。</li><li>ERP 是针对物资资源管理（物流）、人力资源管理（人流）、财务资源管理（财流）、信息资源管理（信息流）集成一体化的企业管理软件。</li></ul><h2 id="MES"><a href="#MES" class="headerlink" title="MES"></a>MES</h2><ul><li>MES 系统是一套面向制造企业车间执行层的生产信息化管理系统。</li><li>MES 可以为企业提供包括制造数据管理、计划排程管理、生产调度管理、库存管理、质量管理、人力资源管理、工作中心/设备管理、工具工装管理、采购管理、成本管理、项目看板管理、生产过程控制、底层数据集成分析、上层数据集成分解等管理模块，为企业打造一个扎实、可靠、全面、可行的制造协同管理平台。</li></ul><h2 id="OA"><a href="#OA" class="headerlink" title="OA"></a>OA</h2><ul><li>办公自动化，是将计算机、通信等现代化技术运用到传统办公方式，进而形成的一种新型办公方式。</li><li>办公自动化利用现代化设备和信息化技术，代替办公人员传统的部分手动或重复性业务活动，优质而高效地处理办公事务和业务信息，实现对信息资源的高效利用，进而达到提高生产率、辅助决策的目的，最大限度地提高工作效率和质量、改善工作环境。</li></ul><a id="more"></a><h2 id="CRM"><a href="#CRM" class="headerlink" title="CRM"></a>CRM</h2><p>客户关系管理的定义是：企业为提高核心竞争力，利用相应的信息技术以及互联网技术协调企业与顾客间在销售、营销和服务上的交互，从而提升其管理方式，向客户提供创新式的<strong>个性化的客户交互</strong>和服务的过程。</p><h2 id="BBS"><a href="#BBS" class="headerlink" title="BBS"></a>BBS</h2><p>网络论坛是一个和网络技术有关的网上交流场所，一般就是大家口中常提的 BBS。</p><h2 id="系统模块"><a href="#系统模块" class="headerlink" title="系统模块"></a>系统模块</h2><table><thead><tr><th align="left">简称</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">CMS</td><td align="left">内容管理系统，指网站的内容更新。</td></tr><tr><td align="left">WMS</td><td align="left">仓储管理系统，与 ERP 系统高度集成。</td></tr><tr><td align="left">OMS</td><td align="left">订单管理。</td></tr><tr><td align="left">PMS</td><td align="left">商品模块。</td></tr><tr><td align="left">SMS</td><td align="left">营销模块。</td></tr><tr><td align="left">UMS</td><td align="left">会员模块。</td></tr></tbody></table><h1 id="电商项目"><a href="#电商项目" class="headerlink" title="电商项目"></a>电商项目</h1><h2 id="SKU"><a href="#SKU" class="headerlink" title="SKU"></a>SKU</h2><p>SKU 全称为 Stock Keeping Unit（库存量单位），即库存进出计量的基本单元，可以是以件，盒，托盘等为单位。</p><h2 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h2><img src="2.png" width="80%"><h2 id="代码层次结构"><a href="#代码层次结构" class="headerlink" title="代码层次结构"></a>代码层次结构</h2><img src="3.png" width="80%"><h2 id="轮播图数据库设计"><a href="#轮播图数据库设计" class="headerlink" title="轮播图数据库设计"></a>轮播图数据库设计</h2><img src="1.png" width="80%"><h2 id="统一用户管理"><a href="#统一用户管理" class="headerlink" title="统一用户管理"></a>统一用户管理</h2><ul><li>每个应用系统都拥有独立的用户信息管理功能，用户信息的格式、命名与存储方式也多种多样。</li><li>当用户需要使用多个应用系统时就会带来用户信息同步问题，用户信息同步会增加系统的复杂性，增加管理的成本。</li><li>统一用户管理系统简称 UUMS，UUMS 统一存储所有应用系统的用户信息，应用系统对用户的相关操作全部通过 UUMS 完成，而授权等操作则由各应用系统完成，即统一存储、分布授权。</li><li>UUMS 向各应用系统提供用户属性列表，如姓名、电话、地址、邮件等属性，各应用系统可以选择本系统所需要的部分或全部属性。</li><li>应用系统对用户基本信息的增加、修改、删除和查询等请求由 UUMS 处理。</li><li>应用系统保留用户管理功能，如用户分组、用户授权等功能。</li><li>UUMS 应具有完善的日志功能，详细记录各应用系统对 UUMS 的操作。</li></ul><h2 id="统一用户认证"><a href="#统一用户认证" class="headerlink" title="统一用户认证"></a>统一用户认证</h2><p>统一用户认证是以 UUMS 为基础，对所有应用系统提供统一的认证方式和认证策略，以识别用户身份的合法性。</p><h1 id="淘淘商城"><a href="#淘淘商城" class="headerlink" title="淘淘商城"></a>淘淘商城</h1><h2 id="SOA"><a href="#SOA" class="headerlink" title="SOA"></a>SOA</h2><p>面向服务的架构（SOA）是一个组件模型，它将应用程序的不同功能单元（称为服务）进行拆分，并通过这些服务之间定义良好的接口和契约联系起来。</p><h2 id="架构图-1"><a href="#架构图-1" class="headerlink" title="架构图"></a>架构图</h2><h3 id="功能模块"><a href="#功能模块" class="headerlink" title="功能模块"></a>功能模块</h3><img src="4.png" width="80%"><h3 id="多端架构"><a href="#多端架构" class="headerlink" title="多端架构"></a>多端架构</h3><h4 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h4><img src="14.png" width="80%"><h4 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h4><img src="15.png" width="80%"> <img src="16.png" width="80%"><ul><li>前台系统和后台系统相互独立，而后台系统可以管理前台系统的内容。</li></ul><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><img src="7.png" width="80%"><h3 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h3><h4 id="方案一-1"><a href="#方案一-1" class="headerlink" title="方案一"></a>方案一</h4><img src="18.png" width="80%"><h4 id="方案二-1"><a href="#方案二-1" class="headerlink" title="方案二"></a>方案二</h4><img src="19.png" width="80%"><ul><li>通过 jsp 渲染页面返回给前端。</li></ul><h3 id="添加搜索模块"><a href="#添加搜索模块" class="headerlink" title="添加搜索模块"></a>添加搜索模块</h3><img src="20.png" width="80%"><h3 id="添加订单模块"><a href="#添加订单模块" class="headerlink" title="添加订单模块"></a>添加订单模块</h3><img src="25.png" width="80%"><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><h3 id="商品表"><a href="#商品表" class="headerlink" title="商品表"></a>商品表</h3><img src="5.png" width="80%"><h3 id="商品分类"><a href="#商品分类" class="headerlink" title="商品分类"></a>商品分类</h3><img src="6.png" width="80%"><h3 id="商品描述"><a href="#商品描述" class="headerlink" title="商品描述"></a>商品描述</h3><table><thead><tr><th align="left">字段</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">id</td><td align="left">唯一标识</td></tr><tr><td align="left">desc</td><td align="left">商品描述(存放 html 代码)</td></tr><tr><td align="left">created</td><td align="left">创建时间</td></tr><tr><td align="left">updated</td><td align="left">更新时间</td></tr></tbody></table><h3 id="用户表"><a href="#用户表" class="headerlink" title="用户表"></a>用户表</h3><img src="21.png" width="80%"><h3 id="商品规格参数"><a href="#商品规格参数" class="headerlink" title="商品规格参数"></a>商品规格参数</h3><h4 id="方案一-2"><a href="#方案一-2" class="headerlink" title="方案一"></a>方案一</h4><h5 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h5><img src="9.png" width="80%"><ul><li>考虑因素物品、物品分类、规格组、规格项和规格参数。</li><li>物品有很多种类，例如手机、食物和衣服。</li><li>一间物品有许多规格组描述，例如上图的主体和网络。</li><li>规格组里包含很多规格项，例如上图的品牌、型号和颜色等等。</li><li>规格项对应规格参数，而每件物品的规格参数有不一样。</li></ul><h5 id="关系图"><a href="#关系图" class="headerlink" title="关系图"></a>关系图</h5><img src="8.png" width="50%"><ul><li>物品分类表。</li><li>物品的外键指向物品分类表。</li><li>规格组外键指向物品表（比较灵活，但是数据冗余）。</li><li>规格组外键指向物品分类表（数据量小）。</li><li>规格项外键指向规格组。</li><li>规格项外键指向规格项和物品表（每件物品的参数都不相同）。</li></ul><h4 id="方案二-2"><a href="#方案二-2" class="headerlink" title="方案二"></a>方案二</h4><h5 id="效果图-1"><a href="#效果图-1" class="headerlink" title="效果图"></a>效果图</h5><img src="13.png" width="80%"><h5 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h5><img src="12.png" width="80%"><h5 id="json-数据"><a href="#json-数据" class="headerlink" title="json 数据"></a>json 数据</h5><img src="10.png" width="30%"><h3 id="内容分类"><a href="#内容分类" class="headerlink" title="内容分类"></a>内容分类</h3><img src="17.png" width="80%"><h3 id="订单"><a href="#订单" class="headerlink" title="订单"></a>订单</h3><h4 id="订单表"><a href="#订单表" class="headerlink" title="订单表"></a>订单表</h4><img src="26.png" width="80%"><h4 id="订单明细表"><a href="#订单明细表" class="headerlink" title="订单明细表"></a>订单明细表</h4><img src="27.png" width="80%"><h4 id="物流表"><a href="#物流表" class="headerlink" title="物流表"></a>物流表</h4><img src="28.png" width="80%"><h2 id="业务分析"><a href="#业务分析" class="headerlink" title="业务分析"></a>业务分析</h2><h3 id="单点登录"><a href="#单点登录" class="headerlink" title="单点登录"></a>单点登录</h3><h4 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h4><ul><li>单点登录简称 SSO，是一种方便用户访问多个系统的技术，用户只需在登录时进行一次注册，就可以在多个系统间自由穿梭，不必重复输入用户名和密码来确定身份。</li><li>当用户登录系统时，客户端软件根据用户的凭证（例如用户名和密码）为用户建立一个安全上下文，安全上下文包含用于验证用户的安全信息，系统用这个安全上下文和安全策略来判断用户是否具有访问系统资源的权限。</li><li>单点登录的实质就是安全上下文（Security Context）或凭证（Credential）在多个应用系统之间的传递或共享。</li></ul><h4 id="登录逻辑"><a href="#登录逻辑" class="headerlink" title="登录逻辑"></a>登录逻辑</h4><img src="22.png" width="80%"><h3 id="token"><a href="#token" class="headerlink" title="token"></a>token</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><ul><li>token 的意思是“令牌”，是服务端生成的一串字符串，作为客户端进行请求的一个标识。</li><li>token 是一个很宽泛的概念，翻译为令牌，一般用来表示经过验证之后得到的凭证，长度没有什么限制，多长都可以。</li><li>token 有很多种，可以是标准的，也可以是你自己定义的，JWT 则是其中一种 token，而且是标准的 token。</li><li>和我们自己随意定义的 token 差别大是很自然的，因为我们自己定义的 token 只需要用来识别用户登录状态，一般很短的 uuid 都可以实现，所以比较短。</li></ul><h4 id="业务分析-1"><a href="#业务分析-1" class="headerlink" title="业务分析"></a>业务分析</h4><img src="23.png" width="80%"><h3 id="购物车"><a href="#购物车" class="headerlink" title="购物车"></a>购物车</h3><img src="24.png" width="80%"><h3 id="订单模块"><a href="#订单模块" class="headerlink" title="订单模块"></a>订单模块</h3><h4 id="快照定义"><a href="#快照定义" class="headerlink" title="快照定义"></a>快照定义</h4><p>关于指定数据集合的一个完全可用拷贝，该拷贝包括相应数据在某个时间点（拷贝开始的时间点）的映像。</p><h4 id="订单号生成方案"><a href="#订单号生成方案" class="headerlink" title="订单号生成方案"></a>订单号生成方案</h4><img src="29.png" width="80%"><!-- rebuild by neat -->]]></content>
  </entry>
  <entry>
    <title>IDEA</title>
    <url>/posts/59812/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ol><li><p>安装选项：</p><img src="1.png" width="50%"></li><li><p>注册码：<a href="idea2019注册码.txt">idea2019注册码</a></p></li><li><p>查看是否激活。</p><img src="2.png" width="25%"></li></ol><a id="more"></a><h1 id="文件夹类型"><a href="#文件夹类型" class="headerlink" title="文件夹类型"></a>文件夹类型</h1><table><thead><tr><th align="left">文件夹类型</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">Source</td><td align="left">告诉 idea 文件夹和它的子文件夹中包含源码，在构建工程时，需要作为一部分被编译进去。</td></tr><tr><td align="left">Resource</td><td align="left">文件夹中的内容均会按照原文件的样子被复制到输出文件夹。</td></tr></tbody></table><h1 id="项目设置选项"><a href="#项目设置选项" class="headerlink" title="项目设置选项"></a>项目设置选项</h1><h2 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h2><p>一个项目下包含很多子项目。</p><h2 id="Facets"><a href="#Facets" class="headerlink" title="Facets"></a>Facets</h2><p>Facets 表述了在 Module 中使用的各种各样的框架、技术和语言。这些 Facets 让 Intellij IDEA 知道怎么对待 module 内容，并保证与相应的框架和语言保持一致。</p><h2 id="Artifacts"><a href="#Artifacts" class="headerlink" title="Artifacts"></a>Artifacts</h2><p>Artifacts 是 maven 中的一个概念，表示某个 module 要如何打包，例如 war exploded、war、jar、ear 等等这种打包形式。</p><h1 id="Web-项目部署到-Tomcat"><a href="#Web-项目部署到-Tomcat" class="headerlink" title="Web 项目部署到 Tomcat"></a>Web 项目部署到 Tomcat</h1><ol><li><p>选中图标，设置项目属性。</p><img src="12.png" width="50%"></li><li><p>点击 “+” 号设置项目类型。</p><img src="19.png" width="80%"></li><li><p>选择 Web 项目。</p><img src="21.png" width="20%"></li><li><p>选择对应项目即可（将选择的项目识别为 Web 项目）。</p><img src="22.png" width="40%"></li><li><p>选择 web.xml 文件和 webapp 目录。</p><img src="23.png" width="80%"></li><li><p>最后将项目打包。</p><img src="24.png" width="80%"></li><li><p>运行配置。</p><img src="15.png" width="80%"></li><li><p>或者这里打开运行配置。</p><img src="18.png" width="50%"></li><li><p>选择 more items -&gt; Tomcat Server -&gt; Local（点击 “+” 号新增 Tomcat 配置）。</p><img src="16.png" width="80%"></li><li><p>选择本地 Tomcat 安装目录。</p><img src="17.png" width="80%"></li><li><p>配置启动 Tomcat 默认打开路径。</p><img src="25.png" width="80%"></li><li><p>将项目部署到 Tomcat（项目没有打包是不会出现下列选项）。</p><img src="26.png" width="50%"></li><li><p>设置项目访问路径。</p><img src="27.png" width="50%"></li></ol><h1 id="Tomcat-热部署"><a href="#Tomcat-热部署" class="headerlink" title="Tomcat 热部署"></a>Tomcat 热部署</h1><ol><li><p>Tomcat 热部署配置。</p><img src="28.png" width="80%"><ol><li><p>On Update action: 当代码改变的时候，需要 IDEA 为你做什么。</p></li><li><p>On Frame deactivation: 当失去焦点（比如你最小化了IDEA窗口），需要 IDEA 为你做什么。</p></li></ol></li></ol><h1 id="配置-Maven"><a href="#配置-Maven" class="headerlink" title="配置 Maven"></a>配置 Maven</h1><ol><li><p>打开设置。</p><img src="7.png" width="20%"></li><li><p>加载 Maven 本地配置。</p><img src="8.png" width="80%"></li></ol><h1 id="安装-Maven-项目"><a href="#安装-Maven-项目" class="headerlink" title="安装 Maven 项目"></a>安装 Maven 项目</h1><ol><li><p>选择最右边的 Maven 选项。</p><img src="20.png" width="50%"><ul><li>通过视图方式使用 Maven。</li></ul></li></ol><h1 id="聚合工程"><a href="#聚合工程" class="headerlink" title="聚合工程"></a>聚合工程</h1><ol><li><p>创建标准 Maven 工程（不通过模板创建）。</p><img src="6.png" width="80%"></li><li><p>坐标配置如下：</p><img src="4.png" width="80%"></li><li><p>如果想创建 pom 工程则删除 src 目录。</p><img src="9.png" width="30%"></li><li><p>pom 工程添加添加 <code>&lt;packaging&gt;pom&lt;/packaging&gt;</code> 标签，jar 工程将 pom 改为 jar。</p><img src="10.png" width="80%"></li><li><p>项目右键添加模块。</p><img src="11.png" width="80%"></li><li><p>maven-archetype-webapp 创建 war 项目（通过模板创建，会自动生成需要文件）。</p><img src="3.png" width="80%"></li><li><p>在 <code>/src/main</code> 目录下新建 java 和 resources 文件夹。</p></li><li><p>选中图标，设置文件夹类型。</p><img src="12.png" width="50%"></li><li><p>将 java 目录设置为 Sources 类型。</p><img src="13.png" width="80%"></li><li><p>将 resources 目录设置为 Resources 类型。</p><img src="14.png" width="80%"></li><li><p>最后根据自己情况写好依赖，所有工程创建完毕。</p></li></ol><!-- rebuild by neat -->]]></content>
  </entry>
  <entry>
    <title>JAVA 进阶</title>
    <url>/posts/49154/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:57 GMT+0800 (GMT+08:00) --><h1 id="JUnit"><a href="#JUnit" class="headerlink" title="JUnit"></a>JUnit</h1><h2 id="Maven-依赖"><a href="#Maven-依赖" class="headerlink" title="Maven 依赖"></a>Maven 依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="测试代码的要求"><a href="#测试代码的要求" class="headerlink" title="测试代码的要求"></a>测试代码的要求</h2><ol><li>测试方法必须使用 @Test 进行修饰。</li><li>测试方法必须使用 public void 进行修饰，<strong>不能带任何的参数（方法不能有形参）</strong>。</li><li>测试单元的每个方法必须可以独立测试，测试方法之间不能有任何的依赖。</li></ol><a id="more"></a><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li><p>被测试类 -&gt; 新建 -&gt; 其他</p><img src="180.png" width="40%"></li><li><p>选择 JUnit 测试用例。</p><img src="181.png" width="40%"></li><li><p>选择 JUnit4 -&gt; 下一步</p><img src="182.png" width="40%"></li><li><p>选择测试方法。</p><img src="183.png" width="40%"></li><li><p>在 test 目录自动生成测试类。</p><img src="185.png" width="30%"></li><li><p>测试类直接实例化一个被测试类，然后调用被测试类的方法即可，方法名右键运行方式 -&gt; JUnit 测试。</p><img src="184.png" width="80%"></li></ol><h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><h2 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ol><li>MyBatis 现在由 Google 维护。</li><li>ORM：数据库表和对象的关系一一映射（数据库中的字段和对象属性一一对应）。</li><li>持久化：将数据保存在数据库中。</li></ol><h3 id="Maven-依赖-1"><a href="#Maven-依赖-1" class="headerlink" title="Maven 依赖"></a>Maven 依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="MyBatis-配置文件"><a href="#MyBatis-配置文件" class="headerlink" title="MyBatis 配置文件"></a>MyBatis 配置文件</h3><p>mybatis-config.xml 配置文件：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">	PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">	"http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"driver"</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"url"</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"org/mybatis/example/BlogMapper.xml"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>environments 标签中可以存在多个 environment 标签，default 属性指定对应 environment 标签的 id，表示使用对应 environment 标签配置环境。</li><li>transactionManager 标签表示事务管理器，type 属性指定事务类型。</li><li>dataSource 标签为配置数据源。</li><li>mapper 标签为加载 mapper.xml 配置文件。</li></ul><h3 id="mapper"><a href="#mapper" class="headerlink" title="mapper"></a>mapper</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">	"http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"org.mybatis.example.BlogMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectBlog"</span> <span class="attr">resultType</span>=<span class="string">"类限定名"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">		select * from Blog where id = #&#123;id&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>namespace 的值为 mapper.xml 的类路径。</li><li>resultType 返回类型。</li><li>parameterType 动态输入类型。</li><li>resultType 和 parameterType 的值只能有一个。</li><li><code>#{id}</code> 为占位符，表示动态传 id 值。</li></ul><h3 id="基础-API"><a href="#基础-API" class="headerlink" title="基础 API"></a>基础 API</h3><ol><li><p>返回 SqlSession 对象。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> SqlSessionFactoryBuilder().build(Resources.getResourceAsReader(<span class="string">"mybatis-config.xml"</span>)).openSession(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><ul><li>SqlSession 相当于 Connection 对象。</li><li><code>openSession(true)</code> 开启事务自动提交，默认不开启事务自动提交。</li><li>不开启事务自动提交，涉及增删改需要手动提交事务（手动执行 commit 方法）。</li></ul></li><li><p>根据返回 SqlSession 对象进行数据库操作。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sqlSession.selectOne(<span class="string">"mapper[namespace].select[id]"</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><ul><li><code>mapper[namespace]</code> 根据命名空间找到对应 mapper.xml 文件，<code>select[id]</code> 根据 id 获取对应 SQL 语句。</li><li>1 为传入参数。</li></ul></li></ol><h2 id="引用-properties"><a href="#引用-properties" class="headerlink" title="引用 properties"></a>引用 properties</h2><h3 id="properties-文件"><a href="#properties-文件" class="headerlink" title="properties 文件"></a>properties 文件</h3><p>db.properties 配置文件：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">driver=driver</span><br><span class="line">url=url</span><br><span class="line">username=username</span><br><span class="line">password=password</span><br></pre></td></tr></table></figure><h3 id="MyBatis-配置文件-1"><a href="#MyBatis-配置文件-1" class="headerlink" title="MyBatis 配置文件"></a>MyBatis 配置文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">	PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">	"http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载 db.properties 配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db.properties"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 设置事务类型为 JDBC --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载 mapper 文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"org/mybatis/example/BlogMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="数据源"><a href="#数据源" class="headerlink" title="数据源"></a>数据源</h3><p>dataSource 标签为配置数据源。</p><ul><li>POOLED 使用数据库连接池。</li><li>UNPOOLED 不使用数据库连接池。</li></ul><p>数据库 URL：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jdbc:mysql://localhost:3306/db?useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;serverTimezone=UTC</span><br></pre></td></tr></table></figure><ul><li>db 为连接的数据库名。</li><li>如果连接本地数据库，并且数据库端口为 3306，可以简写成 <code>jdbc:mysql:///db</code> 的形式。</li><li>XML 不识别 &amp; 符号，必须转义 <code>&amp;amp;</code>。</li></ul><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>Transaction 接口定义了获取 Connetction 连接、提交、回滚和关闭的功能。</p><p>JdbcTransaction 和 ManagedTransaction 为 Transaction 接口不同的实现。</p><p>MyBatis的事务管理分为两种形式：</p><ol><li>使用 JDBC 的事务管理机制：即利用 java.sql.Connection 对象完成对事务的提交（commit()）、回滚（rollback()）、关闭（close()）等。</li><li>使用 MANAGED 的事务管理机制：这种机制 MyBatis 自身不会去实现事务管理，而是让程序的 EJB 容器（JBOSS，Weblogic）来实现对事务的管理。</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>transactionManager 的 type 属性决定用什么类型的事务管理机制。<ol><li>Transaction 的事务管理都是通过 java.sql.Connection 实现的。</li><li>JDBC: 创建一个 JdbcTransactionFactory 工厂，涉及增删改操作需要手动提交事务（手动调用 SqlSession 对象的 commit 方法）。<ul><li>JdbcTransaction 依赖与从 dataSource 中取得的连接 connection 来管理 transaction 的作用域。</li><li>JdbcTransaction 是使用的 java.sql.Connection 上的 commit 和 rollback 功能。</li><li>JdbcTransaction 只是相当于对 java.sql.Connection 事务处理进行了一次包装（wrapper）。</li></ul></li><li>MANAGED: 创建一个 MangedTransactionFactory 工厂。<ul><li>ManagedTransaction 让 EJB 容器来管理事务 Transaction 的整个生命周期。</li><li>使用 ManagedTransaction 的 commit 和 rollback 功能不会对事务有任何的影响（ManagedTransaction 的 commit 和 rollback 方法为空方法，没有任何逻辑操作）。</li><li>让容器管理事务前提是该容器支持事务管理，Tomcat 不支持管理事务。</li></ul></li></ol></li></ul><h2 id="mapper-1"><a href="#mapper-1" class="headerlink" title="mapper"></a>mapper</h2><h3 id="基本标签"><a href="#基本标签" class="headerlink" title="基本标签"></a>基本标签</h3><table><thead><tr><th align="left">标签</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">select</td><td align="left">查询标签</td></tr><tr><td align="left">insert</td><td align="left">插入标签</td></tr><tr><td align="left">delete</td><td align="left">删除标签</td></tr><tr><td align="left">update</td><td align="left">更新标签</td></tr></tbody></table><h3 id="约定"><a href="#约定" class="headerlink" title="约定"></a>约定</h3><p>resultType 中指定的 pojo 类属性名必须和数据库字段名一一对应，mybatis 执行 SQL 语句根据 bean 对象名字和数据库字段自动赋值，名字不一样需要通过 resultMap 指定。</p><h3 id="定义别名"><a href="#定义别名" class="headerlink" title="定义别名"></a>定义别名</h3><ol><li><p>将 <code>org.langiao.entity.Student</code> 定义别名为 <code>student</code>。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"org.langiao.entity.Student"</span> <span class="attr">alias</span>=<span class="string">"student"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>别名忽略大小写。</li></ul></li><li><p>批量定义别名。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"org.lanqiao.entity"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>会将该包下的所有类定义别名（别名就是类名，不用写类限定名）。</li><li>除了自定义别名外，MyBatis 还内置了一些常见的别名。</li></ul></li></ol><h3 id="全局参数配置"><a href="#全局参数配置" class="headerlink" title="全局参数配置"></a>全局参数配置</h3><p>mybatis 配置文件中关闭缓存。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="SqlSeesion-对象"><a href="#SqlSeesion-对象" class="headerlink" title="SqlSeesion 对象"></a>SqlSeesion 对象</h2><p>SqlSession 对象可对数据库操作，执行查询可以返回结果集。</p><ul><li><p>selectOne(“mapper[namespace].select[id]”, 1);</p><ul><li>mapper[namespace] 为 mapper.xml 文件中的 mapper 标签 namespace 的值。</li><li>select[id] 为 mapper.xml 文件中的 select 标签 id 的值。</li><li>示例说明：<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"org.mybatis.example.BlogMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- mapper[namespace].select[id] 的值为 org.mybatis.example.BlogMapper.selectBlog。 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- parameterType 输入类型。 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- resultType 返回类型。 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1 为动态出入的值（select * from Blog where id = 1）。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectBlog"</span> <span class="attr">resultType</span>=<span class="string">"bean 对象类限定名"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">        select * from Blog where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>close() 关闭数据库连接。</p></li><li><p>selectList(“mapper[namespace].select[id]”, parameterType);</p><ul><li>以 List 集合形式返回对象。</li><li>parameterType 为 sql 语句中需要传入的参数（占位符或拼接符）。</li></ul></li><li><p>insert(“mapper[namespace].select[id]”, parameterType);</p><ul><li>插入数据，对应 insert 标签。</li></ul></li><li><p>delete(“mapper[namespace].select[id]”, parameterType);</p><ul><li>删除数据，对应 delete 标签。</li></ul></li><li><p>update(“mapper[namespace].select[id]”, parameterType);</p><ul><li>更新数据，对应 update 标签。</li></ul></li><li><p>commit() 事务提交方式为 JDBC，需要手动提交事务。</p><ul><li>增删改操作需要手动提交事务。</li></ul></li></ul><h2 id="基于动态代理方式-CRUD"><a href="#基于动态代理方式-CRUD" class="headerlink" title="基于动态代理方式 CRUD"></a>基于动态代理方式 CRUD</h2><h3 id="约定-1"><a href="#约定-1" class="headerlink" title="约定"></a>约定</h3><ol><li>namespace 的值就是接口的全类名（接口和 mapper.xml 文件映射）。</li><li>方法名和 mapper.xml 文件中标签的 id 值相同。</li><li>方法的形参和 mapper.xml 文件中标签的 parameterType 类型一致。</li><li>方法的返回值和 mapper.xml 文件中标签的 resultType 类型一致（没有 resultType 返回值为 void）。</li><li>习惯把 mapper.xml 和 约定接口放在一起。</li></ol><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><p>SqlSession 实例对象中的 getMapper(指定接口.class)。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// StudentMapper 为指定接口。</span></span><br><span class="line">StudentMapper studentMapper = sqlSession.getMapper(StudentMapper.class);</span><br><span class="line"><span class="comment">// queryStudentByStuno 为 StudentMapper 接口中的自定义方法。</span></span><br><span class="line">studentMapper.queryStudentByStuno(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h2 id="resultMap"><a href="#resultMap" class="headerlink" title="resultMap"></a>resultMap</h2><ol><li>解决 javaBean 对象属性和数据库字段不一致导致不能识别的问题，例如 javaBean 中的 id 属性和数据库中的 Number 字段不对应。</li><li>解决 javaBean 对象和数据库字段类型不一致的问题，例如 javaBean 中的 id 属性为 int，数据库中的 id 字段为 varchar。</li></ol><h3 id="属性名和数据库字段名不一致"><a href="#属性名和数据库字段名不一致" class="headerlink" title="属性名和数据库字段名不一致"></a>属性名和数据库字段名不一致</h3><ol><li><p>数组库字段：</p><img src="45.png" width="80%"></li><li><p>javaBean 对象：</p><img src="44.png" width="50%"></li><li><p>mapper 文件：</p><img src="46.png" width="80%"><ul><li>type 属性为返回类型。</li><li>id <strong>标签</strong>为数据库主键，result 标签为数据库非主键。</li><li>property 属性为 javabean 属性名。</li><li>column 数据库字段。</li></ul></li><li><p>接口对应方法：</p><img src="47.png" width="50%"></li></ol><h3 id="自定义类型转换器"><a href="#自定义类型转换器" class="headerlink" title="自定义类型转换器"></a>自定义类型转换器</h3><ol><li><p>继承 BaseTypeHandler 类，重写 set 和 get 相关方法， set 方法是从 javaType 到 jdbcType，get 方法是从 jdbcType 到 javaType。</p></li><li><p>将 java 的 true 值转换为数据库的 1，将 false 转换为 0。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNonNullParameter</span><span class="params">(PreparedStatement ps, <span class="keyword">int</span> i, Boolean parameter, JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (parameter) &#123;</span><br><span class="line">        </span><br><span class="line">        ps.setInt(i, <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        </span><br><span class="line">        ps.setInt(i, <span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>PreparedStatement 为原生 JDBC 增删改操作对象。</li><li>i 为 PreparedStatement 对象操作参数的位置。</li><li>parameter 为插入数据库的值。</li></ul></li><li><p>将数据库的 1 转换为 java 类型的 true，0 为 false。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Boolean <span class="title">getNullableResult</span><span class="params">(ResultSet rs, String columnName)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> rs.getInt(columnName) == <span class="number">1</span> ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Boolean <span class="title">getNullableResult</span><span class="params">(ResultSet rs, <span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rs.getInt(columnIndex) == <span class="number">1</span> ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Boolean <span class="title">getNullableResult</span><span class="params">(CallableStatement cs, <span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> cs.getInt(columnIndex) == <span class="number">1</span> ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>columnName 根据列名获取。</li><li>columnIndex 根据下标获取。</li><li>CallableStatement 对象为查询储存过程相关对象。</li></ul></li><li><p>在 Mybatis 配置文件中注册类型转换器。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeHandlers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">handler</span>=<span class="string">"top.zero3737.Servlet.TypeHandler"</span> <span class="attr">javaType</span>=<span class="string">"Boolean"</span> <span class="attr">jdbcType</span>=<span class="string">"Integer"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeHandlers</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>mapper.xml 配置如下:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"_id"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultMap</span>=<span class="string">"_resultMap"</span>&gt;</span></span><br><span class="line">    select * from Blog where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"类限定名"</span> <span class="attr">id</span>=<span class="string">"_resultMap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"stuSex"</span> <span class="attr">column</span>=<span class="string">"stusex"</span> <span class="attr">javaType</span>=<span class="string">"boolean"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>声明 javaType 和 jdbcType 类型自动寻找对应转换器。</li><li>INTEGER 类型必需大写。</li></ul></li><li><p>对数据库进行插入操作。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"_id-1"</span> <span class="attr">parameterType</span>=<span class="string">"类限定名"</span>&gt;</span></span><br><span class="line">    insert into student(id, sex) values(#&#123;id&#125;, #&#123;sex, javaType=boolean, jdbcType=INTEGER&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>声明 javaType 和 jdbcType 自动寻找对应转换器。</li></ul></li></ol><h2 id="拼接符和占位符"><a href="#拼接符和占位符" class="headerlink" title="拼接符和占位符"></a>拼接符和占位符</h2><h3 id="占位符"><a href="#占位符" class="headerlink" title="#{} 占位符"></a>#{} 占位符</h3><ol><li>如果传进来的是基本类型，那么 #{} 里面的变量名任意，因为 MyBatis 会把实际参数直接传入这个位置，不管参数名称和类型。</li><li>如果传进来的是对象类型，MyBatis 会把对象中的属性名和属性值以键值对形式保存到一个类似 Map 的结构中，当我们用 #{属性名} 来取值时，其实就相当于根据键查找值。</li><li>如果有多个参数，使用 @Param 注解来指定参数名称。</li><li>#{} 占位符自动给 String 类型自动加上引号（自动类型转换）。</li></ol><h3 id="拼接符"><a href="#拼接符" class="headerlink" title="${} 拼接符"></a>${} 拼接符</h3><ol><li>如果传进来的是基本类型，那么 #{} 里面的变量名必须写 value。</li><li>如果传进来的是对象类型，通过 #{属性名} 方式获取值，和 ${} 占位符一样。</li><li>当有多个参数时，可以使用 ${param1}、${param2} 方式或者 @Param 注解方式来获取参数。</li><li>${} 拼接符会原样输出，不会给 String 类型自动加上引号。</li></ol><h2 id="输入和输出参数"><a href="#输入和输出参数" class="headerlink" title="输入和输出参数"></a>输入和输出参数</h2><h3 id="输入多个参数"><a href="#输入多个参数" class="headerlink" title="输入多个参数"></a>输入多个参数</h3><img src="80.png" width="80%"><h4 id="不指定别名"><a href="#不指定别名" class="headerlink" title="不指定别名"></a>不指定别名</h4><p>接口方法：</p><img src="82.png" width="80%"><p>mapper 文件：</p><img src="81.png" width="50%"><h4 id="Param-指定别名"><a href="#Param-指定别名" class="headerlink" title="@Param 指定别名"></a>@Param 指定别名</h4><p>接口方法：</p><img src="83.png" width="80%"><p>mapper 文件：</p><img src="84.png" width="50%"><h4 id="嵌套对象"><a href="#嵌套对象" class="headerlink" title="嵌套对象"></a>嵌套对象</h4><p>Student 类中包含 Address 对象：</p><img src="25.png" width="40%"><p>Address 对象：</p><img src="26.png" width="50%"><p>mapper 文件：</p><img src="27.png" width="80%"><h3 id="返回-List"><a href="#返回-List" class="headerlink" title="返回 List"></a>返回 List</h3><p>mapper 文件：</p><img src="39.png" width="50%"><ul><li>resultType 属性不区分大小写，sTuDenT（student） 为 javabean 对象。</li></ul><p>对应接口方法：</p><img src="40.png" width="50%"><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><h4 id="输入参数"><a href="#输入参数" class="headerlink" title="输入参数"></a>输入参数</h4><p>JAVA 主程序：</p><img src="30.png" width="80%"><p>mapper 文件：</p><img src="31.png" width="80%"><ul><li>map 的 key 值必须和占位符中的值一样。</li></ul><h4 id="输出参数"><a href="#输出参数" class="headerlink" title="输出参数"></a>输出参数</h4><p>mapper 文件：</p><img src="41.png" width="60%"><p>对应接口方法：</p><img src="42.png" width="60%"><ul><li>该方法只能返回一个 Map 对象。</li><li>如果想返回多个 Map 对象，可以将方法的返回类型直接改成 <code>List&lt;Map&lt;String, Object&gt;&gt;</code></li></ul><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><img src="43.png" width="80%"> <img src="86.png" width="80%"><h4 id="MapKey"><a href="#MapKey" class="headerlink" title="@MapKey"></a>@MapKey</h4><p>JAVA 代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapKey</span>(<span class="string">"id"</span>)  </span><br><span class="line"><span class="keyword">public</span> Map&lt;Integer, Map&lt;String, Object&gt;&gt;getUsers(Map&lt;String, Object&gt;param);</span><br></pre></td></tr></table></figure><ul><li>id 为数据库主键，类型为 Integer 类型。</li></ul><p>mapper 文件：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUsers"</span> <span class="attr">resultType</span>=<span class="string">"java.util.Map"</span>  <span class="attr">parameterType</span>=<span class="string">"java.util.Map"</span>&gt;</span>  </span><br><span class="line">    select id, name, sex from t_user  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>返回的结果是：</p><p><code>{1={name:jasion, sex:1}, 2={name:jack, sex=1}}</code></p><h2 id="javaType、jdbcType-和-MySQL-之间对应关系"><a href="#javaType、jdbcType-和-MySQL-之间对应关系" class="headerlink" title="javaType、jdbcType 和 MySQL 之间对应关系"></a>javaType、jdbcType 和 MySQL 之间对应关系</h2><h3 id="javaType-与-jdbcType"><a href="#javaType-与-jdbcType" class="headerlink" title="javaType 与 jdbcType"></a>javaType 与 jdbcType</h3><img src="38.png" width="40%"><ul><li>jdbcType 为 MyBatis 内置类型。</li></ul><h3 id="jdbcType-与-MySQL"><a href="#jdbcType-与-MySQL" class="headerlink" title="jdbcType 与 MySQL"></a>jdbcType 与 MySQL</h3><img src="37.png" width="40%"><h2 id="调用存储过程"><a href="#调用存储过程" class="headerlink" title="调用存储过程"></a>调用存储过程</h2><ol><li><p>编写存储过程：</p><img src="33.png" width="80%"></li><li><p>mapper 文件：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryCountByGradeWithProcedure"</span> <span class="attr">statementType</span>=<span class="string">"CALLABLE"</span> <span class="attr">parameterType</span>=<span class="string">"HashMap"</span>&gt;</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        CALL queryCountByGradeWithProcedure(&#123;</span><br><span class="line"></span><br><span class="line">            #&#123;gName, jdbcType=VARCHAR, mode=IN&#125;,</span><br><span class="line">            #&#123;sCount, jdbcType=INTEGER, mode=OUT&#125;,</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>statementType=&quot;CALLABLE&quot;</code> 声明使用存储过程。</li><li>mode=IN 为输入参数。</li><li>mode=OUT 为输出参数。</li><li>通过 Map 的 put 方法传入输入参数，get 方法获取存储过程的输出参数，所以没有返回值。</li></ul></li><li><p>程序调用存储过程：</p><img src="35.png" width="70%"></li></ol><h2 id="mapper-扩展"><a href="#mapper-扩展" class="headerlink" title="mapper 扩展"></a>mapper 扩展</h2><h3 id="动态-SQL"><a href="#动态-SQL" class="headerlink" title="动态 SQL"></a>动态 SQL</h3><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><img src="48.png" width="80%"><ul><li>stuName 为 student 对象中的属性。</li></ul><h4 id="where"><a href="#where" class="headerlink" title="where"></a>where</h4><p>where 标签自动处理第一个 and 关键字（第一个 and 关键字自动省略，这样就不会造成拼接 SQL 语句错误）。</p><img src="49.png" width="80%"><h4 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h4><img src="50.png" width="80%"><h5 id="遍历对象中-List-集合"><a href="#遍历对象中-List-集合" class="headerlink" title="遍历对象中 List 集合"></a>遍历对象中 List 集合</h5><ol><li><p>JavaBean：</p><img src="52.png" width="50%"></li><li><p>mapper 文件：</p><img src="51.png" width="80%"><ul><li>collection 为遍历集合。</li><li>open 开始拼接。</li><li>item 迭代元素。</li><li>separator 分隔符。</li><li>close 关闭。</li></ul></li></ol><h5 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h5><ol><li><p>接口方法：</p><img src="53.png" width="50%"></li><li><p>mapper 文件：</p><img src="54.png" width="80%"><ul><li>在 mapper 中用 array 代替输入数组。</li></ul></li></ol><h5 id="遍历-List-集合"><a href="#遍历-List-集合" class="headerlink" title="遍历 List 集合"></a>遍历 List 集合</h5><img src="55.png" width="80%"><ul><li>用 list 代替传入 list 集合，与变量名无关。</li></ul><h5 id="遍历对象数组"><a href="#遍历对象数组" class="headerlink" title="遍历对象数组"></a>遍历对象数组</h5><img src="56.png" width="80%"><ul><li>输入参数用 <code>Object[]</code> 表示对象数组，collection 属性用 array 表示数组，与变量名无关。</li></ul><h3 id="SQL-片段"><a href="#SQL-片段" class="headerlink" title="SQL 片段"></a>SQL 片段</h3><ol><li><p>定义 sql 片段：</p><img src="57.png" width="80%"></li><li><p>引用：</p><img src="58.png" width="80%"><ul><li>如果跨文件引用 sql 片段，refid 的值为 namespace.id（id 为定义 sql 片段的 id 值）。</li></ul></li></ol><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h3 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h3><h4 id="关系图"><a href="#关系图" class="headerlink" title="关系图"></a>关系图</h4><img src="61.png" width="50%"><h4 id="新建扩展类"><a href="#新建扩展类" class="headerlink" title="新建扩展类"></a>新建扩展类</h4><p>新建扩展类接收一对一查询返回的结果集。</p><h4 id="association"><a href="#association" class="headerlink" title="association"></a>association</h4><p>通过 bean 对象接受查询结果集。</p><img src="59.png" width="30%"><p>association 标签指定内部对象。</p><img src="60.png" width="80%"><ul><li>JavaType 指定对象类型。</li></ul><h3 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h3><h4 id="关系图-1"><a href="#关系图-1" class="headerlink" title="关系图"></a>关系图</h4><img src="62.png" width="50%"><h4 id="collection"><a href="#collection" class="headerlink" title="collection"></a>collection</h4><p>通过 List 集合接受查询结果集。</p><img src="63.png" width="50%"><p>collection 标签指定 List 集合。</p><img src="64.png" width="60%"><ul><li>ofType 指定的是映射到 List 集合类型。</li></ul><h2 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h2><img src="69.png" width="80%"><h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 启用延迟加载特性，不配置默认关闭该特性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">setting</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- false: 关闭立即加载；true: 立即加载所有属性；--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"aggressiveLazyLoading"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="一对一-1"><a href="#一对一-1" class="headerlink" title="一对一"></a>一对一</h3><h4 id="新建-mapper-文件"><a href="#新建-mapper-文件" class="headerlink" title="新建 mapper 文件"></a>新建 mapper 文件</h4><img src="71.png" width="80%"><h4 id="主-mapper-文件"><a href="#主-mapper-文件" class="headerlink" title="主 mapper 文件"></a>主 mapper 文件</h4><img src="72.png" width="80%"> <img src="73.png" width="80%"> <img src="74.png" width="80%"><ul><li>select 属性为新建 mapper 文件的 namespace.id。</li><li>column 属性指定数据库字段名，为联表查询时的外键（外键一般两张表同时具备）。</li></ul><h3 id="一对多-1"><a href="#一对多-1" class="headerlink" title="一对多"></a>一对多</h3><h4 id="动态代理接口"><a href="#动态代理接口" class="headerlink" title="动态代理接口"></a>动态代理接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LazyLoadMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Category <span class="title">lazyLoadTest</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="comment">// 改接口可要可不要</span></span><br><span class="line">    <span class="function">List&lt;Product&gt; <span class="title">selectProductsByCategoryId</span><span class="params">(<span class="keyword">int</span> cId)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="mapper-2"><a href="#mapper-2" class="headerlink" title="mapper"></a>mapper</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper </span></span><br><span class="line"><span class="meta">    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" </span></span><br><span class="line"><span class="meta">    "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.sl.mapper.LazyLoadMapper"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 分类信息查询 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"lazyLoadTest"</span>  <span class="attr">resultMap</span>=<span class="string">"lazyLoadProductsByCategoryTest"</span>&gt;</span></span><br><span class="line">            select * from category where id=#&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"lazyLoadProductsByCategoryTest"</span> <span class="attr">type</span>=<span class="string">"com.sl.po.Category"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"Id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"Name"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"remark"</span> <span class="attr">property</span>=<span class="string">"Remark"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 一个分类对应多个产品，此处使用collection --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"productList"</span> <span class="attr">ofType</span>=<span class="string">"com.sl.po.Product"</span>  <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">select</span>=<span class="string">"selectProductsByCategoryId"</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 嵌套查询返回商品信息，延迟加载将要执行的sql --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectProductsByCategoryId"</span>  <span class="attr">resultType</span>=<span class="string">"com.sl.po.Product"</span>&gt;</span></span><br><span class="line">            select * from products where categoryid=#&#123;id&#125; </span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="主程序"><a href="#主程序" class="headerlink" title="主程序"></a>主程序</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLazyLoadMapperClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义会话SqlSession</span></span><br><span class="line">    SqlSession session = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 定义mabatis全局配置文件</span></span><br><span class="line">        String resource = <span class="string">"SqlMapConfig.xml"</span>;</span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">        SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        SqlSessionFactory factory = builder.build(inputStream);</span><br><span class="line">        <span class="comment">// 根据sqlSessionFactory产生会话sqlsession</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 延迟加载</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testoneToManyTestCollectionSelect</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        LazyLoadMapper mapper = session.getMapper(LazyLoadMapper.class);</span><br><span class="line"></span><br><span class="line">        Category category = mapper.lazyLoadTest(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//System.out.println(category);</span></span><br><span class="line">        System.out.println(category.getName());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (category.getProductList().size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Product pro : category.getProductList()) &#123;</span><br><span class="line">                System.out.println(pro);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭会话</span></span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="整合-log4j"><a href="#整合-log4j" class="headerlink" title="整合 log4j"></a>整合 log4j</h2><h3 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h3><img src="68.png" width="50%"><h3 id="Maven-依赖-2"><a href="#Maven-依赖-2" class="headerlink" title="Maven 依赖"></a>Maven 依赖</h3><p>整合 log4j 主要观察 MyBatis 中的实际 SQL 语句和 SQL 中的参数和返回结果。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Mybatis-配置文件"><a href="#Mybatis-配置文件" class="headerlink" title="Mybatis 配置文件"></a>Mybatis 配置文件</h3><p>全局配置</p><img src="65.png" width="50%"> <img src="66.png" width="50%"><h3 id="log4j-properties"><a href="#log4j-properties" class="headerlink" title="log4j.properties"></a>log4j.properties</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Global logging configuration</span></span><br><span class="line"><span class="string">log4j.rootLogger=DEBUG,</span> <span class="string">stdout</span></span><br><span class="line"><span class="comment"># MyBatis logging configuration...</span></span><br><span class="line"><span class="string">log4j.logger.org.mybatis.example.BlogMapper=TRACE</span></span><br><span class="line"><span class="comment"># Console output...</span></span><br><span class="line"><span class="string">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="string">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="string">log4j.appender.stdout.layout.ConversionPattern=%5p</span> <span class="string">[%t]</span> <span class="bullet">-</span> <span class="string">%m%n</span></span><br></pre></td></tr></table></figure><ul><li>stdout 控制台输出。</li></ul><h2 id="PageHelper"><a href="#PageHelper" class="headerlink" title="PageHelper"></a>PageHelper</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>PageHelper 为国人开发的 MyBatis 分页插件，<a href="https://github.com/pagehelper/Mybatis-PageHelper/blob/master/README_zh.md" target="_blank" rel="noopener">官方文档连接</a>。</p><h3 id="Maven-依赖-3"><a href="#Maven-依赖-3" class="headerlink" title="Maven 依赖"></a>Maven 依赖</h3><img src="97.png" width="60%"><h3 id="MyBatis-配置"><a href="#MyBatis-配置" class="headerlink" title="MyBatis 配置"></a>MyBatis 配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- com.github.pagehelper 为 PageHelper 类所在包名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.github.pagehelper.PageInterceptor"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用下面的方式配置参数，后面会有所有的参数介绍 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"param1"</span> <span class="attr">value</span>=<span class="string">"value1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h3><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">reasonable</td><td align="left">用户输入的页数不在合法范围时能够正确的响应到正确的结果页面， 那么你可以配置 reasonable 为 true，这时如果 pageNum&lt;=0 会查询第一页，如果 pageNum&gt;总页数 会查询最后一页。</td></tr></tbody></table><h3 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h3><p>PageHelper.startPage 静态方法调用。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取第1页，10条内容，默认查询总数count</span></span><br><span class="line">PageHelper.startPage(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line"><span class="comment">//紧跟着的第一个 MyBatis 查询方法会被进行分页</span></span><br><span class="line">List&lt;Country&gt; list = countryMapper.selectIf(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><ul><li><p>获取其他参数：</p><img src="98.png" width="60%"><ul><li>获取其他参数必须先查询完数据库之后才能获取。</li></ul></li></ul><p>使用 PageInfo 的用法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取第1页，10条内容，默认查询总数count</span></span><br><span class="line">PageHelper.startPage(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">List&lt;Country&gt; list = countryMapper.selectAll();</span><br><span class="line"><span class="comment">//用PageInfo对结果进行包装</span></span><br><span class="line">PageInfo page = <span class="keyword">new</span> PageInfo(list);</span><br></pre></td></tr></table></figure><ul><li>PageInfo 包含了非常全面的分页参数。</li></ul><h2 id="逆向工程"><a href="#逆向工程" class="headerlink" title="逆向工程"></a>逆向工程</h2><img src="79.png" width="80%"><h3 id="Maven-依赖-4"><a href="#Maven-依赖-4" class="headerlink" title="Maven 依赖"></a>Maven 依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.generator/mybatis-generator-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="xml-配置文件"><a href="#xml-配置文件" class="headerlink" title="xml 配置文件"></a>xml 配置文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration </span></span><br><span class="line"><span class="meta">    PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN" </span></span><br><span class="line"><span class="meta">    "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库驱动包位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">classPathEntry</span> <span class="attr">location</span>=<span class="string">"D:\maven\Repository\mysql\mysql-connector-java\8.0.15\mysql-connector-java-8.0.15.jar"</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"sqlGenerate"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressAllComments"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">&lt;!-- 数据库链接URL、用户名、密码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://localhost:3306/ssm?useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;serverTimezone=UTC"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">userId</span>=<span class="string">"root"</span> <span class="attr">password</span>=<span class="string">"123456"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">         <span class="comment">&lt;!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer;</span></span><br><span class="line"><span class="comment">         为 true时把JDBC DECIMAL和NUMERIC类型解析为java.math.BigDecimal --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">&lt;!-- 生成Pojo包名和位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"top.zero3737.entity"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">targetProject</span>=<span class="string">".\src\main\java"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 清理前后的空格 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">&lt;!-- 生成Mapper映射XML文件位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"top.zero3737.dao"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">targetProject</span>=<span class="string">".\src\main\java"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">&lt;!-- 生成Mapper接口文件位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">targetPackage</span>=<span class="string">"top.zero3737.dao"</span> <span class="attr">targetProject</span>=<span class="string">".\src\main\java"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"user"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>targetProject 生成路径（包所在路径）。</li><li>targetPackage 生成包名。</li><li>tableName 指定数据库表，根据指定表生成类、接口、mapper 文件。</li></ul><h3 id="主程序-1"><a href="#主程序-1" class="headerlink" title="主程序"></a>主程序</h3><p>运行该方法即可生成对应 bean 对象、mapper 和 接口。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Generator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; warnings = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">boolean</span> overwrite = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//指向逆向工程配置文件，只需要把下面这个文件改为你自己写的配置文件即可</span></span><br><span class="line">        File configFile = <span class="keyword">new</span> File(<span class="string">"src/main/java/top/zero3737/generator/generatorConfig.xml"</span>);</span><br><span class="line">        ConfigurationParser cp = <span class="keyword">new</span> ConfigurationParser(warnings);</span><br><span class="line">        Configuration config = cp.parseConfiguration(configFile);  </span><br><span class="line">        DefaultShellCallback callback = <span class="keyword">new</span> DefaultShellCallback(overwrite);  </span><br><span class="line">        MyBatisGenerator myBatisGenerator = <span class="keyword">new</span> MyBatisGenerator(config, callback, warnings);  </span><br><span class="line">        myBatisGenerator.generate(<span class="keyword">null</span>);</span><br><span class="line">        System.out.println(<span class="string">"执行成功！"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-3"><a href="#使用-3" class="headerlink" title="使用"></a>使用</h3><img src="88.png" width="70%"><ol><li>可以通过 Example 对象查询。</li><li>通过 Example 对象创建 Criteria 对象追加自定义条件。</li></ol><p>添加 or 条件：</p><img src="89.png" width="70%"><ol><li>Example 对象默认使用第一个 Criteria 对象的规则。</li><li>Example 对象通过 or 方法追加规则。</li></ol><h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3><ol><li>默认不通过 Criteria 对象追加条件，即查询所有记录。</li><li>Example 对象纳入 IOC 容器只有一个对象，下次使用还是上次的 Example 对象，不会被初始化（即会不断追加条件）。</li><li>逆向工程每次运行前都要把之前生成的文件删除，每次运行不会覆盖之前的文件，而是追加内容。</li></ol><h2 id="通用-Mapper"><a href="#通用-Mapper" class="headerlink" title="通用 Mapper"></a>通用 Mapper</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>通用 Mapper 是由国人开发的一款 MyBatis 插件，通用 Mapper <a href="https://github.com/abel533/Mapper/wiki" target="_blank" rel="noopener">官方文档</a>。</p><h3 id="Maven-依赖-5"><a href="#Maven-依赖-5" class="headerlink" title="Maven 依赖"></a>Maven 依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/tk.mybatis/mapper --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><p>通用 mapper 依赖与 persistence-api (Java Persistence API，简称 JPA)，下列注解来自于这个依赖。</p><h4 id="Table"><a href="#Table" class="headerlink" title="@Table"></a>@Table</h4><ol><li>声明在 pojo 类的属性上。</li><li>name 属性指定表名。</li></ol><h4 id="Id"><a href="#Id" class="headerlink" title="@Id"></a>@Id</h4><ol><li>声明在 bean 对象的属性上。</li><li>声明主键。</li><li>属性不能是基本类型，必须是包装类型，如果为基本类型，则无法查出数据。</li></ol><h4 id="Column"><a href="#Column" class="headerlink" title="@Column"></a>@Column</h4><ol><li>声明在 bean 对象的属性上。</li><li>name 属性声明数据库字段与属性名想对应。</li><li>默认支持驼峰式命名对应数据库的下划线形式（myTable -&gt; my_table）。</li></ol><h4 id="Transient"><a href="#Transient" class="headerlink" title="@Transient"></a>@Transient</h4><ol><li>声明在 bean 对象的属性上。</li><li>@Transient 表示该属性并非一个到数据库表的字段的映射，ORM 框架将忽略该属性。</li><li>如果一个属性并非数据库表的字段映射，就务必将其标示为 @Transient，否则 ORM 框架默认其注解为 @Basic。</li></ol><h4 id="GeneratedValue"><a href="#GeneratedValue" class="headerlink" title="@GeneratedValue"></a>@GeneratedValue</h4><ol><li><p>必须声明在主键字段上（和 @Id 注解使用）。</p></li><li><p>声明数据库主键生成策略。</p></li><li><p>strategy 属性可选参数：</p><ul><li>GenerationType.AUTO 主键由程序控制，默认选项。</li><li>GenerationType.IDENTITY 数据库采用自增长，Oracle 不支持这种方式。</li></ul></li><li><p>插入数据的时候，pojo 类没有给主键赋值，默认不会自动将数据库主键信息写入 pojo 类主键属性中。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">xxxMapper.insert(pojo);</span><br><span class="line">System.out.println(pojo.getId()); <span class="comment">// 输出为 null</span></span><br></pre></td></tr></table></figure></li><li><p>设置主键生成策略为 GenerationType.IDENTITY （数据库必须采用自增的方式）时，插入时会将数据库主键写入对象中的主键属性中。</p></li></ol><h3 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h3><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">notEmpty</td><td align="left">insertSelective 和 updateByPrimaryKeySelective 中，是否判断字符串类型 !=’’。</td></tr></tbody></table><p>配置 notEmpty=false 解决空串 updateByPrimaryKeySelective 不更新的问题。</p><h3 id="编写-JAVA-程序"><a href="#编写-JAVA-程序" class="headerlink" title="编写 JAVA 程序"></a>编写 JAVA 程序</h3><ol><li><p>继承 Mapper 接口：</p><img src="206.png" width="50%"></li><li><p>bean 对象对应数据库字段：</p><img src="207.png" width="50%"></li></ol><h3 id="API-介绍"><a href="#API-介绍" class="headerlink" title="API 介绍"></a>API 介绍</h3><table><thead><tr><th align="left">API</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">xxxMapper.selectAll()</td><td align="left">查询所有。</td></tr><tr><td align="left">xxxMapper.selectByPrimaryKey(Object key)</td><td align="left">根据主键查询。</td></tr><tr><td align="left">xxxMapper.selectOne(Pojo)</td><td align="left">根据 pojo 类查询数据库。</td></tr><tr><td align="left">xxxMapper.insert(Pojo)</td><td align="left">插入数据，必须将数据包装成 Pojo 对象。</td></tr><tr><td align="left">xxxMapper.updateByPrimaryKey(Pojo)</td><td align="left">根据 pojo 类更新数据，如果 pojo 类某个属性没有赋值，则默认值为 null，并将 null 插入数据库。</td></tr><tr><td align="left">xxxMapper.updateByPrimaryKeySelective(Pojo)</td><td align="left">根据 pojo 类更新数据，如果 pojo 类某个属性没有赋值，则忽略这个属性。</td></tr></tbody></table><p>example 用法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建 example</span></span><br><span class="line">Example example = <span class="keyword">new</span> Example(UserTable.class);</span><br><span class="line"><span class="comment">// 根据 password 升序排序，如果 password 相等则根据 username 降序排序</span></span><br><span class="line">example.orderBy(<span class="string">"password"</span>).asc().orderBy(<span class="string">"username"</span>).desc();</span><br><span class="line"><span class="comment">// 去重</span></span><br><span class="line">example.setDistinct(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 查询指定字段</span></span><br><span class="line">example.selectProperties(<span class="string">"password"</span>);</span><br><span class="line"><span class="comment">// 创建查询条件</span></span><br><span class="line">Example.Criteria c1 = example.createCriteria();</span><br><span class="line"><span class="comment">// 查询 password 大于等于 1</span></span><br><span class="line">c1.andGreaterThanOrEqualTo(<span class="string">"password"</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 查询 password 小于等于 10</span></span><br><span class="line">c1.andLessThanOrEqualTo(<span class="string">"password"</span>, <span class="number">10</span>);</span><br><span class="line"><span class="comment">// 创建第二个查询条件</span></span><br><span class="line">Example.Criteria c2 = example.createCriteria();</span><br><span class="line"><span class="comment">// 查询 username 包含 s</span></span><br><span class="line">c2.andLike(<span class="string">"username"</span>, <span class="string">"s"</span>);</span><br><span class="line"><span class="comment">// example 将 c2 条件用 or 添加到 c1 条件</span></span><br><span class="line">example.or(c2);</span><br><span class="line"><span class="comment">// 执行查询语句</span></span><br><span class="line">List&lt;UserTable&gt; userTables = userTableMapper.selectByExample(example);</span><br></pre></td></tr></table></figure><h3 id="使用-Maven-执行-MBG"><a href="#使用-Maven-执行-MBG" class="headerlink" title="使用 Maven 执行 MBG"></a>使用 Maven 执行 MBG</h3><p>使用该插件可以很方便的生成实体类、Mapper 接口以及对应的XML文件。</p><h4 id="MBG-插件环境搭建"><a href="#MBG-插件环境搭建" class="headerlink" title="MBG 插件环境搭建"></a>MBG 插件环境搭建</h4><h5 id="Maven-配置"><a href="#Maven-配置" class="headerlink" title="Maven 配置"></a>Maven 配置</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">            $&#123;basedir&#125;/src/main/resources/generator/generatorConfig.xml</span><br><span class="line">        <span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.29<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="generatorConfig-xml-文件配置"><a href="#generatorConfig-xml-文件配置" class="headerlink" title="generatorConfig.xml 文件配置"></a>generatorConfig.xml 文件配置</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"Mysql"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3Simple"</span> <span class="attr">defaultModelType</span>=<span class="string">"flat"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"beginningDelimiter"</span> <span class="attr">value</span>=<span class="string">"`"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"endingDelimiter"</span> <span class="attr">value</span>=<span class="string">"`"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">"tk.mybatis.mapper.generator.MapperPlugin"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappers"</span> <span class="attr">value</span>=<span class="string">"tk.mybatis.mapper.common.Mapper"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"caseSensitive"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql:///database?useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;serverTimezone=UTC"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">"root"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">"123456"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 生成Pojo包名和位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.coclouds.library.activity.dao.model"</span> <span class="attr">targetProject</span>=<span class="string">".\src\main\java"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 生成Mapper映射XML文件位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.coclouds.library.activity.dao"</span> <span class="attr">targetProject</span>=<span class="string">".\src\main\java"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 生成Mapper接口文件位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.coclouds.library.activity.dao"</span> <span class="attr">targetProject</span>=<span class="string">".\src\main\java"</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--tableName 指定表，catalog 指定数据库--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"t_activity"</span> <span class="attr">catalog</span>=<span class="string">"database"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--解决 catalog 属性存在后缀的问题--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ignoreQualifiersAtRuntime"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="节点说明"><a href="#节点说明" class="headerlink" title="节点说明"></a>节点说明</h4><ul><li><p>table 节点：</p><ul><li>tableName（必要）：要生成对象的表名。</li><li>schema：数据库的schema。</li><li>catalog：数据库的catalog。</li><li>domainObjectName：生成的domain类的名字，如果不设置，直接使用表名作为domain类的名字；可以设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面。</li></ul></li><li><p>generatedKey 用于生成生成主键的方法，如果设置了该元素，MBG会在生成的 <code>&lt;insert&gt;</code> 元素中生成一条正确的 <code>&lt;selectKey&gt;</code> 元素，该元素可选。</p><ul><li><p>column 属性表示主键的列名。</p></li><li><p>sqlStatement 属性设置要生成的 selectKey 语句（用于插入语句时获取主键），有以下可选项:</p><table><thead><tr><th align="left">可选参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">Cloudscape</td><td align="left">相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()</td></tr><tr><td align="left">DB2</td><td align="left">相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()</td></tr><tr><td align="left">DB2_MF</td><td align="left">相当于selectKey的SQL为：SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1</td></tr><tr><td align="left">Derby</td><td align="left">相当于selectKey的SQL为：VALUES IDENTITY_VAL_LOCAL()</td></tr><tr><td align="left">HSQLDB</td><td align="left">相当于selectKey的SQL为：CALL IDENTITY()</td></tr><tr><td align="left">Informix</td><td align="left">相当于selectKey的SQL为：select dbinfo(‘sqlca.sqlerrd1’) from systables where tabid=1</td></tr><tr><td align="left">MySql</td><td align="left">相当于selectKey的SQL为：SELECT LAST_INSERT_ID()</td></tr><tr><td align="left">SqlServer</td><td align="left">相当于selectKey的SQL为：SELECT SCOPE_IDENTITY()</td></tr><tr><td align="left">SYBASE</td><td align="left">相当于selectKey的SQL为：SELECT @@IDENTITY</td></tr><tr><td align="left">JDBC</td><td align="left">相当于在生成的insert元素上添加useGeneratedKeys=”true”和keyProperty属性</td></tr></tbody></table></li><li><p>identity 属性可选参数为 true 或 false。</p><ul><li><p>identity 属性为 true 时： the generated <code>&lt;selectKey&gt;</code> element will be placed after the insert</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- identity 为 true 时，selectKey 节点 order 属性 为 AFTER --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">"jobId"</span> <span class="attr">order</span>=<span class="string">"AFTER"</span> <span class="attr">resultType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">    SELECT LAST_INSERT_ID()</span><br><span class="line"><span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>order 属性 为 after 表示先执行插入语句再获取 id，适用于 mysql、oracle 这种可以自动生成 id 序列的数据库。</p></li><li><p>identity 属性为 false 时：the generated <code>&lt;selectKey&gt;</code> will be placed before the insert</p></li><li><p>order 属性 为 false 表示会先生成 id，然后再执行插入。</p></li></ul></li></ul></li></ul><h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="入门案例-1"><a href="#入门案例-1" class="headerlink" title="入门案例"></a>入门案例</h2><h3 id="Schema"><a href="#Schema" class="headerlink" title="Schema"></a>Schema</h3><p>spring 在启动的时候需要验证 xml 文档，约束的作用就是来验证配置文件的 xml 文档语法的正确性。</p><p>XML 文档的 schema 约束定义了文档的结构，内容和语法，元素和属性等（规范）。</p><ol><li>XML 配置文件中所有的标签和属性都需要 schema 来定义。</li><li><a href="http://www.springframework.org/schema/" target="_blank" rel="noopener">spring 官网 schema 约束下载地址</a>。</li></ol><h3 id="Maven-依赖-6"><a href="#Maven-依赖-6" class="headerlink" title="Maven 依赖"></a>Maven 依赖</h3><p>spring-context 依赖于 spring-aop、spring-beans、spring-core 和 spring-expression。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Spring-配置文件"><a href="#Spring-配置文件" class="headerlink" title="Spring 配置文件"></a>Spring 配置文件</h3><ol><li><p>spring 模板:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Spring 配置文件放在 resources 目录下。</li></ul></li><li><p>给 bean 对象赋值：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"teacher"</span> <span class="attr">class</span>=<span class="string">"com.tutorialspoint.Teacher"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"zs"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"course"</span> <span class="attr">class</span>=<span class="string">"com.tutorialspoint.Course"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"message"</span> <span class="attr">ref</span>=<span class="string">"teacher"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>bean 标签表示 bean 对象，bean 对象拥有 getter 和 setter 方法。</p></li><li><p>id 唯一标识。</p></li><li><p>class 为限定名，可通过双击类名 -&gt; 鼠标右键 -&gt; 复制限定名</p><img src="1.png" width="40%"></li><li><p>property 标签表示 bean 对象中的属性。</p></li><li><p>name 为 bean 对象中的属性（不可自定义）。</p></li><li><p>value 属性指定 bean 对象中对应的属性进行赋值（8 个基本类型 + String 使用 value 赋值）。</p></li><li><p>ref 用于给 bean 赋引用类型的值，一般指向需要引用的 id 值。</p></li><li><p>course 依赖于 teacher。</p></li></ul></li></ol><h3 id="获取-IOC-实例"><a href="#获取-IOC-实例" class="headerlink" title="获取 IOC 实例"></a>获取 IOC 实例</h3><p>读取 Spring 配置文件（Spring 配置文件名为 beans.xml）并获取 Bean 对象属性。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>).getBean(<span class="string">"helloWorld"</span>).toString());</span><br></pre></td></tr></table></figure><ul><li>ClassPathXmlApplicationContext （Spring 上下文对象）加载 Spring 配置文件，创建并初始化所有的对象。</li><li>getBean 方法根据 id 属性获得所需的 bean。</li></ul><h3 id="查看-IOC-容器中所有-bean-对象"><a href="#查看-IOC-容器中所有-bean-对象" class="headerlink" title="查看 IOC 容器中所有 bean 对象"></a>查看 IOC 容器中所有 bean 对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:applicationContext.xml"</span>);</span><br><span class="line">String[] str = context.getBeanDefinitionNames();</span><br><span class="line"><span class="keyword">for</span> (String string : str) &#123;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"..."</span> + string);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><h3 id="DI-与-IOC"><a href="#DI-与-IOC" class="headerlink" title="DI 与 IOC"></a>DI 与 IOC</h3><table><thead><tr><th align="left">全称</th><th align="left">简称</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">控制反转</td><td align="left">IOC</td><td align="left">将设计好的对象交给容器控制。</td></tr><tr><td align="left">依赖注入</td><td align="left">DI</td><td align="left">组件之间依赖关系由容器在运行期决定（谁依赖谁）。</td></tr></tbody></table><p>IOC 与 DI 是同一个概念的不同角度描述。</p><h3 id="通过-setter-方法注入"><a href="#通过-setter-方法注入" class="headerlink" title="通过 setter 方法注入"></a>通过 setter 方法注入</h3><h4 id="基本类型（包含封装类）"><a href="#基本类型（包含封装类）" class="headerlink" title="基本类型（包含封装类）"></a>基本类型（包含封装类）</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloWorld"</span> <span class="attr">class</span>=<span class="string">"com.tutorialspoint.HelloWorld"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"message"</span> <span class="attr">value</span>=<span class="string">"Hello World!"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="List、-Set、-数组类型"><a href="#List、-Set、-数组类型" class="headerlink" title="List、 Set、 数组类型"></a>List、 Set、 数组类型</h4><p>List、 Set、 数组类型注入方式类似。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloWorld"</span> <span class="attr">class</span>=<span class="string">"com.tutorialspoint.HelloWorld"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>233<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>666<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>biu<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>数组使用 <code>&lt;array&gt;</code> 标签。</li><li>list 使用 <code>&lt;list&gt;</code> 标签。</li><li>set 使用 <code>&lt;settings&gt;</code> 标签。</li></ul><h4 id="Map-类型"><a href="#Map-类型" class="headerlink" title="Map 类型"></a>Map 类型</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloWorld"</span> <span class="attr">class</span>=<span class="string">"com.tutorialspoint.HelloWorld"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>key<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>value<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>key-233<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>value-233<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Properties-类"><a href="#Properties-类" class="headerlink" title="Properties 类"></a>Properties 类</h4><ol><li><p>Boss 类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boss</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Properties mails;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Properties <span class="title">getMails</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mails;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMails</span><span class="params">(Properties mails)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mails = mails;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(mails);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注入配置：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"boss2"</span> <span class="attr">class</span>=<span class="string">"com.spring.model.Boss"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mails"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"jobMail"</span>&gt;</span>john-office@163.com<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"lifeMail"</span>&gt;</span>john-life@163.com<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="通过构造方法注入"><a href="#通过构造方法注入" class="headerlink" title="通过构造方法注入"></a>通过构造方法注入</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloWorld"</span> <span class="attr">class</span>=<span class="string">"com.tutorialspoint.HelloWorld"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"abcdefg"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"teacher"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>构造方法有两个参数（第一个 String 类型，第二个 Teacher 类型）。</p></li><li><p>注入参数必须和构造方法的形参一样（顺序不能跌倒）。</p></li><li><p>index 属性指定注入形参顺序。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloWorld"</span> <span class="attr">class</span>=<span class="string">"com.tutorialspoint.HelloWorld"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"teacher"</span> <span class="attr">index</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"abcdefg"</span> <span class="attr">index</span>=<span class="string">"0"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>name 属性指定注入形参名称。</p></li><li><p>type 属性指定注入类型。</p></li></ul><h3 id="通过命名空间注入"><a href="#通过命名空间注入" class="headerlink" title="通过命名空间注入"></a>通过命名空间注入</h3><p>添加 <code>xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</code> p 命名空间（通过 setter 方法注入）。</p><p>添加 <code>xmlns:c=&quot;http://www.springframework.org/schema/c&quot;</code> c 命名空间（通过构造函数注入）。</p><p>通过 p 命名空间注入示例：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloWorld"</span> <span class="attr">class</span>=<span class="string">"com.tutorialspoint.HelloWorld"</span> <span class="attr">p:</span>属性名=<span class="string">"属性值"</span> <span class="attr">p:</span>属性名<span class="attr">-ref</span>=<span class="string">"属性值"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>p:属性名</code> 适用于基本类型。</li><li><code>p:属性名-ref</code> 适用于引用类型。</li></ul><h3 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h3><h4 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h4><ul><li>类中的对象属性和 IOC 容器中的 bean 对象自动赋值（通过名字 id、类型和构造函数），即自动装配。</li><li>自动装配只适用与引用类型。</li></ul><h4 id="自动装配模式"><a href="#自动装配模式" class="headerlink" title="自动装配模式"></a>自动装配模式</h4><p>通过配置 bean 标签中的 autowire 属性，配置自动装配模式。</p><table><thead><tr><th align="left">模式</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">no</td><td align="left">该模式表示默认情况下，不自动装配。</td></tr><tr><td align="left">byName</td><td align="left">根据 bean 属性名和 xml 中的 id 值自动装配。</td></tr><tr><td align="left">byType</td><td align="left">根据类型自动装配（默认）。</td></tr><tr><td align="left">constructor</td><td align="left">根据构造函数自动装配。</td></tr><tr><td align="left">default</td><td align="left">1. 表示默认采用上一级标签的自动装配的取值。<br>2. 如果存在多个配置文件的话，那么每一个配置文件的自动装配方式都是独立的。</td></tr></tbody></table><h4 id="全局自动装配"><a href="#全局自动装配" class="headerlink" title="全局自动装配"></a>全局自动装配</h4><p>可以在 beans 标签设置 default-autowire 属性配置全局自动装配。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/util </span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/util/spring-util.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span> <span class="attr">default-autowire</span>=<span class="string">"byName"</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cat"</span> <span class="attr">class</span>=<span class="string">"com.hdu.autowire.Cat"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dog"</span> <span class="attr">class</span>=<span class="string">"com.hdu.autowire.Dog"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.hdu.autowire.User"</span> <span class="attr">autowire</span>=<span class="string">"default"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user2"</span> <span class="attr">class</span>=<span class="string">"com.hdu.autowire.User"</span> <span class="attr">autowire</span>=<span class="string">"default"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user3"</span> <span class="attr">class</span>=<span class="string">"com.hdu.autowire.User"</span> <span class="attr">autowire</span>=<span class="string">"default"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="基于注解依赖注入"><a href="#基于注解依赖注入" class="headerlink" title="基于注解依赖注入"></a>基于注解依赖注入</h2><h3 id="注解-1"><a href="#注解-1" class="headerlink" title="注解"></a>注解</h3><table><thead><tr><th align="left">注解</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">@Controller</td><td align="left">标记 controller 层类在 IOC 容器中生成 bean 对象（纳入 IOC 容器）。</td></tr><tr><td align="left">@Service</td><td align="left">标记 service 层类在 IOC 容器中生成 bean 对象（纳入 IOC 容器）。</td></tr><tr><td align="left">@Repository</td><td align="left">标记 dao 层类在 IOC 容器中生成 bean 对象（纳入 IOC 容器）。</td></tr><tr><td align="left">@Component</td><td align="left">是一种泛指（三层之外），spring 扫描注解配置时，会标记这些类要生成 bean（纳入 IOC 容器）。</td></tr></tbody></table><h3 id="配置扫描器"><a href="#配置扫描器" class="headerlink" title="配置扫描器"></a>配置扫描器</h3><p>如果通过注解方式纳入 IOC 容器，需要在 IOC 容器中开启扫描器。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"包类路径"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>component-scan 标签 base-package 属性指定类路径下寻找标注了 @Component、@Service、@Controller、@Repository 注解的类，并把这些类纳入 IOC 容器。</li></ul><h4 id="排除"><a href="#排除" class="headerlink" title="排除"></a>排除</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 排除Controller注解的扫描 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"exampleBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 排除扫描符合正则表达式的类,此处排除com.wx.comm.util包下的所有类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"exampleBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"regex"</span> <span class="attr">expression</span>=<span class="string">"com.wx.comm.util.*"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 排除指定包exampleBean下的CommFF类的扫描 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"exampleBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"assignable"</span> <span class="attr">expression</span>=<span class="string">"exampleBean.CommFF"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用-4"><a href="#使用-4" class="headerlink" title="使用"></a>使用</h3><p>默认 bean 的名称为类名首字母小写，下例中 bean 的名称为 test。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"test"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可通过给 @Component 注解 value 参数赋值，为 bean 对象自定义名称。</li></ul><h3 id="自动装配-1"><a href="#自动装配-1" class="headerlink" title="自动装配"></a>自动装配</h3><h4 id="注解-2"><a href="#注解-2" class="headerlink" title="注解"></a>注解</h4><table><thead><tr><th align="left">注解</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">@Autowired</td><td align="left">默认按 byType 自动注入。</td></tr><tr><td align="left">@Qualifier</td><td align="left">1. 当容器中存在多个 Bean 的类型与需要注入的相同时，注入将不能执行。<br>2. 通过 @Qualifier 注解指定注入 bean 的名称。</td></tr><tr><td align="left">@Resource</td><td align="left">默认按 byName 自动装配。</td></tr></tbody></table><h5 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h5><table><thead><tr><th align="left">@Autowired 参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">required</td><td align="left">布尔类型，依赖对象是否不允许为 null，默认 true。</td></tr></tbody></table><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><img src="20.png" width="80%"><ul><li>此例可以通过 @Resource 注解替换，简写 @Qualifier 注解。</li><li>@Resource 默认按 byName 自动装配。</li></ul><h2 id="读取-properties-文件配置参数"><a href="#读取-properties-文件配置参数" class="headerlink" title="读取 properties 文件配置参数"></a>读取 properties 文件配置参数</h2><ol><li><p>Spring 容器加载 properties 配置文件。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:config.properties"</span> <span class="attr">file-encoding</span>=<span class="string">"UTF-8"</span> <span class="attr">ignore-unresolvable</span>=<span class="string">"true"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在属性通过 @Value 注解获取配置文件参数。</p><img src="188.png" width="50%"></li></ol><h2 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h2><h3 id="注解-3"><a href="#注解-3" class="headerlink" title="注解"></a>注解</h3><table><thead><tr><th align="left">注解</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">@Configuration</td><td align="left">声明该类为配置类，并纳入 IOC 容器（因为依赖于 @Component 注解）。</td></tr><tr><td align="left">@Bean</td><td align="left">让注解的方法生成 bean 对象，并让 Spring 管理。</td></tr></tbody></table><h3 id="使用-5"><a href="#使用-5" class="headerlink" title="使用"></a>使用</h3><ol><li><p>注入对象：</p><img src="200.png" width="80%"><ul><li>方法名对应 bean 标签的 id 属性。</li><li>返回值对应 bean 标签 class 属性。</li></ul></li><li><p>通过 set 方法给 bean 对象赋值：</p><img src="201.png" width="80%"></li><li><p>通过 AnnotationConfigApplicationContext 对象获取上下文对象。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AnnotationConfigApplicationContext applicationContext  = <span class="keyword">new</span> AnnotationConfigApplicationContext(AppConfig.class);</span><br><span class="line">applicationContext.getBean(<span class="string">"stuService"</span>);</span><br></pre></td></tr></table></figure></li></ol><h3 id="通过注解配置扫描器"><a href="#通过注解配置扫描器" class="headerlink" title="通过注解配置扫描器"></a>通过注解配置扫描器</h3><h4 id="注解-4"><a href="#注解-4" class="headerlink" title="注解"></a>注解</h4><table><thead><tr><th align="left">注解</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">@ComponentScan</td><td align="left">扫描路径下标注了 @Component、@Service、@Controller、@Repository 的类，并把这些类纳入 IOC 容器。该注解默认会扫描该类所在的包下所有的配置类。</td></tr></tbody></table><h4 id="使用-6"><a href="#使用-6" class="headerlink" title="使用"></a>使用</h4><p>在配置类（标注 @Configuration 注解的类）上添加 @ComponentScan 注解。</p><img src="24.png" width="60%"><h4 id="注意-2"><a href="#注意-2" class="headerlink" title="注意"></a>注意</h4><ul><li>通过配置类配置的 IOC 容器和通过 XML 配置的 IOC 容器是相互独立的。</li><li>所以通过注解形式配置的扫描器扫描注解（@Component 等等）是无法纳入通过 XML 配置的 IOC 容器中，只能纳入通过配置类配置的 IOC 容器中。</li><li>要想纳入通过 XML 配置的 IOC 容器中，必须配置 XML 形式的扫描器。</li></ul><h2 id="Spring-整合-JUnit"><a href="#Spring-整合-JUnit" class="headerlink" title="Spring 整合 JUnit"></a>Spring 整合 JUnit</h2><h3 id="Maven-依赖-7"><a href="#Maven-依赖-7" class="headerlink" title="Maven 依赖"></a>Maven 依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用-7"><a href="#使用-7" class="headerlink" title="使用"></a>使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(locations = &#123;<span class="string">"classpath:applicationContext.xml"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataHandler</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">            ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:applicationContext.xml"</span>);</span><br><span class="line">            String[] str = context.getBeanDefinitionNames();</span><br><span class="line">            <span class="keyword">for</span> (String string : str) &#123;</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">"..."</span> + string);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@RunWith 指定 junit 运行环境。</li><li>@ContextConfiguration 加载 Spring 配置文件。</li></ul><h2 id="Spring-整合-AOP"><a href="#Spring-整合-AOP" class="headerlink" title="Spring 整合 AOP"></a>Spring 整合 AOP</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><table><thead><tr><th align="left">名词</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">通知（Advice）</td><td align="left">实现的功能。</td></tr><tr><td align="left">连接点（JoinPoint）</td><td align="left">允许你使用通知的地方，基本每个方法的前后，或抛出异常时都可以是连接点。</td></tr><tr><td align="left">切入点（Pointcut）</td><td align="left">筛选出要使用通知的连接点，为切入点。</td></tr><tr><td align="left">切面（Aspect）</td><td align="left">切面是通知和切入点的结合。</td></tr></tbody></table><h3 id="Maven-依赖-8"><a href="#Maven-依赖-8" class="headerlink" title="Maven 依赖"></a>Maven 依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>aopalliance<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aopalliance<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>aopalliance<ul><li>AOP 联盟的 API 包，里面包含了针对面向切面的接口。</li></ul></li><li>aspectjweaver<ul><li>AspectJ 是一个面向切面的框架，它扩展了Java语言。</li><li>AspectJ 不是 Spring 的一部分。</li></ul></li></ol><h3 id="execution-表达式"><a href="#execution-表达式" class="headerlink" title="execution 表达式"></a>execution 表达式</h3><p>execution 表达式用于匹配方法执行的连接点。</p><ul><li><code>public * *(..)</code><ul><li>第一个 * 号表示返回任意类型。</li><li>第二个 * 号表示匹配方法名。</li><li><code>..</code> 表示匹配任意形参。</li><li>该 execution 表达式意思为匹配所有公有属性的方法。</li></ul></li><li><code>* top.zero3737..*.*(..)</code><ul><li>第一个 * 号表示返回任意类型。</li><li>包名表示要匹配的包。</li><li><code>..</code> 表示匹配当前包和当前包的所有子包。</li><li>第二个 * 号表示匹配任意类名。</li><li>第三个 * 号表示匹配任意方法名。</li><li><code>..</code> 表示匹配任意形参。</li><li>该 execution 表达式意思为匹配 top.zero3737 包下的所有方法。</li></ul></li><li>可以同时使用多条 execution 表达式匹配被切入的方法。<ul><li>多条 execution 表达式用 or 分隔。</li></ul></li></ul><h3 id="基于接口实现-AOP"><a href="#基于接口实现-AOP" class="headerlink" title="基于接口实现 AOP"></a>基于接口实现 AOP</h3><h4 id="通知接口"><a href="#通知接口" class="headerlink" title="通知接口"></a>通知接口</h4><h5 id="前置通知"><a href="#前置通知" class="headerlink" title="前置通知"></a>前置通知</h5><p>实现 MethodBeforeAdvice（前置通知）接口。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeforeAdvice</span> <span class="keyword">implements</span> <span class="title">MethodBeforeAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 前置通知逻辑</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>method 为切入方法。</li><li>args 为切入方法的形参。</li><li>target 为目标对象（切入方法的所属对象）。</li></ul><h5 id="后置通知"><a href="#后置通知" class="headerlink" title="后置通知"></a>后置通知</h5><p>实现 AfterReturningAdvice 接口。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAfterReturningAdvice</span> <span class="keyword">implements</span> <span class="title">AfterReturningAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object returnValue, Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 后置通知逻辑</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>returnValue 为切入方法的返回值。</li><li>method 为切入方法。</li><li>args 为切入方法的形参。</li><li>target 为目标对象（切入方法的所属对象）。</li></ul><h5 id="异常通知"><a href="#异常通知" class="headerlink" title="异常通知"></a>异常通知</h5><p>实现 ThrowsAdvice 接口。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> <span class="keyword">implements</span> <span class="title">ThrowsAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">(Method method, Object[] args, Object target, Exception e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发生异常的逻辑操作。</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>该接口没有包含任何方法，但必须定义 <code>void afterThrowing([Method, args, target], ThrowableSubclass);</code> 方法（发生异常时的逻辑操作）。</li></ul><h5 id="环绕通知"><a href="#环绕通知" class="headerlink" title="环绕通知"></a>环绕通知</h5><p>实现 MethodInterceptor 接口。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    </span><br><span class="line">    Object result = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 前置通知逻辑...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 前置通知逻辑...</span></span><br><span class="line">        </span><br><span class="line">        result = invocation.proceed();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 后置通知逻辑...</span></span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 异常通知逻辑...</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>invocation.proceed() 控制切入方法的执行（相当于切入方法）。</li><li>invocation.proceed() 返回值为切入方法的返回值。</li><li>invocation.getThis() 获取目标对象。</li><li>invocation.getMethod() 获取切入方法。</li><li>invocation.getArguments() 获取切入方法形参。</li></ul><h5 id="注意-3"><a href="#注意-3" class="headerlink" title="注意"></a>注意</h5><p>执行顺序：</p><ol><li>前置通知。</li><li>环绕通知模拟的前置通知。</li><li>环绕通知模拟的后置通知。</li><li>后置通知。</li></ol><p>从执行顺序看，环绕通知相当于过滤器（可以改变目标方法的返回值，后置通知接收环绕通知修改的返回值）。</p><h4 id="XML-配置"><a href="#XML-配置" class="headerlink" title="XML 配置"></a>XML 配置</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"show"</span> <span class="attr">class</span>=<span class="string">"top.zero3737.spring.Show"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"logBefore"</span> <span class="attr">class</span>=<span class="string">"top.zero3737.spring.LogBefore"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(public * *(..))"</span> <span class="attr">id</span>=<span class="string">"showName"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"logBefore"</span> <span class="attr">pointcut-ref</span>=<span class="string">"showName"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Show 为被切入类。</li><li>LogBefore 为通知类。</li><li>aop:pointcut 标签声明切入点。<ul><li>expression 属性定义 execution 表达式。</li><li>execution 表达式筛选连接点。</li><li>id 属性为 aop:pointcut 标签定义唯一标识。</li></ul></li><li>aop:advisor 标签将通知类和 execution 表达式连接起来，而 execution 表达式筛选切点。<ul><li>advice-ref 属性引用通知类。</li><li>pointcut-ref 属性引用 aop:pointcut 标签（execution 表达式）。</li></ul></li></ul><h3 id="基于注解实现-AOP"><a href="#基于注解实现-AOP" class="headerlink" title="基于注解实现 AOP"></a>基于注解实现 AOP</h3><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>开启注解对 AOP 的支持（声明自动为 IOC 容器中那些配置 @aspectJ 切面的 bean 创建代理，织入切面）。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="注解-5"><a href="#注解-5" class="headerlink" title="注解"></a>注解</h4><p>@Aspect 声明该类是一个通知类（需要将通知类纳入 IOC 容器）。</p><p>@Before(“execution 表达式”) 声明该方法是前置通知。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogBefore</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义切点</span></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"execution(* top.zero3737.spring.Show.showName(String))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 前置通知方法逻辑...</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>before 方法名字可自定义。</li></ul><p>@AfterReturning(“execution 表达式”) 声明该方法是后置通知。</p><p>@AfterThrowing(“execution 表达式”) 声明异常通知。</p><ul><li><p>可以通过 throwing 指定异常参数。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AfterThrowing</span>(pointcut=<span class="string">"execution(* top.zero3737.spring.Show.showName(String))"</span>, throwing=<span class="string">"exception"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">(JoinPoint joinPoint, Exception exception)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 异常通知...</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>throwing 指定变量名为 exception 为异常类。</li><li>exception 会捕获相同类型的异常。</li></ul></li></ul><p>@After(“execution 表达式”) 声明最终通知。</p><p>@Around(“execution 表达式”) 声明环绕通知。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Around</span>(<span class="string">"execution(* top.zero3737.spring.Show.showName(String))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 前置通知...</span></span><br><span class="line">        </span><br><span class="line">        proceedingJoinPoint.proceed();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 后置通知...</span></span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 异常通知...</span></span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 最终通知...</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取目标对象信息"><a href="#获取目标对象信息" class="headerlink" title="获取目标对象信息"></a>获取目标对象信息</h4><p>前置、后置、异常通知通过 JoinPoint 对象获取。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义切点</span></span><br><span class="line"><span class="meta">@AfterReturning</span>(pointcut=<span class="string">"execution(* top.zero3737.spring.Show.showName(String))"</span>, returning=<span class="string">"returningVaule"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">(JoinPoint joinPoint, Object returningVaule)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 后置通知方法逻辑...</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>returning 属性指定一个形参名，用于表示通知方法中相同形参名的参数为返回值。</li><li>joinPoint.getTarget() 获取目标对象。</li><li>joinPoint.getSignature().getName() 获取切入点的方法名。</li><li>joinPoint.getArgs().length 获取切入点的参数个数。</li></ul><p>环绕通知通过 ProceedingJoinPoint 对象获取。</p><h3 id="基于-XML-实现-AOP"><a href="#基于-XML-实现-AOP" class="headerlink" title="基于 XML 实现 AOP"></a>基于 XML 实现 AOP</h3><h4 id="通知类"><a href="#通知类" class="headerlink" title="通知类"></a>通知类</h4><p>需要通过 XML 配置将 LogAspect 类指定为通知类。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showBeginLog</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"AOP日志开始"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showReturnLog</span><span class="params">(JoinPoint joinPoint, Object result)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"AOP方法返回"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showExceptionLog</span><span class="params">(JoinPoint joinPoint, NullPointerException ex)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"AOP方法异常"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showAfterLog</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"AOP方法结束"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 前置通知...</span></span><br><span class="line">            </span><br><span class="line">            proceedingJoinPoint.proceed();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 后置通知...</span></span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 异常通知...</span></span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 最终通知...</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="XML-配置-1"><a href="#XML-配置-1" class="headerlink" title="XML 配置"></a>XML 配置</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"logAspect"</span> <span class="attr">class</span>=<span class="string">"com.neuedu.aop.proxy.LogAspect"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"calculator"</span> <span class="attr">class</span>=<span class="string">"com.neuedu.aop.target.MathCalculatorImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- 配置AOP,需要导入AOP名称空间 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 声明切入点表达式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* com.neuedu.aop.target.MathCalculatorImpl.*(..))"</span> <span class="attr">id</span>=<span class="string">"myPointCut"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置日志切面类,引用前面的类 ,通过order属性控制优先级--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"logAspect"</span> <span class="attr">order</span>=<span class="string">"25"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 通过method属性指定切面类的切面方法，通过pointcut-ref指定切入点表达式 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前置通知 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"showBeginLog"</span> <span class="attr">pointcut-ref</span>=<span class="string">"myPointCut"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 最终通知 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"showAfterLog"</span> <span class="attr">pointcut-ref</span>=<span class="string">"myPointCut"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 异常通知 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">"showExceptionLog"</span> <span class="attr">pointcut-ref</span>=<span class="string">"myPointCut"</span> <span class="attr">throwing</span>=<span class="string">"ex"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 后置通知 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">"showReturnLog"</span> <span class="attr">pointcut-ref</span>=<span class="string">"myPointCut"</span> <span class="attr">returning</span>=<span class="string">"result"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 环绕通知 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"around"</span> <span class="attr">pointcut-ref</span>=<span class="string">"myPointCut"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>MathCalculatorImpl 类为被切入类。</li><li>logAspect 类为通知类。</li><li>pointcut-ref 属性引用 execution 表达式。</li><li>throwing 指定 showExceptionLog 方法中形参变量名为 ex 为异常。</li><li>returning 指定 showReturnLog 方法中形参变量名为 result 为返回值。</li></ul><h2 id="Spring-整合事务"><a href="#Spring-整合事务" class="headerlink" title="Spring 整合事务"></a>Spring 整合事务</h2><h3 id="Maven-依赖-9"><a href="#Maven-依赖-9" class="headerlink" title="Maven 依赖"></a>Maven 依赖</h3><p>spring-jdbc 依赖与 spring-tx，所以直接引用 spring-jdbc 包。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-tx --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>spring-tx 是事务相关 jar 包。</li><li>spring-jdbc 是操作数据库相关的 jar 包。</li></ul><h3 id="XML-配置-2"><a href="#XML-配置-2" class="headerlink" title="XML 配置"></a>XML 配置</h3><ol><li><p>添加事务命名空间。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:tx="http://www.springframework.org/schema/tx"</span><br><span class="line">xsi:schemaLocation=http://www.springframework.org/schema/tx</span><br><span class="line">http://www.springframework.org/schema/tx/spring-tx.xsd</span><br></pre></td></tr></table></figure></li><li><p>配置数据源。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp2.BasicDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://127.0.0.1:3306/database?useUnicode=true&amp;amp;characterEncoding=utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userName"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置事务管理器 transactionManager。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>DataSourceTransactionManager 类需要引用数据源。</li><li>DataSourceTransactionManager 类在 spring-jdbc 包中。</li><li>DataSourceTransactionManager 为 JDBC 事务。</li><li>org.springframework.orm.hibernate3.HibernateTransactionManager 为 Hibernate 事务。</li><li>org.springframework.orm.jpa.JpaTransactionManager 为 JPA 事务。</li></ul></li></ol><h3 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h3><h4 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h4><ul><li>Spring 并不直接管理事务，而是提供了多种事务管理器，他们将事务管理的职责委托给 Hibernate 或者 JTA 等持久化机制所提供的相关平台框架的事务来实现。</li><li>声明式事务管理建立在 AOP 之上。其本质是对方法前后进行拦截，然后在目标方法开始之前创建或者加入一个事务，在执行完目标方法之后根据执行情况提交或者回滚事务。</li><li>事务传播行为：<ol><li>事务传播行为是 Spring 框架独有的事务增强特性，他不属于的事务实际提供方数据库行为。</li><li>事务传播行为用来描述由某一个事务传播行为修饰的方法被嵌套进另一个方法的时事务如何传播。</li></ol></li></ul><h4 id="基于-XML"><a href="#基于-XML" class="headerlink" title="基于 XML"></a>基于 XML</h4><ol><li><p>增加对事务的支持：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通知 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- 根据方法名指定事务的属性 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"save*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> /&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"insert*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> /&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"add*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> /&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"create*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> /&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> /&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> /&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"select*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>引用 transactionManager 事务管理器。</li></ul></li><li><p>定义切面：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置事务切入点, 以及把事务切入点和事务属性关联起来 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* com.taotao.service.*.*(..))"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>service 层在方法中抛异常即可事务回滚，千万不要捕获（就算在 controller 层也直接往上抛）。</p><img src="178.png" width="50%"></li></ol><h4 id="基于注解"><a href="#基于注解" class="headerlink" title="基于注解"></a>基于注解</h4><ol><li><p>增加对事务注解（@Transactional）的支持：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在方法上通过注解 @Transactional 声明该方法为事务。</p><img src="177.png" width="60%"><ul><li>@Transactional 注解如果不配置 rollbackFor 属性，那么事物只会在遇到 RuntimeException 的时候才会回滚。</li><li>readonly 并不是所有数据库都支持的，不同的数据库下会有不同的结果。<ul><li>mysql 支持 readOnly，设置为 true 时，只能查询，若增删改会异常。</li><li>oracle 不支持 readOnly，readOnly 属性是 true 还是 false 均不影响 SQL 的增删改查。</li></ul></li></ul></li></ol><h2 id="Spring-整合-JDBC"><a href="#Spring-整合-JDBC" class="headerlink" title="Spring 整合 JDBC"></a>Spring 整合 JDBC</h2><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><img src="189.png" width="60%"><h3 id="使用-8"><a href="#使用-8" class="headerlink" title="使用"></a>使用</h3><p>插入 SQL 语句：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">FindData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    jdbcTemplate.update(<span class="string">"insert ssm_user SET username='姚明', password='25', id=233;"</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过占位符：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UpdataData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> update = jdbcTemplate.update(<span class="string">"insert ssm_user ( username, password ) VALUES (?, ?);"</span>, <span class="string">"zs"</span>, <span class="number">123456</span>);</span><br><span class="line">    System.out.println(update);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指定对象查询一条记录：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">FindData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    String sql = <span class="string">"select * from ssm_user where id = ?;"</span>;</span><br><span class="line">    Object[] objects = &#123;<span class="number">1</span>&#125;;</span><br><span class="line">    User queryForObject = jdbcTemplate.queryForObject(sql, objects, <span class="keyword">new</span> BeanPropertyRowMapper&lt;SsmUser&gt;(User.class));</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>只能返回单条记录，多条记录将报错。</li></ul><p>不指定对象查询一条记录：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">FindDataWithMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    String sql = <span class="string">"select * from ssm_user where id = ?;"</span>;</span><br><span class="line">    Map&lt;String, Object&gt; queryForMap = jdbcTemplate.queryForMap(sql, <span class="number">1</span>);</span><br><span class="line">    System.out.println(queryForMap);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>也只能查询一条记录，返回多条记录会报错。</li></ul><p>指定对象对象查询多条记录：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">FindDataWithBeanForList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    String sql = <span class="string">"select * from ssm_user where id &gt; ?;"</span>;</span><br><span class="line">    Object[] object = &#123;<span class="number">10</span>&#125;;</span><br><span class="line">    List&lt;User&gt; query = jdbcTemplate.query(sql, object, <span class="keyword">new</span> BeanPropertyRowMapper&lt;User&gt;(User.class));</span><br><span class="line">    <span class="keyword">for</span> (User user : query) &#123;</span><br><span class="line">        </span><br><span class="line">        System.out.println(user);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不指定对象对象查询多条记录：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">FindDataWithMapForList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    String sql = <span class="string">"select * from ssm_user where id &gt; ?;"</span>;</span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; queryForList = jdbcTemplate.queryForList(sql, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">for</span> (Map&lt;String, Object&gt; user : queryForList) &#123;</span><br><span class="line">        </span><br><span class="line">        System.out.println(user);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 SQL 函数返回 String 类型：</p><img src="190.png" width="60%"><p>通过 SQL 函数返回 int 类型：</p><img src="191.png" width="60%"><h2 id="Spring-整合-MyBatis"><a href="#Spring-整合-MyBatis" class="headerlink" title="Spring 整合 MyBatis"></a>Spring 整合 MyBatis</h2><h3 id="Maven-依赖-10"><a href="#Maven-依赖-10" class="headerlink" title="Maven 依赖"></a>Maven 依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>db.properties 配置。</p><img src="5.png" width="50%"><p>PreferencesPlaceholderConfigurer 类可以加载 db.properties 文件（applicationContext.xml）。</p><img src="4.png" width="80%"><p>配置数据库信息（applicationContext.xml）。</p><img src="6.png" width="80%"><p>mybatis 配置文件：</p><img src="8.png" width="80%"><ul><li>加载 mapper 文件。</li></ul><p>SqlSessionFactory 交给 Spring 管理并配置 SqlSessionFactory（applicationContext.xml）。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 将 sqlSessionFactory 交个 Spring 管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载 mapper.xml 文件 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>top/zero3737/dao/*.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 批量定义别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"top.zero3737.entity"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载 mybatis 配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用-9"><a href="#使用-9" class="headerlink" title="使用"></a>使用</h3><p>项目结构。</p><img src="9.png" width="20%"> <img src="10.png" width="20%"><p>mapper 文件</p><img src="17.png" width="80%"><p>StudentMapper 接口。</p><img src="12.png" width="80%"><p>继承 SqlSessionDaoSupport 类和实现 StudentMapper 接口。</p><img src="11.png" width="80%"><p>Service 层调用 dao 层方法。</p><img src="13.png" width="80%"> <img src="14.png" width="80%"><p>applicationContext.xml 中将 StudentServiceImpl 和 StudentDaoImpl 注入 IOC 容器中。</p><img src="15.png" width="80%"><ul><li><p>StudentServiceImpl 是 Service 层方法，调用 dao 层方法。</p></li><li><p>SqlSessionDaoSupport 类有一个 SqlSessionFactory 属性需要注入。</p></li></ul><p>主程序读取 applicationContext.xml 文件通过 StudentService 对象操作数据库。</p><img src="16.png" width="80%"><h3 id="基于动态代理方式-CRUD-整合配置"><a href="#基于动态代理方式-CRUD-整合配置" class="headerlink" title="基于动态代理方式 CRUD 整合配置"></a>基于动态代理方式 CRUD 整合配置</h3><p>通过 mybatis-spring.jar 中的 SqlSessionFactoryBean 类生成动态代理对象。</p><img src="18.png" width="80%"><ul><li>缺点每个 mapper 都需要手动配置一次。</li></ul><p>通过 mybatis-spring.jar 中的 MapperScannerConfigurer 类将批量生成动态代理对象。</p><img src="19.png" width="80%"><ul><li>basePackage 指定 mapper 接口所在的包。</li><li>约定：Spring 动态代理对象为接口名首字母小写，例如：studentMapper 对应接口名 StudentMapper。</li></ul><h2 id="Spring-整合-Web"><a href="#Spring-整合-Web" class="headerlink" title="Spring 整合 Web"></a>Spring 整合 Web</h2><h3 id="Maven-依赖-11"><a href="#Maven-依赖-11" class="headerlink" title="Maven 依赖"></a>Maven 依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>没有 Tomcat 环境，只能通过读取 IOC 配置文件获取实例。</li><li>bean 对象保存在 IOC 容器中，但是客户端发送请求 Tomcat 访问的是 Servlet 容器。</li><li>解决多个 Servlet 入口函数不统一，Spring 需要初始化配置文件（每个 Servlet 执行就初始化配置文件将消耗性能）。</li><li>Tomcat 启动首先读取配置文件，初始化 IOC 容器，该步骤通过监听器实现（Tomcat 启动自动调用监听器方法初始化配置文件）。</li></ul><h3 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h3><ol><li><p>在 web.xml 文件中配置 Listener。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Spring 提供 ServletContextListener 的一个实现类 ContextLoaderListener ，该类可以作为 listener 使用，它会在创建时自动加载 WEB-INF 目录下的 applicationContext.xml 文件。</li></ul></li><li><p>Spring 会读取 contextConfigLocation 参数去加载所有逗号分隔的 xml 文件。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-context.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>如果没有这个参数，Spring 默认加载 WEB-INF/applicationContext.xml 文件。</li></ul></li><li><p>读取多个 Spring 配置文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span></span><br><span class="line">        classpath:contextConfigLocation.xml,</span><br><span class="line">        classpath:contextConfigLocation-Dao.xml,</span><br><span class="line">        classpath:contextConfigLocation-Service.xml,</span><br><span class="line">        classpath:contextConfigLocation-Controller.xml</span><br><span class="line">    <span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 可简写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span></span><br><span class="line">        classpath:contextConfigLocation.xml,</span><br><span class="line">        classpath:contextConfigLocation-*.xml</span><br><span class="line">    <span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="使用-10"><a href="#使用-10" class="headerlink" title="使用"></a>使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/fist"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Servlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        ApplicationContext applicationContext = WebApplicationContextUtils.getWebApplicationContext(req.getServletContext());</span><br><span class="line">        Service service = applicationContext.getBean(<span class="string">"service"</span>, Service.class);</span><br><span class="line">        service.insert();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>WebApplicationContextUtils 类在 spring-web 包中定义。</li><li>ServletContext 对象全局唯一，而且工程内部的所有 Servlet 都共享这个对象。</li></ul><h2 id="Spring-内置工具类"><a href="#Spring-内置工具类" class="headerlink" title="Spring 内置工具类"></a>Spring 内置工具类</h2><h3 id="MD5-加密"><a href="#MD5-加密" class="headerlink" title="MD5 加密"></a>MD5 加密</h3><h4 id="MD5-介绍"><a href="#MD5-介绍" class="headerlink" title="MD5 介绍"></a>MD5 介绍</h4><p>MD5 是信息摘要算法，不可以逆向解密。</p><h4 id="DigestUtils-类-API-介绍"><a href="#DigestUtils-类-API-介绍" class="headerlink" title="DigestUtils 类 API 介绍"></a>DigestUtils 类 API 介绍</h4><table><thead><tr><th align="left">DigestUtils 类中的 API</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">byte[] md5Digest(byte[] bytes)</td><td align="left">返回 MD5 生成 128 位的 byte 数组。</td></tr><tr><td align="left">String md5DigestAsHex(byte[] bytes)</td><td align="left">返回将 MD5 生成 128 位的 byte 数组转为 32 位的 16 进制。</td></tr></tbody></table><h4 id="使用-11"><a href="#使用-11" class="headerlink" title="使用"></a>使用</h4><ol><li><p>导包：<code>import org.springframework.util.DigestUtils;</code></p></li><li><p>加密代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String md5DigestAsHex = DigestUtils.md5DigestAsHex(<span class="string">"123"</span>.getBytes());</span><br><span class="line">System.out.println(md5DigestAsHex);</span><br></pre></td></tr></table></figure></li></ol><h1 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h1><h2 id="入门案例-2"><a href="#入门案例-2" class="headerlink" title="入门案例"></a>入门案例</h2><h3 id="Maven-依赖-12"><a href="#Maven-依赖-12" class="headerlink" title="Maven 依赖"></a>Maven 依赖</h3><p>spring-webmvc 依赖与 spring-context 和 spring-web。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置-3"><a href="#配置-3" class="headerlink" title="配置"></a>配置</h3><p>web.xml 配置：</p><img src="101.png" width="80%"> <img src="100.png" width="80%"><ul><li>此例中 <code>/WEB-INF/springDispatcherServlet-servlet.xml</code> 为 spring 配置文件的默认路径。</li><li>servlet-name 的值修改为 AAA，spring 配置文件默认路径为 <code>/WEB-INF/AAA-servlet.xml</code>。</li><li>如果不使用 Spring 配置文件默认地址，需要通过配置 contextConfigLocation 参数额外指定Spring 文件的路径。</li><li>DispatcherServlet 是前置控制器，拦截匹配的请求，Servlet 拦截匹配规则要自己定义，把拦截下来的请求，依据相应的规则分发到目标 Controller 来处理，是配置 Spring MVC 的第一步。</li></ul><h3 id="使用-12"><a href="#使用-12" class="headerlink" title="使用"></a>使用</h3><p>applicationContext.xml 中配置视图解析器：</p><img src="103.png" width="80%"><ul><li>InternalResourceViewResolver 为视图解析器。</li><li>prefix 前缀，suffix 后缀，自定拼接成 <code>/views/success.jsp</code>，实现页面跳转。</li></ul><p>跳转页面：</p><img src="102.png" width="80%"><ul><li>@RequestMapper 声明拦截指定请求接口。</li></ul><h2 id="指定请求接口-RequestMapper"><a href="#指定请求接口-RequestMapper" class="headerlink" title="指定请求接口@RequestMapper"></a>指定请求接口@RequestMapper</h2><p>声明请求类型：</p><img src="104.png" width="80%"><ul><li>@RequestMapper 嵌套，请求路径为 <code>handler/welcome</code></li><li>params 为指定请求参数。</li></ul><p>指定请求参数的值（不符合则不拦截）：</p><img src="105.png" width="80%"><ul><li><code>!height</code> 请求时候不能包含该参数。</li></ul><p>约定请求头信息：</p><img src="106.png" width="80%"><p>返回 UTF-8 字符编码数字</p><p><code>@RequestMapping(value=&quot;/cat/query&quot;,produces=&quot;text/html;charset=utf-8&quot;)</code>，前面是请求的路径，后面是编码格式。</p><h2 id="获取请求参数"><a href="#获取请求参数" class="headerlink" title="获取请求参数"></a>获取请求参数</h2><h3 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h3><h4 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h4><p>默认前端的请求参数和后端的接收参数名字相同，则自动赋值。</p><ul><li>前端 name=id，后端 String id 接收，前端发送请求，后端 id 自动赋值。</li></ul><p>用来处理 Content-Type: 为 application/x-www-form-urlencoded 编码的内容，提交方式 GET、POST。</p><h4 id="使用-13"><a href="#使用-13" class="headerlink" title="使用"></a>使用</h4><p>前端：</p><img src="142.png" width="80%"><p>后端：</p><img src="143.png" width="80%"><p>参数说明：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestParam</span>(value = <span class="string">"page"</span>, required = <span class="keyword">false</span>, defaultValue = <span class="string">"1"</span>)</span><br></pre></td></tr></table></figure><ul><li>required 声明前端该参数是否为必须。</li><li>defaultValue 前端没有传递参数，指定默认值。</li></ul><h3 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h3><p>该注解常用来处理 Content-Type: 不是 <code>application/x-www-form-urlencoded</code> 编码的内容，例如 application/json, application/xml 等。</p><ul><li>axios 发送 post 请求用 @RequestParam 注解后台接受不了数据，必须用 @RequestBody 才能接受数据。</li></ul><p>在参数左边直接打上参数即可使用。</p><h2 id="页面跳转（不通过-RequestMapper）"><a href="#页面跳转（不通过-RequestMapper）" class="headerlink" title="页面跳转（不通过 @RequestMapper）"></a>页面跳转（不通过 @RequestMapper）</h2><img src="131.png" width="80%"> <img src="132.png" width="80%"><h2 id="视图解析器"><a href="#视图解析器" class="headerlink" title="视图解析器"></a>视图解析器</h2><img src="130.png" width="80%"><ul><li>Spring MVC 中 Controller 层最终返回值为 ModelAndView。</li><li>经过视图解析器返回 jsp 或 html 页面。</li></ul><h2 id="RESTful-风格"><a href="#RESTful-风格" class="headerlink" title="RESTful 风格"></a>RESTful 风格</h2><img src="108.png" width="80%"> <img src="110.png" width="80%"> <img src="109.png" width="80%"><ul><li>通过过滤器增加 DELETE 和 PUT 请求。</li></ul><h3 id="获取路径中的参数-PathVariable"><a href="#获取路径中的参数-PathVariable" class="headerlink" title="获取路径中的参数@PathVariable"></a>获取路径中的参数@PathVariable</h3><p>获取参数：</p><img src="129.png" width="80%"> <img src="107.png" width="80%"><ul><li><code>name=z3</code> 自动赋值。</li></ul><h3 id="增加-DELETE-和-PUT-请求的支持"><a href="#增加-DELETE-和-PUT-请求的支持" class="headerlink" title="增加 DELETE 和 PUT 请求的支持"></a>增加 DELETE 和 PUT 请求的支持</h3><p>spring-web.jar HiddenHttpMethodFilter</p><img src="111.png" width="80%"><h3 id="Spring-MVC-约定"><a href="#Spring-MVC-约定" class="headerlink" title="Spring MVC 约定"></a>Spring MVC 约定</h3><img src="112.png" width="80%"><h3 id="使用-14"><a href="#使用-14" class="headerlink" title="使用"></a>使用</h3><p>前端：</p><img src="113.png" width="80%"><p>后端：</p><img src="114.png" width="80%"><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><h3 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h3><img src="117.png" width="80%"><p>ModelAndView:</p><img src="118.png" width="80%"><p>ModelMap:</p><img src="119.png" width="80%"><p>Model:</p><img src="120.png" width="80%"><p>Map:</p><img src="121.png" width="80%"><ul><li>Map 为原生的储存键值的对象，自然的里面一大堆的方法可以使用；</li><li>​Model 只有寥寥几个方法只适合用于储存数据，简化了新手对于Model对象的操作和理解；</li><li>​ModelMap 继承了 LinkedMap ，除了实现了自身的一些方法，同样的继承 LinkedMap 的方法和特性；</li><li>​ModelAndView 可以在储存数据的同时，可以进行设置返回的逻辑视图，进行控制展示层的跳转；</li></ul><h3 id="存-Session"><a href="#存-Session" class="headerlink" title="存 Session"></a>存 Session</h3><p>后端：</p><img src="115.png" width="80%"><p>注解：</p><img src="116.png" width="80%"><ul><li>@SessionAttributes 将指定 key 存入 Session 中。</li><li>type 为指定类型存入 Session。</li></ul><h2 id="将数据存入-Request-域中"><a href="#将数据存入-Request-域中" class="headerlink" title="将数据存入 Request 域中"></a>将数据存入 Request 域中</h2><img src="170.png" width="80%"> <img src="171.png" width="80%"> - Spring MVC 规定，为了看上去和 Servlet 没有任何关系。<h2 id="ModelAttribute"><a href="#ModelAttribute" class="headerlink" title="@ModelAttribute"></a>@ModelAttribute</h2><h3 id="概念-4"><a href="#概念-4" class="headerlink" title="概念"></a>概念</h3><img src="128.png" width="80%"><h3 id="使用-15"><a href="#使用-15" class="headerlink" title="使用"></a>使用</h3><p>前端：</p><img src="122.png" width="80%"><p>bean 对象：</p><img src="123.png" width="50%"><p>Controller 层：</p><img src="124.png" width="80%"> <img src="126.png" width="80%"> <img src="125.png" width="80%"><ul><li>map 的 key 为 student 对应 testModelAttribute 方法的形参 Student 类型（首字母小写）。</li><li>匹配成功则自动赋值。</li><li>关于 testModelAttribute 形参为 Student 对象：<ul><li>如果前端的 name 属性和 bean 对象的属性名字一样，则自动赋值。</li><li>前端发送请求参数 <code>id = 1</code>，bean 对象中存在 id 属性，则 bean 对象中的 id 属性自动赋值为 1。</li></ul></li></ul><p>map 的 key 和方法参数类型名字不一致（不按照约定）：</p><img src="127.png" width="80%"><h2 id="请求转发和重定向"><a href="#请求转发和重定向" class="headerlink" title="请求转发和重定向"></a>请求转发和重定向</h2><img src="134.png" width="80%"> <img src="133.png" width="80%"><ul><li>请求转发地址栏显示请求接口。</li><li>重定向显示返回页面。</li></ul><h2 id="访问静态资源"><a href="#访问静态资源" class="headerlink" title="访问静态资源"></a>访问静态资源</h2><p>Spring MVC 不会处理静态静态资源。</p><p>在 Spring MVC 配置文件中添加配置：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Servlet 处理静态资源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>静态资源交个 Servlet 处理。</li></ul><p>或在 Spring MVC 中添加资源映射：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/WEB-INF/css"</span> <span class="attr">mapping</span>=<span class="string">"/css/**"</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/WEB-INF/js"</span> <span class="attr">mapping</span>=<span class="string">"/js/**"</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:resources</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="类型转换器"><a href="#类型转换器" class="headerlink" title="类型转换器"></a>类型转换器</h2><p>Spring MVC 内置类型转换器：</p><img src="138.png" width="80%"><p>实现 Converter 接口：</p><img src="140.png" width="80%"><p>Spring MVC 配置：</p><img src="141.png" width="80%"><ul><li>Spring 规定所有的类型转换器必须纳入 ConversionServiceFactoryBean 中管理。</li><li>将 ConversionServiceFactoryBean bean 对象在 Spring MVC 中注册。</li></ul><h2 id="数据格式化"><a href="#数据格式化" class="headerlink" title="数据格式化"></a>数据格式化</h2><p>将 FormattingConversionServiceFactoryBean 纳入 IOC 容器：</p><img src="144.png" width="80%"><p>使用：</p><img src="145.png" width="80%"> - 将前端传递过来的数据固定为 yy-MM-dd（前端只能发送这种日期：1999-09-31）。 <img src="146.png" width="80%"><h2 id="返回json数据-ResponseBody"><a href="#返回json数据-ResponseBody" class="headerlink" title="返回json数据@ResponseBody"></a>返回json数据@ResponseBody</h2><h3 id="jackjson"><a href="#jackjson" class="headerlink" title="jackjson"></a>jackjson</h3><p>Spring 默认 json jar 包，@ResponseBody 注解的方法返回 bean 对象或 List 集合自动返回 json 对象给前端。</p><img src="160.png" width="80%"><h3 id="使用-16"><a href="#使用-16" class="headerlink" title="使用"></a>使用</h3><img src="158.png" width="80%"> <img src="159.png" width="80%"><ul><li>必须先支持返回 json 功能，返回值必须是 List 元素为 bean 对象或 bean 对象。</li></ul><h3 id="注意-4"><a href="#注意-4" class="headerlink" title="注意"></a>注意</h3><p>@ResponseBody 声明可以返回对象，Spirng MVC 会把接收到的对象转换成 String 类型。</p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h3 id="Maven-依赖-13"><a href="#Maven-依赖-13" class="headerlink" title="Maven 依赖"></a>Maven 依赖</h3><p>commons-io.jar</p><p>commons-fileupload.jar</p><h3 id="配置多部件解析器"><a href="#配置多部件解析器" class="headerlink" title="配置多部件解析器"></a>配置多部件解析器</h3><p>Spring 配置中将 CommonsMultipartResolver 纳入 IOC 容器。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文件上传配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"-1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>defaultEncoding 指定默认编码。</li><li>maxUploadSize 指定上传文件大小（值为 -1 ，表示没有限制）。</li></ul><h3 id="使用-17"><a href="#使用-17" class="headerlink" title="使用"></a>使用</h3><p>前端：</p><img src="165.png" width="80%"><p>单文件上传：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">returnPageData</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取时间</span></span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat();</span><br><span class="line">        <span class="comment">// 时间格式化</span></span><br><span class="line">        sdf.applyPattern(<span class="string">"/yyyy/MM/dd"</span>);</span><br><span class="line">        String format = sdf.format(<span class="keyword">new</span> Date());</span><br><span class="line">        <span class="comment">// 获取输入流</span></span><br><span class="line">        InputStream inputStream = file.getInputStream();</span><br><span class="line">        <span class="comment">// 获取文件名</span></span><br><span class="line">        String originalFilename = file.getOriginalFilename();</span><br><span class="line">        <span class="comment">// 以时间戳作为文件名</span></span><br><span class="line">        String fileName = System.currentTimeMillis() + originalFilename.substring(originalFilename.lastIndexOf(<span class="string">"."</span>));</span><br><span class="line">        <span class="comment">// 获取保存路径</span></span><br><span class="line">        String realPath = ContextLoader.getCurrentWebApplicationContext().getServletContext().getRealPath(<span class="string">"/images"</span> + format);</span><br><span class="line">        File _file = <span class="keyword">new</span> File(realPath);</span><br><span class="line">        <span class="comment">// 文件路径不存在在创建</span></span><br><span class="line">        <span class="keyword">if</span>(!_file.exists()) &#123;</span><br><span class="line">            </span><br><span class="line">            _file.mkdirs();</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取输出流</span></span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(realPath + <span class="string">"/"</span> + fileName);</span><br><span class="line">        <span class="comment">// 保存文件</span></span><br><span class="line">        <span class="keyword">byte</span>[] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = inputStream.read(bs)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            </span><br><span class="line">            fileOutputStream.write(bs, <span class="number">0</span>, len);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭输入输出流</span></span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        </span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多文件上传：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">returnPageData</span><span class="params">(@RequestParam(<span class="string">"file"</span>)</span>MultipartFile[] files) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    HashMap&lt;String, Object&gt; hashMap = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (MultipartFile file : files) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 获取时间</span></span><br><span class="line">            SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat();</span><br><span class="line">            sdf.applyPattern(<span class="string">"/yyyy/MM/dd"</span>);</span><br><span class="line">            String format = sdf.format(<span class="keyword">new</span> Date());</span><br><span class="line">            <span class="comment">// 获取文件名</span></span><br><span class="line">            String originalFilename = file.getOriginalFilename();</span><br><span class="line">            <span class="comment">// 以时间戳作为文件名</span></span><br><span class="line">            String fileName = System.currentTimeMillis() + originalFilename.substring(originalFilename.lastIndexOf(<span class="string">"."</span>));</span><br><span class="line">            <span class="comment">// 获取保存路径</span></span><br><span class="line">            String realPath = ContextLoader.getCurrentWebApplicationContext().getServletContext().getRealPath(<span class="string">"/images"</span> + format);</span><br><span class="line">            File _file = <span class="keyword">new</span> File(realPath + <span class="string">"/"</span> + fileName);</span><br><span class="line">            <span class="comment">// 文件路径不存在在创建</span></span><br><span class="line">            <span class="keyword">if</span>(!_file.exists()) &#123;</span><br><span class="line">                </span><br><span class="line">                _file.mkdirs();</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 保存文件</span></span><br><span class="line">            file.transferTo(_file);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        hashMap.put(<span class="string">"msg"</span>, <span class="string">"上传成功"</span>);</span><br><span class="line">        hashMap.put(<span class="string">"code"</span>, <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        </span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        hashMap.put(<span class="string">"msg"</span>, <span class="string">"上传失败"</span>);</span><br><span class="line">        hashMap.put(<span class="string">"code"</span>, <span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> JSON.toJSONString(hashMap);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><h3 id="概念-5"><a href="#概念-5" class="headerlink" title="概念"></a>概念</h3><p>HandlerInterceptor 接口中三个方法的区别：</p><img src="166.png" width="80%"><ul><li>preHandle 方法，该方法将在请求处理之前进行调用。</li><li>postHandle 方法，也就是 Controller 方法调用之后执行，但是它会在进行视图返回渲染之前被调用，所以我们可以在这个方法中对 Controller 处理之后的 ModelAndView 对象进行操作。postHandle 方法被调用的方向跟 preHandle 是相反的，也就是说先声明的 Interceptor 的 postHandle 方法反而会后执行。</li><li>渲染完毕过滤器中 afterCompletion 方法执行，多个拦截器时，最后一个过滤器的 afterCompletion 方法执行，其他过滤器的 afterCompletion 方法不会执行。</li></ul><h3 id="使用-18"><a href="#使用-18" class="headerlink" title="使用"></a>使用</h3><p>preHandle 返回值：</p><img src="167.png" width="80%"><h3 id="配置-4"><a href="#配置-4" class="headerlink" title="配置"></a>配置</h3><p>将拦截器纳入 IOC 容器中。</p><img src="168.jpg" width="80%"><ul><li>拦截器和过滤器匹配路径是 ant 风格，和 Servlet 不同。</li><li>除了 testUpload 拦截所有请求（取交集）。</li><li>bean 实例为拦截器实例。</li></ul><h2 id="Spring-容器和-Spring-MVC-容器关系"><a href="#Spring-容器和-Spring-MVC-容器关系" class="headerlink" title="Spring 容器和 Spring MVC 容器关系"></a>Spring 容器和 Spring MVC 容器关系</h2><p>Spring 是父容器，Spring MVC 是其子容器，子容器可以访问父容器的 bean，而父容器不能访问子容器的 bean。</p><h3 id="Spring-MVC-中的-API-接口为什么要纳入-IOC-中？"><a href="#Spring-MVC-中的-API-接口为什么要纳入-IOC-中？" class="headerlink" title="Spring MVC 中的 API 接口为什么要纳入 IOC 中？"></a>Spring MVC 中的 API 接口为什么要纳入 IOC 中？</h3><p>接收请求是 Servlet 容器中的 Servlet 接收请求，web.xml 这个容器加载的 Spring MVC 容器，所以要纳入 IOC 容器才能处理请求。</p><h2 id="Spring-整合-Spring-MVC"><a href="#Spring-整合-Spring-MVC" class="headerlink" title="Spring 整合 Spring MVC"></a>Spring 整合 Spring MVC</h2><p>概念：</p><img src="168.png" width="80%"><p>web.xml 使用 Spring MVC 拦截所有请求：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 加载 Spring MVC 前端控制器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springDispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springDispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>applicationContext-servlet.xml 配置：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">		<span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">		<span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">		<span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">		<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">	<span class="comment">&lt;!-- 配置注解扫描器 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"top.zero3737.servlet"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 配置视图解析器 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">	   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".html"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- MVC 配置返回 json 数据以 UTF-8 方式编码 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.StringHttpMessageConverter"</span>&gt;</span>  </span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"supportedMediaTypes"</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">value</span>&gt;</span>text/html;charset=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">					    <span class="tag">&lt;<span class="name">value</span>&gt;</span>application/json;charset=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- Servlet 处理静态资源 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span>	</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="字符过滤器"><a href="#字符过滤器" class="headerlink" title="字符过滤器"></a>字符过滤器</h3><p>解决返回前端中文乱码的问题，而且解决不用在每个 Servlet 接口指定编码。</p><h4 id="Maven-依赖-14"><a href="#Maven-依赖-14" class="headerlink" title="Maven 依赖"></a>Maven 依赖</h4><p>spring-web.jar</p><h4 id="配置-5"><a href="#配置-5" class="headerlink" title="配置"></a>配置</h4><p>web.xml 配置：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置字符过滤器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--是否强制设置request的编码为encoding，默认false，不建议更改--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceRequestEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--是否强制设置response的编码为encoding，建议设置为true，下面有关于这个参数的解释--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="fastjson"><a href="#fastjson" class="headerlink" title="fastjson"></a>fastjson</h2><h3 id="概念-6"><a href="#概念-6" class="headerlink" title="概念"></a>概念</h3><p>序列化：序列化是将对象的状态信息转换为可以存储或传输的形式的过程。</p><p>反序列化：就是重新创建对象的过程。</p><h3 id="Maven-依赖-15"><a href="#Maven-依赖-15" class="headerlink" title="Maven 依赖"></a>Maven 依赖</h3><p>fastjson.jar</p><h3 id="使用-19"><a href="#使用-19" class="headerlink" title="使用"></a>使用</h3><h4 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h4><p>bean 对象序列化：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setId(<span class="number">11L</span>);</span><br><span class="line">user.setName(<span class="string">"西安"</span>);</span><br><span class="line">user.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">String jsonString = JSON.toJSONString(user);</span><br></pre></td></tr></table></figure><p>list 序列化：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;SsmUser&gt; list = ssmUserService.findData(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">return</span> JSON.toJSONString(list);</span><br></pre></td></tr></table></figure><p>map 序列化：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> HashMap&lt;Object, Object&gt;();</span><br><span class="line">hashMap.put(<span class="string">"pageData"</span>, ssmUserService.findPageData(<span class="number">2</span>, <span class="number">2</span>));</span><br><span class="line">hashMap.put(<span class="string">"pageNum"</span>, ssmUserService.getPageNum());</span><br><span class="line">hashMap.put(<span class="string">"everyonePageSize"</span>, ssmUserService.getEveryonePageSize());</span><br><span class="line"><span class="keyword">return</span> JSON.toJSONString(hashMap);</span><br></pre></td></tr></table></figure><p>fastjosn 可以序列化任何对象。</p><h4 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h4><p>json 转换成 bean 对象：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String jsonString = <span class="string">"&#123;\"createTime\":\"2018-08-17 14:38:38\",\"id\":11,\"name\":\"西安\"&#125;"</span>;</span><br><span class="line">User user = JSON.parseObject(jsonString, User.class);</span><br></pre></td></tr></table></figure><p>json 转换成 map 对象：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String jsonString = <span class="string">"&#123;\"createTime\":\"2018-08-17 14:38:38\",\"id\":11,\"name\":\"西安\"&#125;"</span>;</span><br><span class="line">Map map = JSON.parseObject(jsonString, Map.class);</span><br></pre></td></tr></table></figure><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><p>格式化：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setId(<span class="number">11L</span>);</span><br><span class="line">user.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">String jsonString = JSON.toJSONString(user, SerializerFeature.PrettyFormat, </span><br><span class="line">        SerializerFeature.WriteNullStringAsEmpty, SerializerFeature.UseSingleQuotes);</span><br></pre></td></tr></table></figure><ul><li><p>效果：</p><img src="1.webp" width="80%"></li></ul><h4 id="注解-6"><a href="#注解-6" class="headerlink" title="注解"></a>注解</h4><p>@JSONField 序列化 JSON 字符串可自定义 key 的名字。</p><p>作用在 get 和 set 方法上：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bean 转 json 时会把 bean 中的 name 转换为 project_name</span></span><br><span class="line"><span class="meta">@JSONField</span>(name=<span class="string">"project_name"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// son 转 bean 时会把 json 中的 project_name 值赋值给 name</span></span><br><span class="line"><span class="meta">@JSONField</span>(name=<span class="string">"project_name"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    name= name;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>序列化过滤属性：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JSONField</span>(serialize=<span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure><ul><li>序列化的时候 name 属性不会包含进 JSON 字符串。</li></ul><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>如何返回下图的 JSON 数据？</p><img src="175.png" width="80%"><ul><li>思路：创建一个含有 total 属性和 rows 属性（row 属性为 List 类型）的对象。</li></ul><h1 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h1><h2 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h2><p>微服务架构是一种将单应用程序作为一套小型服务开发的方法，每种应用程序都在其自己的进程中运行，并与轻量级机制（通常是 HTTP 资源的 API）进行通信。</p><p>这些服务是围绕业务功能构建的，可以通过全自动部署机制进行独立部署。</p><h2 id="构建-Spring-Boot-项目"><a href="#构建-Spring-Boot-项目" class="headerlink" title="构建 Spring Boot 项目"></a>构建 Spring Boot 项目</h2><p>通过 Spring Initialize 构建 Spring Boot 项目。</p><p>进入 <a href="https://start.spring.io/" target="_blank" rel="noopener">Spring Initialize 官网</a> 可快速构建 Spinrg Boot 项目。</p><h3 id="resources-目录文件说明"><a href="#resources-目录文件说明" class="headerlink" title="resources 目录文件说明"></a>resources 目录文件说明</h3><ol><li>static 目录：存放静态资源（js、css、图片、音频、视频）。</li><li>templates 目录：存放模板文件（freemark、thymeleaf 和 jsp 文件）。</li><li>application.properties 为 spring boot 配置文件。</li></ol><h3 id="application-配置文件默认存放路径"><a href="#application-配置文件默认存放路径" class="headerlink" title="application 配置文件默认存放路径"></a>application 配置文件默认存放路径</h3><ol><li>项目根目录下。</li><li>项目根目录中 config 目录下。</li><li>项目的 resources 目录下。</li><li>项目 resources 目录中 config 目录下。</li></ol><h2 id="依赖包"><a href="#依赖包" class="headerlink" title="依赖包"></a>依赖包</h2><h3 id="spring-boot-starter-web"><a href="#spring-boot-starter-web" class="headerlink" title="spring-boot-starter-web"></a>spring-boot-starter-web</h3><p>包含 web 开发经常使用的 jar 包，例如：json、 tomcat 等。</p><h3 id="spring-boot-configuration-processor"><a href="#spring-boot-configuration-processor" class="headerlink" title="spring-boot-configuration-processor"></a>spring-boot-configuration-processor</h3><p>spring 默认使用 yml 中的配置，但有时候要用传统的 xml 或 properties 配置，就需要使用 spring-boot-configuration-processor 了。</p><h3 id="mybatis-spring-boot-starter"><a href="#mybatis-spring-boot-starter" class="headerlink" title="mybatis-spring-boot-starter"></a>mybatis-spring-boot-starter</h3><p>spring boot 整合 mybatis</p><h2 id="application-properties-配置"><a href="#application-properties-配置" class="headerlink" title="application.properties 配置"></a>application.properties 配置</h2><h3 id="配置选项"><a href="#配置选项" class="headerlink" title="配置选项"></a>配置选项</h3><table><thead><tr><th align="left">选项</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">server.port</td><td align="left">修改端口号</td></tr><tr><td align="left">spring.http.encoding.charset</td><td align="left">修改请求响应编码</td></tr><tr><td align="left">debug</td><td align="left">true 开启 debug 模式</td></tr><tr><td align="left">spring.profiles.active</td><td align="left">指定开发环境</td></tr><tr><td align="left">server.servlet.context-path</td><td align="left">指定项目名字</td></tr></tbody></table><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><p><code>server.port = 8888</code> 修改 Tomcat 端口号为 8888。</p><p><code>spring.http.encoding.charset = ISO-8859-1</code> 将默认 UTF-8 编码改成 ISO-8859-1。</p><p><code>debug = true</code> 开启 debug 模式：</p><ol><li>Positive matches 为 Spring Boot 已经开启的服务列表。</li><li>Negative matches 为 Spring Boot 自带而没有开启的服务列表。</li></ol><p><code>spring.profiles.active = dev</code> 指定 application-dev.properties 环境。</p><p><code>server.servlet.context-path = /boot</code> 访问 URL 为 <code>http://localhost:8080/boot/接口名</code></p><h2 id="application-yml-配置"><a href="#application-yml-配置" class="headerlink" title="application.yml 配置"></a>application.yml 配置</h2><p>Spring Boot 提供 yml 文件配置。</p><p>yml 文件缩写为 YAML，YAML 不是一种标记语言。</p><h3 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h3><ol><li>通过垂直对齐指定父子关系。</li><li>冒号后面必须留有一个空格。</li><li>双引号支持转义字符，单引号或不写引号不支持转义字符。</li><li><code>#</code> 号为注释。</li><li>Set、 List 或数组行内写法用 <code>[v1, v2]</code> 表示，其中 <code>[]</code> 可以省略。</li><li>对象、 Map 用 <code>{k1: v1, k2: v2}</code> 表示。</li><li>同一列 <code>-</code> 构成数组（Set 或 List）。</li><li>驼峰写法和松散写法可以互相转换。</li><li>通过 <code>${前缀.属性}</code> 引用变量值，通过 <code>${前缀.属性:默认值}</code> 指定默认值。</li></ol><h3 id="指定开发环境"><a href="#指定开发环境" class="headerlink" title="指定开发环境"></a>指定开发环境</h3><ol><li><p>使用 dev 开发配置：</p><img src="203.png" width="20%"><ul><li>默认配置 Tomcat 端口号为 8883，dev 配置 Tomcat 端口号为 8884。</li><li>properties 优先级高于 yml 文件。</li></ul></li></ol><h2 id="随机占位符"><a href="#随机占位符" class="headerlink" title="随机占位符"></a>随机占位符</h2><img src="202.png" width="80%"><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><p>Spring Boot 默认选用 slf4j 和 logback 框架。</p><h3 id="日志级别-1"><a href="#日志级别-1" class="headerlink" title="日志级别"></a>日志级别</h3><p>TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL &lt; OFF</p><p>Spring Boot 会默认打印 INFO 及以上的日志信息。</p><h3 id="使用-20"><a href="#使用-20" class="headerlink" title="使用"></a>使用</h3><ol><li><p>实例化 logger 对象：</p><img src="204.png" width="80%"></li><li><p>打印日志：</p><img src="205.png" width="80%"></li></ol><h3 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h3><p>通过配置 properties 文件：</p><ol><li>设置日志级别：<code>loggin.level.包名 = WARN</code></li><li>保存日志文件，默认保存项目根目录（可以指定绝对路径）：<code>loggin.file = springboot.log</code></li><li>保存日志文件到文件夹（默认名字为 spring.log）：<code>loggin.path = D:/log/</code></li><li>设置控制台日志输出格式：<code>logging.pattern.console</code></li><li>设置日志文件的输出格式：<code>logging.pattern.file</code></li></ol><h2 id="Web-开发"><a href="#Web-开发" class="headerlink" title="Web 开发"></a>Web 开发</h2><ol><li>Spring Boot 默认约定类路径下的 resource、static 和 public 文件夹可以存放静态资源。</li><li>Spring Boot 内置 Tomcat 不支持 JSP 开发。</li><li>Spring Boot 使用外置 Tomcat 时，构建 Spring Boot 时选择 war 工程。<ul><li>spring-boot-starter-tomcat 打包时默认排除（内置 Tomcat）。</li><li>main 目录下创建 webapp 目录，和普通 Web 项目类似。</li><li>war 工程的 ServletInitializer 类在 Tomcat 启动时（监听器）启动主程序。</li></ul></li></ol><h2 id="集成-MyBatis"><a href="#集成-MyBatis" class="headerlink" title="集成 MyBatis"></a>集成 MyBatis</h2><h3 id="依赖包-1"><a href="#依赖包-1" class="headerlink" title="依赖包"></a>依赖包</h3><p>spring-boot-starter-web.jar</p><p>mybatis-spring-boot-starter.jar</p><p>mysql-connector-java.jar</p><p>druid.jar</p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>mybatis 的配置为可选配置：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8888</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql:///test?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">MyNewPass4!</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="comment"># pojo 类定义别名</span></span><br><span class="line"><span class="attr">  type-aliases-package:</span> <span class="string">com.example.demo1.model</span></span><br><span class="line">  <span class="comment"># 扫描 xml 文件</span></span><br><span class="line"><span class="attr">  mapper-locations:</span></span><br><span class="line"><span class="attr">    - classpath:</span><span class="string">com/example/demo1/dao/*.xml</span></span><br></pre></td></tr></table></figure><h3 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h3><p>@MapperScan 注解扫描 mapper 接口批量动态生成动态代理对象</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"top.zero3737.mapper.dao"</span>)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        SpringApplication.run(MapperApplication.class, args);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注解-7"><a href="#注解-7" class="headerlink" title="注解"></a>注解</h2><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h3><ol><li>表示该类是一个配置类。</li><li>将该类自动注入 IOC 容器中。</li></ol><h3 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h3><ol><li>会将该包以及子包所有类纳入 IOC 容器。</li><li>自动引入第三方依赖。</li></ol><h3 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h3><ol><li>会自动扫描指定包下的全部标有 @Component 的类，并注册成 bean，当然包括 @Component 下的子注解 @Service, @Repository, @Controller。</li></ol><h3 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h3><ol><li>声明 Spirng Boot 项目程序入口。</li><li>包含 @Configuration、 @EnableAutoConfiguration 和 @ComponentScan 注解。</li><li>@SpringBootApplication 会自动扫描子包的所有 bean 对象并纳入 IOC 容器。</li></ol><h3 id="PropertySource"><a href="#PropertySource" class="headerlink" title="@PropertySource"></a>@PropertySource</h3><p>默认会加载 application.yml 和 application.properties 配置文件。</p><ol><li><p>指定配置文件：</p><img src="199.png" width="80%"></li></ol><h4 id="注意-5"><a href="#注意-5" class="headerlink" title="注意"></a>注意</h4><p>只能额外指定 properties 文件，不支持指定 yml 文件。</p><h3 id="ConfigurationProperties"><a href="#ConfigurationProperties" class="headerlink" title="@ConfigurationProperties"></a>@ConfigurationProperties</h3><p>通过 yml 或 properties 配置文件自动赋值。</p><ol><li><p>pojo 类：</p><img src="197.png" width="80%"> <img src="196.png" width="80%"></li><li><p>yml 配置文件：</p><img src="198.png" width="80%"> <img src="195.png" width="80%"></li></ol><h4 id="和-Value-的区别"><a href="#和-Value-的区别" class="headerlink" title="和 @Value 的区别"></a>和 @Value 的区别</h4><ol><li>@ConfigurationProperties 注解优先级默认比 @Value 优先级高。</li><li>@ConfigurationProperties 支持复杂类型赋值，而 @Value 不支持。</li><li>@ConfigurationProperties 支持 JSR-303 数据校验，而 @Value 不支持。</li></ol><h3 id="ImportResource"><a href="#ImportResource" class="headerlink" title="@ImportResource"></a>@ImportResource</h3><p>如果自己写 Spring 配置 Spring Boot 默认不支持，需要通过 @ImportResource 注解指定 Spring 配置文件。</p><p>Spring 不推荐 xml 文件配置，推荐注解方式配置 Spring。</p><h1 id="Hibernator-Validator"><a href="#Hibernator-Validator" class="headerlink" title="Hibernator-Validator"></a>Hibernator-Validator</h1><h2 id="JSR-303"><a href="#JSR-303" class="headerlink" title="JSR-303"></a>JSR-303</h2><p>JSR-303 是 JAVA EE 6 中的一项子规范，叫做 Bean Validation，官方参考实现是 Hibernate-Validator。</p><h2 id="Maven-依赖-16"><a href="#Maven-依赖-16" class="headerlink" title="Maven 依赖"></a>Maven 依赖</h2><p>hibernate-validator.jar</p><img src="151.png" width="80%"><h2 id="注解-8"><a href="#注解-8" class="headerlink" title="注解"></a>注解</h2><img src="147.png" width="80%"> <img src="148.png" width="80%"> <img src="149.png" width="80%"> <img src="150.png" width="80%"><h2 id="Spring-配置"><a href="#Spring-配置" class="headerlink" title="Spring 配置"></a>Spring 配置</h2><img src="152.png" width="80%"> <img src="153.png" width="80%"><h2 id="使用-21"><a href="#使用-21" class="headerlink" title="使用"></a>使用</h2><img src="154.png" width="80%"><p>@Valid 对对象中的属性进行校验。</p><img src="155.png" width="80%"><p>@Past 声明当前时间以前为合法，当前时间以后不合法。</p><img src="156.png" width="80%"><p>@Email 声明必须为邮箱格式（<a href="mailto:XXX@XXX.com" target="_blank" rel="noopener">XXX@XXX.com</a>）。</p><img src="157.png" width="80%"><h1 id="Quartz"><a href="#Quartz" class="headerlink" title="Quartz"></a>Quartz</h1><h2 id="Maven-依赖-17"><a href="#Maven-依赖-17" class="headerlink" title="Maven 依赖"></a>Maven 依赖</h2><p>quartz.jar</p><h2 id="使用-22"><a href="#使用-22" class="headerlink" title="使用"></a>使用</h2><p>实现 Job 接口：</p><img src="99.png" width="80%"><ul><li>MeetingService 为自定义类。</li></ul><p>正在努力编写中…</p><h1 id="HttpClient"><a href="#HttpClient" class="headerlink" title="HttpClient"></a>HttpClient</h1><h2 id="Maven-依赖-18"><a href="#Maven-依赖-18" class="headerlink" title="Maven 依赖"></a>Maven 依赖</h2><h2 id="使用-23"><a href="#使用-23" class="headerlink" title="使用"></a>使用</h2><p>发送 Get 请求：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建 CloseableHttpClient 对象</span></span><br><span class="line">    CloseableHttpClient createDefault = HttpClients.createDefault();</span><br><span class="line">    <span class="comment">// 创建一个 GET 对象</span></span><br><span class="line">    HttpGet httpGet = <span class="keyword">new</span> HttpGet(<span class="string">"http://localhost:8080/test"</span>);</span><br><span class="line">    String string = <span class="string">"请求失败"</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 执行请求</span></span><br><span class="line">    CloseableHttpResponse execute = createDefault.execute(httpGet);</span><br><span class="line">    <span class="comment">// 获得响应状态码</span></span><br><span class="line">    <span class="keyword">int</span> statusCode = execute.getStatusLine().getStatusCode();</span><br><span class="line">    <span class="keyword">if</span>(statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 取得响应内容</span></span><br><span class="line">        HttpEntity entity = execute.getEntity();</span><br><span class="line">        <span class="comment">// 将内容返回 String 类型</span></span><br><span class="line">        string = EntityUtils.toString(entity, <span class="string">"UTF-8"</span>);</span><br><span class="line">        <span class="comment">// 关闭</span></span><br><span class="line">        execute.close();</span><br><span class="line">        createDefault.close();</span><br><span class="line">        System.out.println(string);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Get 请求附带参数：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建 CloseableHttpClient 对象</span></span><br><span class="line">    CloseableHttpClient createDefault = HttpClients.createDefault();</span><br><span class="line">    <span class="comment">// 创建一个 URL 对象，URL 对象可以附带参数</span></span><br><span class="line">    URIBuilder uriBuilder = <span class="keyword">new</span> URIBuilder(<span class="string">"http://localhost:8080/test"</span>);</span><br><span class="line">    uriBuilder.addParameter(<span class="string">"id"</span>, <span class="string">"1"</span>);</span><br><span class="line">    <span class="comment">// 创建一个 GET 对象</span></span><br><span class="line">    HttpGet httpGet = <span class="keyword">new</span> HttpGet(uriBuilder.build());</span><br><span class="line">    String string = <span class="string">"请求失败"</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 执行请求</span></span><br><span class="line">    CloseableHttpResponse execute = createDefault.execute(httpGet);</span><br><span class="line">    <span class="comment">// 获得响应状态码</span></span><br><span class="line">    <span class="keyword">int</span> statusCode = execute.getStatusLine().getStatusCode();</span><br><span class="line">    <span class="keyword">if</span>(statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 取得响应内容</span></span><br><span class="line">        HttpEntity entity = execute.getEntity();</span><br><span class="line">        <span class="comment">// 将内容返回 String 类型</span></span><br><span class="line">        string = EntityUtils.toString(entity, <span class="string">"UTF-8"</span>);</span><br><span class="line">        <span class="comment">// 关闭</span></span><br><span class="line">        execute.close();</span><br><span class="line">        createDefault.close();</span><br><span class="line">        System.out.println(string);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发送 POST 请求：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建 CloseableHttpClient 对象</span></span><br><span class="line">    CloseableHttpClient createDefault = HttpClients.createDefault();</span><br><span class="line">    <span class="comment">// 设置 POST 请求参数</span></span><br><span class="line">    ArrayList&lt;BasicNameValuePair&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;BasicNameValuePair&gt;();</span><br><span class="line">    arrayList.add(<span class="keyword">new</span> BasicNameValuePair(<span class="string">"username"</span>, <span class="string">"zs"</span>));</span><br><span class="line">    arrayList.add(<span class="keyword">new</span> BasicNameValuePair(<span class="string">"password"</span>, <span class="string">"123456"</span>));</span><br><span class="line">    UrlEncodedFormEntity urlEncodedFormEntity = <span class="keyword">new</span> UrlEncodedFormEntity(arrayList, <span class="string">"UTF-8"</span>);</span><br><span class="line">    <span class="comment">// 创建一个 POST 对象</span></span><br><span class="line">    HttpPost httpPost = <span class="keyword">new</span> HttpPost(<span class="string">"https://www.baidu.com"</span>);</span><br><span class="line">    <span class="comment">// 将请求参数放入 POST 请求的请求体中</span></span><br><span class="line">    httpPost.setEntity(urlEncodedFormEntity);</span><br><span class="line">    String string = <span class="string">"false"</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 执行请求</span></span><br><span class="line">    CloseableHttpResponse execute = createDefault.execute(httpPost);</span><br><span class="line">    <span class="comment">// 获得响应状态码</span></span><br><span class="line">    <span class="keyword">int</span> statusCode = execute.getStatusLine().getStatusCode();</span><br><span class="line">    <span class="keyword">if</span>(statusCode == <span class="number">302</span> || statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 取得响应内容</span></span><br><span class="line">        HttpEntity entity = execute.getEntity();</span><br><span class="line">        <span class="comment">// 将内容返回 String 类型</span></span><br><span class="line">        string = EntityUtils.toString(entity, <span class="string">"UTF-8"</span>);</span><br><span class="line">        <span class="comment">// 关闭</span></span><br><span class="line">        execute.close();</span><br><span class="line">        createDefault.close();</span><br><span class="line">        System.out.println(string);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配合-jsoup"><a href="#配合-jsoup" class="headerlink" title="配合 jsoup"></a>配合 jsoup</h2><h3 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h3><p>做爬虫时，主要负责解析 html 文本。</p><h3 id="Maven-依赖-19"><a href="#Maven-依赖-19" class="headerlink" title="Maven 依赖"></a>Maven 依赖</h3><h3 id="使用-24"><a href="#使用-24" class="headerlink" title="使用"></a>使用</h3><h1 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h1><h2 id="Maven-依赖-20"><a href="#Maven-依赖-20" class="headerlink" title="Maven 依赖"></a>Maven 依赖</h2><p>jedis.jar</p><h2 id="使用-25"><a href="#使用-25" class="headerlink" title="使用"></a>使用</h2><p>redis.conf 中解除绑定主机（其他 IP 主机就能连接）：</p><img src="172.png" width="80%"><p>解除保护模式：</p><img src="173.png" width="80%"><p>java 代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 连接数据库</span></span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"127.0.0.1"</span>, <span class="number">6379</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置 key 值</span></span><br><span class="line">    jedis.set(<span class="string">"key1"</span>, <span class="string">"haha"</span>);</span><br><span class="line">    <span class="comment">// 获取 key 值</span></span><br><span class="line">    String string = jedis.get(<span class="string">"key1"</span>);</span><br><span class="line">    <span class="comment">// 关闭连接</span></span><br><span class="line">    jedis.close();</span><br><span class="line">    System.out.println(string);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用连接池：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findDataWithPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 新建连接池对象</span></span><br><span class="line">    JedisPool jedisPool = <span class="keyword">new</span> JedisPool(<span class="string">"127.0.0.1"</span>, <span class="number">6379</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从连接池中获取 Jedis 对象</span></span><br><span class="line">    Jedis resource = jedisPool.getResource();</span><br><span class="line">    <span class="comment">// 获取 key2 的值</span></span><br><span class="line">    String string = resource.get(<span class="string">"key2"</span>);</span><br><span class="line">    <span class="comment">// jedis 对象放入连接池</span></span><br><span class="line">    resource.close();</span><br><span class="line">    <span class="comment">// 关闭连接池</span></span><br><span class="line">    jedisPool.close();</span><br><span class="line">    System.out.println(string);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>集群：</p><img src="186.png" width="80%"><h2 id="Spring-整合-Jedis"><a href="#Spring-整合-Jedis" class="headerlink" title="Spring 整合 Jedis"></a>Spring 整合 Jedis</h2><p>applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 连接池配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisPoolConfig"</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.JedisPoolConfig"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 最大连接数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxTotal"</span> <span class="attr">value</span>=<span class="string">"30"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 最大空闲连接数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"10"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 每次释放连接的最大数目 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"numTestsPerEvictionRun"</span> <span class="attr">value</span>=<span class="string">"1024"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 释放连接的扫描间隔（毫秒） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeBetweenEvictionRunsMillis"</span> <span class="attr">value</span>=<span class="string">"30000"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 连接最小空闲时间 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minEvictableIdleTimeMillis"</span> <span class="attr">value</span>=<span class="string">"1800000"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 连接空闲多久后释放, 当空闲时间&gt;该值 且 空闲连接&gt;最大空闲连接数 时直接释放 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"softMinEvictableIdleTimeMillis"</span> <span class="attr">value</span>=<span class="string">"10000"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 获取连接时的最大等待毫秒数,小于零:阻塞不确定的时间,默认-1 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWaitMillis"</span> <span class="attr">value</span>=<span class="string">"1500"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在获取连接的时候检查有效性, 默认false --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在空闲时检查有效性, 默认false --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testWhileIdle"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"blockWhenExhausted"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>	</span><br><span class="line"><span class="comment">&lt;!-- jedis客户端单机版 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"redisClient"</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.JedisPool"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"192.168.25.153"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"6379"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"poolConfig"</span> <span class="attr">ref</span>=<span class="string">"jedisPoolConfig"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><img src="187.png" width="80%"><ul><li>incr 自增长。</li><li>expire 设置生命周期。</li><li>ttl 获取生命周期。</li></ul><h2 id="注意-6"><a href="#注意-6" class="headerlink" title="注意"></a>注意</h2><p>Redis 一般使用 hash 对象数据进行分类。</p><h1 id="commons-net"><a href="#commons-net" class="headerlink" title="commons-net"></a>commons-net</h1><h2 id="概念-7"><a href="#概念-7" class="headerlink" title="概念"></a>概念</h2><p>commons-net.jar 为 FTP 工具包，可实现文件的上传、下载和删除。</p><h2 id="使用-26"><a href="#使用-26" class="headerlink" title="使用"></a>使用</h2><p>文件上传：</p><img src="176.png" width="80%"><h1 id="Shiro"><a href="#Shiro" class="headerlink" title="Shiro"></a>Shiro</h1><h2 id="概念-8"><a href="#概念-8" class="headerlink" title="概念"></a>概念</h2><p>Apache Shiro 是一个强大且易用的 Java 安全框架,执行身份验证（登录）、授权（权限）、密码（加密）和会话管理（Session 管理）。</p><p>Shiro 中的 Session 也会运用在 JAVA SE 环境下，非 Web 环境也可使用。</p><h3 id="Shiro-三大核心组件"><a href="#Shiro-三大核心组件" class="headerlink" title="Shiro 三大核心组件"></a>Shiro 三大核心组件</h3><img src="192.png" width="80%"><ul><li>subject 即当前用户，与系统发生交互。</li><li>SecurityManager 即 subject 管理者。</li><li>Realm 即数据源（定义的用户和权限），可以从配置文件读取和数据库中读取。</li></ul><h2 id="使用-27"><a href="#使用-27" class="headerlink" title="使用"></a>使用</h2><h3 id="ini-文件数据源"><a href="#ini-文件数据源" class="headerlink" title="ini 文件数据源"></a>ini 文件数据源</h3><p>shiro.ini 配置文件：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="section">[users]</span></span><br><span class="line"><span class="comment"># 用户名为 root，密码为 123456，拥有 admin 角色。</span></span><br><span class="line"><span class="attr">root</span> = <span class="number">123456</span>, admin</span><br><span class="line"><span class="attr">test</span> = <span class="number">123456</span>, test</span><br><span class="line"><span class="attr">guest</span> = <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="section">[roles]</span></span><br><span class="line"><span class="comment"># admin 角色拥有任何权限</span></span><br><span class="line"><span class="attr">admin</span> = *</span><br><span class="line"><span class="comment"># test 角色拥有 menu:list, menu:add 权限</span></span><br><span class="line"><span class="attr">test</span> = menu:list, menu:add</span><br><span class="line"></span><br><span class="line"><span class="section">[urls]</span></span><br><span class="line"><span class="comment"># 不需要验证</span></span><br><span class="line">/login.html = anon</span><br><span class="line"><span class="comment"># 必须登录才能访问</span></span><br><span class="line">/index.html = authc</span><br><span class="line"><span class="comment"># 只有 admin 用户才能看得到</span></span><br><span class="line">/role = authc, roles[admin]</span><br><span class="line"><span class="comment"># 只有 admin 并且拥有 menu 权限才能看到</span></span><br><span class="line">/menu/** = authc, roles[admin], perms[menu:*]</span><br></pre></td></tr></table></figure><p>JAVA 代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建工程</span></span><br><span class="line">    IniSecurityManagerFactory iniSecurityManagerFactory = <span class="keyword">new</span> IniSecurityManagerFactory(<span class="string">"classpath:shiro.ini"</span>);</span><br><span class="line">    <span class="comment">// 从工厂中获取配置实例</span></span><br><span class="line">    SecurityManager instance = iniSecurityManagerFactory.getInstance();</span><br><span class="line">    <span class="comment">// 加载 shiro.ini 配置</span></span><br><span class="line">    SecurityUtils.setSecurityManager(instance);</span><br><span class="line">    <span class="comment">// 获取当前 subject 对象</span></span><br><span class="line">    Subject subject = SecurityUtils.getSubject();</span><br><span class="line">    <span class="comment">// 和 Realm（Shiro 数据源）进行比较的数据</span></span><br><span class="line">    UsernamePasswordToken usernamePasswordToken = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">"test"</span>, <span class="string">"123456"</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 开始比较，比较不通过会抛出异常</span></span><br><span class="line">        subject.login(usernamePasswordToken);</span><br><span class="line">        <span class="comment">// isAuthenticated 方法判断是否验证通过，通过返回 true，否则返回 false</span></span><br><span class="line">        <span class="keyword">if</span>(subject.isAuthenticated()) &#123;	</span><br><span class="line">            </span><br><span class="line">            System.out.println(<span class="string">"登录成功"</span>);</span><br><span class="line">            <span class="comment">// 判断是否为 admin 角色</span></span><br><span class="line">            <span class="keyword">if</span>(subject.hasRole(<span class="string">"admin"</span>)) &#123;</span><br><span class="line">                </span><br><span class="line">                System.out.println(<span class="string">"为 admin 角色"</span>);</span><br><span class="line">                </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                </span><br><span class="line">                System.out.println(<span class="string">"其他角色"</span>);</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 判断是否有 find 权限</span></span><br><span class="line">            <span class="keyword">if</span>(subject.isPermitted(<span class="string">"find"</span>)) &#123;</span><br><span class="line">                </span><br><span class="line">                System.out.println(<span class="string">"有 find 权限"</span>);</span><br><span class="line">                </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                </span><br><span class="line">                System.out.println(<span class="string">"没有 find 权限"</span>);</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        </span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        System.out.println(<span class="string">"登录失败"</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="jdbcRealm"><a href="#jdbcRealm" class="headerlink" title="jdbcRealm"></a>jdbcRealm</h3><p>shiro.ini 配置文件：</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[main]</span></span><br><span class="line"><span class="attr">dataSource</span>=org.springframework.jdbc.datasource.DriverManagerDataSource</span><br><span class="line"><span class="attr">dataSource.driverClassName</span>=com.mysql.cj.jdbc.Driver</span><br><span class="line"><span class="attr">dataSource.url</span>=jdbc:mysql://localhost:<span class="number">3306</span>/ssm?useUnicode=<span class="literal">true</span>&amp;characterEncoding=UTF-<span class="number">8</span>&amp;serverTimezone=UTC</span><br><span class="line"><span class="attr">dataSource.username</span>=root</span><br><span class="line"><span class="attr">dataSource.password</span>=<span class="number">123456</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">jdbcRealm</span>=org.apache.shiro.realm.jdbc.JdbcRealm</span><br><span class="line"><span class="attr">jdbcRealm.permissionsLookupEnabled</span> = <span class="literal">true</span>  </span><br><span class="line"><span class="attr">jdbcRealm.dataSource</span>=<span class="variable">$dataSource</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jdbcRealm.authenticationQuery</span> = SELECT password FROM ssm_user WHERE username = ?</span><br><span class="line"><span class="attr">jdbcRealm.userRolesQuery</span> = SELECT role from ssm_role WHERE username = ?</span><br><span class="line"><span class="attr">jdbcRealm.permissionsQuery</span> = SELECT permission_name FROM ssm_permission WHERE role_name = ?</span><br></pre></td></tr></table></figure><p>MySQL 数据库：</p><img src="194.png" width="40%"><ul><li>同个角色拥有多个权限时添加多一条记录即可，例如 test 角色拥有 perm1 和 perm2 权限。<table><thead><tr><th align="left">role</th><th align="left">perm</th></tr></thead><tbody><tr><td align="left">test</td><td align="left">perm1</td></tr><tr><td align="left">test</td><td align="left">perm2</td></tr></tbody></table></li></ul><h3 id="Realm-接口"><a href="#Realm-接口" class="headerlink" title="Realm 接口"></a>Realm 接口</h3><h4 id="Shiro-认证策略"><a href="#Shiro-认证策略" class="headerlink" title="Shiro 认证策略"></a>Shiro 认证策略</h4><img src="193.png" width="80%"><h4 id="JAVA-代码"><a href="#JAVA-代码" class="headerlink" title="JAVA 代码"></a>JAVA 代码</h4><p>自定义数据源：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRealml</span> <span class="keyword">implements</span> <span class="title">Realm</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"myrealml"</span>;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(AuthenticationToken token)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 限制数据源只支持 UsernamePasswordToken</span></span><br><span class="line">		<span class="keyword">return</span> token <span class="keyword">instanceof</span> UsernamePasswordToken;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> AuthenticationInfo <span class="title">getAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 获取用户名</span></span><br><span class="line">		String principal = (String)token.getPrincipal();</span><br><span class="line">		<span class="comment">// 获取密码</span></span><br><span class="line">		String credentials = <span class="keyword">new</span> String((<span class="keyword">char</span> [])token.getCredentials());</span><br><span class="line">		<span class="comment">// 判断用户名是否正确，不正确抛出 UnknownAccountException 异常</span></span><br><span class="line">		<span class="keyword">if</span>(!<span class="string">"test"</span>.equals(principal)) &#123;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> UnknownAccountException();</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 判断密码是否正确，不争取抛出 IncorrectCredentialsException 异常</span></span><br><span class="line">		<span class="keyword">if</span>(!<span class="string">"123456"</span>.equals(credentials)) &#123;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IncorrectCredentialsException();</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 返回用户名、密码和数据源名字</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(principal, credentials, getName());</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置和验证用户：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    DefaultSecurityManager defaultSecurityManager = <span class="keyword">new</span> DefaultSecurityManager();</span><br><span class="line">    <span class="comment">// 设置身份验证策略</span></span><br><span class="line">    ModularRealmAuthenticator modularRealmAuthenticator = <span class="keyword">new</span> ModularRealmAuthenticator();</span><br><span class="line">    modularRealmAuthenticator.setAuthenticationStrategy(<span class="keyword">new</span> AtLeastOneSuccessfulStrategy());</span><br><span class="line">    <span class="comment">// 加载身份验证策略</span></span><br><span class="line">    defaultSecurityManager.setAuthenticator(modularRealmAuthenticator);</span><br><span class="line">    <span class="comment">// 设置授权</span></span><br><span class="line">    ModularRealmAuthorizer modularRealmAuthorizer = <span class="keyword">new</span> ModularRealmAuthorizer();</span><br><span class="line">    modularRealmAuthorizer.setPermissionResolver(<span class="keyword">new</span> WildcardPermissionResolver());</span><br><span class="line">    <span class="comment">// 加载授权方式</span></span><br><span class="line">    defaultSecurityManager.setAuthorizer(modularRealmAuthorizer);</span><br><span class="line">    <span class="comment">// 加载自定义数据源</span></span><br><span class="line">    defaultSecurityManager.setRealm(<span class="keyword">new</span> MyRealml());</span><br><span class="line">    SecurityUtils.setSecurityManager(defaultSecurityManager);</span><br><span class="line">    <span class="comment">// 获取当前 subject 对象</span></span><br><span class="line">    Subject subject = SecurityUtils.getSubject();</span><br><span class="line">    <span class="comment">// 和 Realm（Shiro 数据源）进行比较的数据</span></span><br><span class="line">    UsernamePasswordToken usernamePasswordToken = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">"test"</span>, <span class="string">"123456"</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 开始比较，比较不通过会抛出异常</span></span><br><span class="line">        subject.login(usernamePasswordToken);</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        </span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AuthorizingRealm"><a href="#AuthorizingRealm" class="headerlink" title="AuthorizingRealm"></a>AuthorizingRealm</h3><p>设置数据源为 MyRealm2, Subject 对象调用 login 方法根据 MyRealm2 进行验证：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRealm2</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	JdbcTemplate JdbcTemplate;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 权限验证调用的方法，验证该用户是否拥有对应角色。</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		String sql = <span class="string">"select role from shiro_user_role where username = ?"</span>;</span><br><span class="line">		<span class="comment">// 获取用户</span></span><br><span class="line">		String primaryPrincipal = (String)principals.getPrimaryPrincipal();</span><br><span class="line">		<span class="comment">// 根据用户查询角色</span></span><br><span class="line">		List&lt;String&gt; queryForList = JdbcTemplate.queryForList(sql, String.class, primaryPrincipal);</span><br><span class="line">		<span class="comment">// 封装对象</span></span><br><span class="line">		SimpleAuthorizationInfo simpleAuthorizationInfo = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">		simpleAuthorizationInfo.addRoles(queryForList);</span><br><span class="line">		<span class="comment">// 把封装对象返回给 Shiro 自动验证</span></span><br><span class="line">		<span class="keyword">return</span> simpleAuthorizationInfo;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 登录的时候调用，比较用户名和密码</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">		</span><br><span class="line">		String sql = <span class="string">"select password from user where username = ?"</span>;</span><br><span class="line">		String principal = (String)token.getPrincipal();</span><br><span class="line">		String queryForObject = JdbcTemplate.queryForObject(sql, String.class, principal);</span><br><span class="line">		<span class="comment">// 封装对象，参数分别为用户名、密码、加密的盐值、Realm的名字</span></span><br><span class="line">		SimpleAuthenticationInfo simpleAuthenticationInfo = <span class="keyword">new</span> SimpleAuthenticationInfo(principal, queryForObject, <span class="keyword">null</span>, getName());</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 返回给 Shiro 会自动缓存和验证</span></span><br><span class="line">		<span class="keyword">return</span> simpleAuthenticationInfo;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对象常用方法"><a href="#对象常用方法" class="headerlink" title="对象常用方法"></a>对象常用方法</h2><p>Subject 对象：</p><ul><li><code>boolean isPermitted(Permission permission);</code> 判断是否拥有单个权限。</li><li><code>boolean[] isPermitted(String... permissions);</code> 判断是否拥有多个权限。</li><li><code>boolean isPermittedAll(String... permissions);</code> 判断同时是否拥有多个权限（没有任何一个权限，返回 false）。</li><li><code>boolean hasRole(String roleIdentifier);</code> 判断是否拥有该角色。</li><li><code>boolean[] hasRoles(List&lt;String&gt; roleIdentifiers);</code> 判断是否拥有多个角色。</li><li><code>boolean hasAllRoles(Collection&lt;String&gt; roleIdentifiers);</code> 判断是否同时拥有多个角色。</li><li><code>void logout();</code> 退出登录。</li></ul><h2 id="集成-Spring-MVC-环境"><a href="#集成-Spring-MVC-环境" class="headerlink" title="集成 Spring MVC 环境"></a>集成 Spring MVC 环境</h2><h3 id="Maven-依赖-21"><a href="#Maven-依赖-21" class="headerlink" title="Maven 依赖"></a>Maven 依赖</h3><p>shiro-core.jar</p><p>shiro-web.jar</p><p>shiro-spring.jar</p><h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><p>spring 配置文件：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 读取 ini 数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"IniRealm"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.realm.text.IniRealm"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"resourcePath"</span> <span class="attr">value</span>=<span class="string">"classpath:shiro.ini"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 加载 ini 数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"securityManager"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.web.mgt.DefaultWebSecurityManager"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    加载 ini 数据源；</span></span><br><span class="line"><span class="comment">            也可以加载 AuthorizingRealm 数据源，要将继承的 AuthorizingRealm 数据源纳入 IOC 容器；</span></span><br><span class="line"><span class="comment">            将 ref 指向 纳入 IOC 的 AuthorizingRealm 数据源；</span></span><br><span class="line"><span class="comment">            这样就可以根据数据库验证用户信息。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"realm"</span> <span class="attr">ref</span>=<span class="string">"IniRealm"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 加载配置，定义规则 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shiroFilter"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.web.ShiroFilterFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义没有通过验证的跳转页面，即登陆页面。默认的是webroot下的login.jsp页面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loginUrl"</span> <span class="attr">value</span>=<span class="string">"/demo/login/login.html"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义验证通过的跳转页面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"successUrl"</span> <span class="attr">value</span>=<span class="string">"/demo/login/index.html"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 经过认证但是没有相应的权限时跳转的页面（权限不足） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"unauthorizedUrl"</span> <span class="attr">value</span>=<span class="string">"/demo/login/error.html"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义资源访问规则 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filterChainDefinitions"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">            /demo/login/login.html = anon</span><br><span class="line">            /demo/** = authc</span><br><span class="line">            /role = authc, roles[admin]</span><br><span class="line">            /menu/** = authc, roles[admin], perms[menu:*]</span><br><span class="line">        <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>web.xml 配置：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Shiro 核心拦截器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>shiroFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        org.springframework.web.filter.DelegatingFilterProxy</span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>shiroFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="JAVA-代码-1"><a href="#JAVA-代码-1" class="headerlink" title="JAVA 代码"></a>JAVA 代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">returnPageData</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    Subject subject = SecurityUtils.getSubject();</span><br><span class="line">    UsernamePasswordToken usernamePasswordToken = <span class="keyword">new</span> UsernamePasswordToken(username, password);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    </span><br><span class="line">        subject.login(usernamePasswordToken);</span><br><span class="line">        <span class="keyword">if</span>(subject.isAuthenticated()) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> <span class="string">"redirect:/demo/login/index.html"</span>;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        </span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/demo/login/login.html"</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/demo/login/login.html"</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h1><h2 id="注解大全"><a href="#注解大全" class="headerlink" title="注解大全"></a>注解大全</h2><table><thead><tr><th align="left">注解</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">@MapKey</td><td align="left"><a href="#返回HashMap中的key为bean对象的id属性">指定 Map 中的 Key 值</a></td></tr><tr><td align="left">@Param</td><td align="left"><a href="#通过注解命名参数">通过 @Param 指定传入参数的名字</a></td></tr><tr><td align="left">@RequestMapper</td><td align="left"><a href="#指定请求接口-RequestMapper">拦截指定请求</a></td></tr><tr><td align="left">@RequestParam</td><td align="left"><a href="#-RequestParam">获取请求参数</a></td></tr><tr><td align="left">@RequestBody</td><td align="left"><a href="#RequestBody">获取请求参数</a></td></tr><tr><td align="left">@PathVariable</td><td align="left"><a href="#获取路径中的参数-PathVariable">获取路径中的参数</a></td></tr><tr><td align="left">@SessionAttributes</td><td align="left"><a href="#Session">将指定 key 存入 Session 中</a></td></tr><tr><td align="left">@ResponseBody</td><td align="left"><a href="#返回json数据-ResponseBody">返回数据给前端</a>，必须和 @RequestMapper 一起使用。</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven</title>
    <url>/posts/38008/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><h1 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h1><h2 id="功能和工程分类"><a href="#功能和工程分类" class="headerlink" title="功能和工程分类"></a>功能和工程分类</h2><img src="https://ftp.bmp.ovh/imgs/2019/08/df38600df7069bab.png" width="30%"><h2 id="GroupID-和-ArtifactID"><a href="#GroupID-和-ArtifactID" class="headerlink" title="GroupID 和 ArtifactID"></a>GroupID 和 ArtifactID</h2><ul><li>GroupID 和 ArtifactID 被统称为“坐标”，是为了保证项目唯一性而提出的，如果你要把你项目弄到 maven 本地仓库去，你想要找到你的项目就必须根据这两个id去查找。</li><li>GroupID 是项目组织唯一的标识符，可以分为多个段，一般分为两段，第一段为域，第二段为公司名称（例如：Apache 的 GroupID 是 org.apache）。</li><li>ArtifactID 是项目的唯一的标识符，实际对应项目的名称。</li></ul><a id="more"></a><h1 id="scope"><a href="#scope" class="headerlink" title="scope"></a>scope</h1><h2 id="打包时排除指定依赖"><a href="#打包时排除指定依赖" class="headerlink" title="打包时排除指定依赖"></a>打包时排除指定依赖</h2><p>Maven 打包时排除 junit 依赖。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="scope-可选参数"><a href="#scope-可选参数" class="headerlink" title="scope 可选参数"></a>scope 可选参数</h2><ol><li>compile 默认是 compile。compile 表示被依赖项目需要参与当前项目的编译，包括后续的测试，运行周期也参与其中，是一个比较强的依赖。</li><li>test 表示依赖项目仅仅参与测试相关的工作，包括测试代码的编译、执行。</li><li>runtime 表示被依赖项目无需参与项目的编译，不过后期的测试和运行周期需要其参与。与 compile 相比，跳过编译而已。</li><li>procided 意味着打包的时候可以不用包进去。事实上该依赖理论上可以参与编译、测试、运行等周期。相当于compile，但是打包阶段做了exclude的动作。</li></ol><h1 id="Maven-打包包含配置文件"><a href="#Maven-打包包含配置文件" class="headerlink" title="Maven 打包包含配置文件"></a>Maven 打包包含配置文件</h1><p>pom 工程中添加：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>编译成 jar 包时包含该目录下的 xml 文件。</li></ul><h1 id="聚合工程"><a href="#聚合工程" class="headerlink" title="聚合工程"></a>聚合工程</h1><h2 id="聚合工程项目架构"><a href="#聚合工程项目架构" class="headerlink" title="聚合工程项目架构"></a>聚合工程项目架构</h2><img src="23.png" width="80%"><h2 id="parent-工程"><a href="#parent-工程" class="headerlink" title="parent 工程"></a>parent 工程</h2><p>parent 工程属于 pom 工程，主要定义依赖 jar 包的管理信息和 Maven 插件的版本。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ol><li><p>定义 jar 包版本：</p><img src="14.png" width="80%"></li><li><p>distributionManagement 标签只声明依赖的版本：</p><img src="15.png" width="80%"></li><li><p>配置 Maven 插件：</p><img src="16.png" width="80%"></li></ol><h2 id="common-工程"><a href="#common-工程" class="headerlink" title="common 工程"></a>common 工程</h2><ol><li><p>common 工程为 jar 工程，主要负责写一些通用的工具类，继承 parent 工程：</p><img src="24.png" width="80%"></li><li><p>导入相应依赖的 jar 包：</p><img src="25.png" width="80%"></li></ol><h2 id="manager-工程"><a href="#manager-工程" class="headerlink" title="manager 工程"></a>manager 工程</h2><p>manager 工程为 pom 工程：</p><img src="19.png" width="80%"><ul><li>manager 工程依赖 common 工程，继承父工程。</li><li>聚合工程包含很多 jar 工程和至少一个 war 工程。</li><li>pom 工程是不会自动添加依赖的，manager 工程的子工程（jar 或 war 工程）才会自动添加依赖。</li></ul><h2 id="Maven-模块"><a href="#Maven-模块" class="headerlink" title="Maven 模块"></a>Maven 模块</h2><p>在 manager 工程右键添加 Maven 模块：</p><img src="20.png" width="80%"><p>Maven 模块会根据继承关系自动添加依赖（manager 声明的依赖会自动添加）：</p><img src="21.png" width="80%"><ul><li>Maven 模块是在聚合工程内部创建，Eclipse 只是把该模块路径映射到项目资源管理器。</li></ul><h1 id="Maven-插件"><a href="#Maven-插件" class="headerlink" title="Maven 插件"></a>Maven 插件</h1><h2 id="Maven-Tomcat-插件"><a href="#Maven-Tomcat-插件" class="headerlink" title="Maven Tomcat 插件"></a>Maven Tomcat 插件</h2><p>使用 Maven Tomcat 插件需要 jdk 环境而不是 jre 环境：</p><img src="22.png" width="50%"><h2 id="maven-war-plugin"><a href="#maven-war-plugin" class="headerlink" title="maven-war-plugin"></a>maven-war-plugin</h2><p>Maven 安装的时候指定不同的开发环境（指定 web.xml 的位置）：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 指定web.xml的路径 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">webXml</span>&gt;</span>WebContent\WEB-INF\web.xml<span class="tag">&lt;/<span class="name">webXml</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 指定jsp、js、css的路劲 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">warSourceDirectory</span>&gt;</span>WebRoot<span class="tag">&lt;/<span class="name">warSourceDirectory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="mybatis-generator-maven-plugin"><a href="#mybatis-generator-maven-plugin" class="headerlink" title="mybatis-generator-maven-plugin"></a>mybatis-generator-maven-plugin</h2><p>该插件简称 MBG，MBG 可以很方便的生成实体类、Mapper 接口以及对应的 XML 文件：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定 generatorConfig.xml 配置文件的路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">            $&#123;basedir&#125;/src/main/resources/generatorConfig.xml</span><br><span class="line">        <span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--为插件提供依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/tk.mybatis/mapper --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>如果使用原生 MyBatis 的 generatorConfig.xml 配置，可手动删除依赖。</li></ul><p>原生 MyBatis 的 generatorConfig.xml 配置：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库驱动包位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">classPathEntry</span> <span class="attr">location</span>=<span class="string">"C:\Users\Navon\.m2\repository\mysql\mysql-connector-java\8.0.17\mysql-connector-java-8.0.17.jar"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"sqlGenerate"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressAllComments"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 数据库链接URL、用户名、密码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://192.168.1.10:3306/test?useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;serverTimezone=UTC"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">"root"</span> <span class="attr">password</span>=<span class="string">"MyNewPass4!"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer;</span></span><br><span class="line"><span class="comment">        为 true时把JDBC DECIMAL和NUMERIC类型解析为java.math.BigDecimal --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 生成Pojo包名和位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.example.demo1.model"</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">targetProject</span>=<span class="string">".\src\main\java"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 清理前后的空格 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 生成 Mapper 映射XML文件位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.example.demo1.dao"</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetProject</span>=<span class="string">".\src\main\java"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 生成 Mapper 接口文件位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetPackage</span>=<span class="string">"com.example.demo1.dao"</span> <span class="attr">targetProject</span>=<span class="string">".\src\main\java"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- catalog 指定数据库，tableName 指定数据库表 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">catalog</span>=<span class="string">"mybatisdemo"</span> <span class="attr">tableName</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 去除 catalog 产生后缀的问题 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ignoreQualifiersAtRuntime"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generatedKey</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">sqlStatement</span>=<span class="string">"JDBC"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通用 mapper 的 generatorConfig.xml 配置:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--suppress MybatisGenerateCustomPluginInspection --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"Mysql"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3Simple"</span> <span class="attr">defaultModelType</span>=<span class="string">"flat"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"javaFileEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"useMapperCommentGenerator"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">"tk.mybatis.mapper.generator.MapperPlugin"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappers"</span> <span class="attr">value</span>=<span class="string">"tk.mybatis.mapper.common.Mapper"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"caseSensitive"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceAnnotation"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"beginningDelimiter"</span> <span class="attr">value</span>=<span class="string">"`"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"endingDelimiter"</span> <span class="attr">value</span>=<span class="string">"`"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"org.hsqldb.jdbcDriver"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">"jdbc:hsqldb:mem:generator"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">"sa"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--MyBatis 生成器只需要生成 Model--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"test.model"</span> </span></span><br><span class="line"><span class="tag">                            <span class="attr">targetProject</span>=<span class="string">"generator/src/test/java"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"user_info"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generatedKey</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">sqlStatement</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
  </entry>
  <entry>
    <title>Eclipse</title>
    <url>/posts/628/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><h1 id="配置中文"><a href="#配置中文" class="headerlink" title="配置中文"></a>配置中文</h1><ol><li><p><a href="http://www.eclipse.org/babel/downloads.php" target="_blank" rel="noopener">eclipse官网</a></p></li><li><p>复制 URL。</p><img src="https://b2.bmp.ovh/imgs/2019/07/4698e285915f529c.png" width="50%"></li><li><p>帮助 -&gt; 安装新软件 -&gt; 添加</p><img src="https://b2.bmp.ovh/imgs/2019/07/4e9bbb7e0df5eaaf.png" width="50%"><p>粘贴 URL ，名字 zh-cn （随便命名）。</p></li></ol><a id="more"></a><ol start="4"><li>选择简体中文（不要全选）。</li></ol><h1 id="Source-Folder-和-Folder-区别"><a href="#Source-Folder-和-Folder-区别" class="headerlink" title="Source Folder 和 Folder 区别"></a>Source Folder 和 Folder 区别</h1><ul><li>Source Folder 里的文件会被编译成字节码，不能编译的放到bin目录下。</li><li>普通文件夹就是不会被编译。</li><li>Source Folder 不管建立多少个，其最终都会编译到classes目录下。</li></ul><h1 id="设置智能提示"><a href="#设置智能提示" class="headerlink" title="设置智能提示"></a>设置智能提示</h1><ol><li><p>Window -&gt; Preferences -&gt; 搜索 Java -&gt; Editor -&gt; Content Assist</p></li><li><p>将 <code>.abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ</code> 复制此处。</p><img src="https://b2.bmp.ovh/imgs/2019/07/0c0cc2f0343adcd8.png" width="50%"></li></ol><h1 id="创建-Web-项目"><a href="#创建-Web-项目" class="headerlink" title="创建 Web 项目"></a>创建 Web 项目</h1><p>动态 Web 项目和静态 Web 项目的区别？</p><ul><li>动态 Web 项目：除了 JAVA SE 环境还有 EE 环境（Servlet）。</li><li>静态 Web 项目：只能写静态页面。</li></ul><h1 id="打开文件所在位置"><a href="#打开文件所在位置" class="headerlink" title="打开文件所在位置"></a>打开文件所在位置</h1><ol><li><p>文件右键 -&gt; 属性</p><img src="16.png" width="40%"></li><li><p>点击按钮，即可打开正在编辑文件所在路径：</p><img src="17.png" width="50%"></li></ol><h1 id="快速生成代码"><a href="#快速生成代码" class="headerlink" title="快速生成代码"></a>快速生成代码</h1><ol><li><p>右键 -&gt; 源码 -&gt; 生成 Getter 和 Setter…</p></li><li><p>生成 toString()…</p></li><li><p>使用字段生成构造函数…</p></li><li><p>快速覆盖父类的方法：</p><img src="30.png" width="50%"></li></ol><h1 id="关闭项目"><a href="#关闭项目" class="headerlink" title="关闭项目"></a>关闭项目</h1><ol><li><p>项目右键 -&gt; 关闭项目</p><img src="18.png" width="50%"></li><li><p>下拉按钮 -&gt; 点击 -&gt; 过滤器和定制</p><img src="19.png" width="50%"></li><li><p>打开关闭的项目选项即可忽略显示已关闭的项目：</p><img src="20.png" width="50%"></li><li><p>最近的过滤器可快速切换：</p><img src="21.png" width="50%"></li></ol><h1 id="清理项目缓存"><a href="#清理项目缓存" class="headerlink" title="清理项目缓存"></a>清理项目缓存</h1><ol><li><p>项目 -&gt; 清理</p><img src="22.png" width="50%"></li><li><p>可以选择清理全部或单独清理</p><img src="23.png" width="50%"></li></ol><h1 id="添加-XML-模板"><a href="#添加-XML-模板" class="headerlink" title="添加 XML 模板"></a>添加 XML 模板</h1><ol><li><p>搜索 XML -&gt; 模板 -&gt; 新建</p><img src="7.png" width="50%"></li><li><p>名称描述和模板内容填写相应即可。</p></li></ol><h1 id="添加约束文件"><a href="#添加约束文件" class="headerlink" title="添加约束文件"></a>添加约束文件</h1><h2 id="添加-DTD-约束文件"><a href="#添加-DTD-约束文件" class="headerlink" title="添加 DTD 约束文件"></a>添加 DTD 约束文件</h2><ol><li><p>搜索 XML -&gt; XML 目录 -&gt; 点击添加</p><img src="5.png" width="50%"></li><li><p>选择本地 dtd 文件 -&gt; key type 选择公共标识 -&gt; 键值为 DTD 名称。</p><img src="6.png" width="50%"></li></ol><h2 id="添加-Schema-约束文件"><a href="#添加-Schema-约束文件" class="headerlink" title="添加 Schema 约束文件"></a>添加 Schema 约束文件</h2><ol><li>选择本地 xsd 文件 -&gt; key type 选择 URL -&gt; 键值为 xsd 文件的公网链接。</li></ol><h1 id="启用自动部署"><a href="#启用自动部署" class="headerlink" title="启用自动部署"></a>启用自动部署</h1><img src="14.png" width="80%"><h1 id="将项目部署到-Tomcat-安装目录"><a href="#将项目部署到-Tomcat-安装目录" class="headerlink" title="将项目部署到 Tomcat 安装目录"></a>将项目部署到 Tomcat 安装目录</h1><ol><li><p>如果 Server Locations 为灰色状态。</p><img src="9.png" width="70%"></li><li><p>Tomcat 右键 -&gt; 清空（清空发布目录）。</p><img src="10.png" width="50%"></li><li><p>选择第二个选项和自定义发布目录即可。</p><img src="11.png" width="50%"></li><li><p>发布目录为 Tomcat 根目录</p><img src="12.png" width="70%"></li></ol><h1 id="集成-Maven"><a href="#集成-Maven" class="headerlink" title="集成 Maven"></a>集成 Maven</h1><ol><li><p><a href="https://maven.apache.org/" target="_blank" rel="noopener">Maven官网</a></p></li><li><p>选择侧边栏 Download -&gt; 选择下图链接</p><img src="https://b2.bmp.ovh/imgs/2019/07/2a31c42cb730f4c2.png" width="50%"></li><li><p>配置环境变量。</p></li><li><p>解压 -&gt; 进入 conf 文件夹 -&gt; 配置 settings.xml 文件。</p></li><li><p>配置本地仓库，localRepository 标签为本地仓库路径。</p><img src="100.png" width="80%"></li><li><p>配置国内镜像仓库。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>粘贴到下图处。</p><img src="101.png" width="80%"></li><li><p>window -&gt; 首选项 -&gt; 搜索 maven -&gt; 选择 settings.xml 文件（读取） -&gt; Update Settings</p><img src="102.png" width="50%"></li><li><p>Ecplise 中创建 maven 项目配置 pom 文件即可使用。</p></li><li><p>pom 文件中的 jar 包坐标可以到 Maven Repository 中寻找。</p><ul><li><p><a href="https://mvnrepository.com/artifact/org.springframework" target="_blank" rel="noopener">Maven Repository</a>也可以直接下载 jar 包。</p><img src="103.png"></li><li><p><a href="https://maven.aliyun.com/mvn/view" target="_blank" rel="noopener">maven阿里云中央仓库官网</a></p></li></ul></li></ol><h1 id="Maven-创建-Web-项目"><a href="#Maven-创建-Web-项目" class="headerlink" title="Maven 创建 Web 项目"></a>Maven 创建 Web 项目</h1><ol><li><p>新建 Maven 项目。</p><img src="106.png" width="50%"></li><li><p>选择下列选项。</p><img src="104.png" width="50%"></li><li><p>选择 war 选项。</p><img src="105.png" width="50%"></li><li><p>web 3.0 版本不会自动创建 web.xml 文件，在 webapp 下创建 WEB-INF 目录，然后在 WEB-INF 目录下创建 web.xml 文件。</p><img src="107.png" width="30%"></li><li><p>web.xml 模板。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"3.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Web-Spring<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建 JAVA EE 运行环境，项目右键。</p><img src="108.png" width="50%"></li><li><p>添加库。</p><img src="109.png" width="50%"></li><li><p>选择服务器运行时 -&gt; 选择 Tomcat 版本 -&gt; 应用保存即可。</p><img src="110.png" width="50%"></li></ol><h1 id="安装-Maven-项目到本地仓库"><a href="#安装-Maven-项目到本地仓库" class="headerlink" title="安装 Maven 项目到本地仓库"></a>安装 Maven 项目到本地仓库</h1><img src="111.png" width="50%"><h1 id="Tomcat-中-classes-目录没有-class-文件"><a href="#Tomcat-中-classes-目录没有-class-文件" class="headerlink" title="Tomcat 中 classes 目录没有 class 文件"></a>Tomcat 中 classes 目录没有 class 文件</h1><ol><li><p>把取消箭头所指选项。</p><img src="8.png" width="70%"></li><li><p>如果不行把其他选项改成警告或忽略。</p></li></ol><h1 id="Tomcat-中的-lib-目录没有-jar-包"><a href="#Tomcat-中的-lib-目录没有-jar-包" class="headerlink" title="Tomcat 中的 lib 目录没有 jar 包"></a>Tomcat 中的 lib 目录没有 jar 包</h1><p>Tomcat 找不到 jar 包会抛出 <code>ClassNotFoundException</code> 异常。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ol><li><p>项目右键 -&gt; 属性</p><img src="24.png" width="40%"></li><li><p>选择 Deployment Assembly 选项 -&gt; 添加</p><img src="25.png" width="50%"></li><li><p>选择 <code>Java Build Path Entries</code></p><img src="26.png" width="50%"></li><li><p>选择 <code>Maven Dependencies</code> -&gt; 完成 -&gt; 应用并关闭。</p><img src="27.png" width="50%"><ul><li>Maven 仓库的 jar 包就会自动同步到 Tomcat 目录中的 lib 目录下。</li></ul></li><li><p>也可以单独将项目导入 lib 目录中：</p><img src="29.png" width="50%"></li></ol><h1 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h1><table><thead><tr><th align="left">功能</th><th align="left">快捷键</th></tr></thead><tbody><tr><td align="left">自动导包</td><td align="left">ctrl+shirt+o</td></tr><tr><td align="left">注释</td><td align="left">CTRL + SHIFT + /</td></tr><tr><td align="left">取消注释</td><td align="left">CTRL + SHIFT + \</td></tr><tr><td align="left">主动触发提示</td><td align="left">Alt + /</td></tr><tr><td align="left">全局搜索 jar 包中的类（别人写）</td><td align="left">CTRL + SHIFT + T</td></tr><tr><td align="left">全局搜索自己编写的代码</td><td align="left">CTRL + SHIFT + R</td></tr><tr><td align="left">快速修复</td><td align="left">CTRL + 1</td></tr><tr><td align="left">刷新项目</td><td align="left">F5</td></tr><tr><td align="left">查看继承树</td><td align="left">CTRL + T</td></tr><tr><td align="left">转为大写</td><td align="left">ctrl + shift + X</td></tr><tr><td align="left">转为小写</td><td align="left">ctrl + shift + Y</td></tr><tr><td align="left">快速格式化代码</td><td align="left">ctrl + shift + F</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
  </entry>
  <entry>
    <title>XML</title>
    <url>/posts/30389/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><ul><li><p>XML 的设计宗旨是传输数据，而不是显示数据。</p></li><li><p>XML 标签没有被预定义。您需要自行定义标签。</p></li><li><p>XML 被设计为具有自我描述性。</p></li><li><p>XML 是 W3C 的推荐标准。</p></li><li><p>XML 被设计用来结构化、存储以及传输信息。</p></li><li><p>XML 声明：<code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</code></p><ul><li>version 定义 XML 的版本（1.0）。</li><li>encoding 定义使用的编码（UTF-8）。</li></ul></li><li><p>XML 文档必须包含<strong>根元素</strong>。该元素是所有其他元素的父元素。</p></li><li><p>所有的 XML 元素都必须有一个关闭标签，省略关闭标签是非法的。</p></li><li><p>XML 声明没有关闭标签，这不是错误，声明不是 XML 文档本身的一部分。</p></li><li><p>XML 标签对大小写敏感。</p><a id="more"></a></li><li><p>您把字符 “&lt;” 放在 XML 元素中，会发生错误，这是因为解析器会把它当作新元素的开始。</p><ul><li>为了避免这个错误，请用 <code>&amp;lt;</code>（实体引用）来代替 “&lt;” 字符。</li><li>5 个预定义的转义字符：<table><thead><tr><th align="left">转义字符</th><th align="left">符号</th></tr></thead><tbody><tr><td align="left"><code>&amp;lt;</code></td><td align="left">&lt;</td></tr><tr><td align="left"><code>&amp;gt;</code></td><td align="left">&gt;</td></tr><tr><td align="left"><code>&amp;amp;</code></td><td align="left">&amp;</td></tr><tr><td align="left"><code>&amp;apos;</code></td><td align="left">‘</td></tr><tr><td align="left"><code>&amp;quot;</code></td><td align="left">“</td></tr></tbody></table></li></ul></li><li><p>在 XML 中编写注释的语法与 HTML 的语法很相似。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- This is a comment --&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>如果一个错误的 XML 文件被打开，浏览器会报告错误。</p></li><li><p>W3C 的 XML 规范声明：如果 XML 文档存在错误，那么程序就不应当继续处理这个文档，理由是，XML 软件应当轻巧，快速，具有良好的兼容性。</p></li><li><p>使用 CSS 来格式化 XML 文档是有可能的。</p></li><li><p>XSLT 是首选的 XML 样式表语言，XSLT 是在浏览器显示 XML 文件之前，先把它转换为 HTML。</p></li></ul><h1 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h1><ul><li>名称可以包含字母、数字以及其他的字符。</li><li>名称不能以数字或者标点符号开始。</li><li>名称不能以字母 xml（或者 XML、Xml 等等）开始。</li><li>名称不能包含空格。</li><li>可使用任何名称，没有保留的字词。</li></ul><h1 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h1><p>在 XML 中，元素名称是由开发者定义的，当两个不同的文档使用相同的元素名时，就会发生命名冲突。</p><h1 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h1><h2 id="DTD-约束"><a href="#DTD-约束" class="headerlink" title="DTD 约束"></a>DTD 约束</h2><h3 id="内联写法"><a href="#内联写法" class="headerlink" title="内联写法"></a>内联写法</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE note [</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT note (to,from,heading,body)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT to (#PCDATA)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT from (#PCDATA)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT heading (#PCDATA)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT body (#PCDATA)&gt;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>Tove<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>Jani<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>Don't forget me this weekend<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>note (第二行)约束 note 标签。</li><li>note (第三行)定义 note 元素有四个元素：“to、from、heading、body”，这四个元素必须按顺序出现。</li><li>to (第四行)定义 to 元素为 “#PCDATA” 类型（文字）。</li></ul><h3 id="引入本地-DTD-约束"><a href="#引入本地-DTD-约束" class="headerlink" title="引入本地 DTD 约束"></a>引入本地 DTD 约束</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE 约束标签名称 SYSTEM "dtd文件路径"&gt;</span></span><br></pre></td></tr></table></figure><ul><li>SYSTEM 声明引用本地 dtd 文件。</li></ul><h2 id="Schema-约束"><a href="#Schema-约束" class="headerlink" title="Schema 约束"></a>Schema 约束</h2><p>正在努力编写中…</p><!-- rebuild by neat -->]]></content>
  </entry>
  <entry>
    <title>JAVA</title>
    <url>/posts/40121/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><h1 id="JAVA-SE"><a href="#JAVA-SE" class="headerlink" title="JAVA SE"></a>JAVA SE</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><table><thead><tr><th align="left">名词</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">JAVA SE</td><td align="left">JAVA 标准版。</td></tr><tr><td align="left">JAVA EE</td><td align="left">JAVA 企业版本（开发动态网站）。</td></tr><tr><td align="left">JDK</td><td align="left">JAVA 开发工具包，包含 JRE。</td></tr><tr><td align="left">JRE</td><td align="left">JAVA 运行环境。</td></tr></tbody></table><h3 id="jdk-目录说明"><a href="#jdk-目录说明" class="headerlink" title="jdk 目录说明"></a>jdk 目录说明</h3><table><thead><tr><th align="left">目录</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">bin（二进制）</td><td align="left">存放 java 字节码文件。</td></tr><tr><td align="left">db</td><td align="left">数据库。</td></tr><tr><td align="left">lib</td><td align="left">存放 Java 类库文件。</td></tr><tr><td align="left">include</td><td align="left">存放用于本地方法文件的文件。</td></tr><tr><td align="left">demo（另行下载）</td><td align="left">存放演示文件。</td></tr><tr><td align="left">jre</td><td align="left">存放Java运行环境文件。</td></tr></tbody></table><a id="more"></a><h3 id="配置-JAVA-环境"><a href="#配置-JAVA-环境" class="headerlink" title="配置 JAVA 环境"></a>配置 JAVA 环境</h3><table><thead><tr><th align="left">变量</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">PATH</td><td align="left">jdk 中 bin 目录（最简配置）。</td></tr><tr><td align="left">JAVA_HOME</td><td align="left">jdk 目录（用于配置相对路径）。</td></tr><tr><td align="left">CLASSPATH</td><td align="left">1. 编译、运行 Java 程序时，JRE 会去该变量指定的路径中搜索所需的类（.class）文件。<br>2. CLASSPATH 普通配置：<code>.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</code><br>3. 在 JDK9 后，它的lib目录中都已经不包含 dt.jar 和 tool.jar 这两个包了<br>4. 而 <code>.</code> 的搜索当前路径下的 class 文件这个功能，不去设置 CLASSPATH 的话，这就是它的默认搜索路径。</td></tr></tbody></table><h3 id="手动编译"><a href="#手动编译" class="headerlink" title="手动编译"></a>手动编译</h3><table><thead><tr><th align="left">cmd 命令</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">java –version</td><td align="left">查看 java 版本。</td></tr><tr><td align="left">javac file.java</td><td align="left">编译命令，编译成 <code>.class</code> 字节码文件。</td></tr><tr><td align="left">java file</td><td align="left">运行 class 文件，不需要指定 class 后缀。</td></tr></tbody></table><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="class"><a href="#class" class="headerlink" title="class"></a>class</h3><p>class 后面必须紧跟类名且不能包含任何关键字，表示定义一个类。</p><h3 id="包机制"><a href="#包机制" class="headerlink" title="包机制"></a>包机制</h3><h4 id="package"><a href="#package" class="headerlink" title="package"></a>package</h4><ul><li>包机制为了防止命名冲突，访问控制，提供搜索和定位类、接口、枚举和注释。</li><li>同一个包中的类名字是不同的，不同的包中的类的名字是可以相同的。</li><li>当同时调用两个不同包中相同类名的类时，应该加上包名加以区别。</li><li>包声明应该在源文件的第一行，每个源文件只能有一个包声明。</li><li>包语句语法格式：<code>c pkg1[．pkg2[．pkg3…]];</code></li><li>假如包路径为 <code>package net.java.util;</code> 那么源文件存放路径为 <code>net/java/util/Something.java</code>。</li><li>一个公司使用它互联网域名的颠倒形式来作为它的包名。</li></ul><h4 id="import"><a href="#import" class="headerlink" title="import"></a>import</h4><ul><li>import 语句应位于 package 语句之后，所有类的定义之前，可以没有，也可以有多条。</li><li>语法格式：<code>import package1[.package2…].(classname|*);</code></li><li>如果在一个包中，一个类想要使用本包中的另一个类，可省略 import 语句。</li></ul><h3 id="Object-类"><a href="#Object-类" class="headerlink" title="Object 类"></a>Object 类</h3><ul><li>java 默认引用 java.lang 包。</li><li>Object 是所有 java 类的父类，要么是直接继承要么是间接继承。</li><li>直接打印普通类，默认输出 hashcode 十六进制的值（输出 Object 类的 toString 方法）。</li></ul><h3 id="汉字编码"><a href="#汉字编码" class="headerlink" title="汉字编码"></a>汉字编码</h3><p>汉字以 unicode 编码存放，汉字也可以进行排序，但是没有意义。</p><h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><table><thead><tr><th align="left">名词</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">内存泄漏</td><td align="left">程序中己动态分配的堆内存由于某种原因未释放或无法释放，造成系统内存的浪费。</td></tr><tr><td align="left">内存溢出</td><td align="left">程序在申请内存时，没有足够的内存空间供其使用。</td></tr><tr><td align="left">内存越界</td><td align="left">向系统申请一块内存后，使用时超出申请范围。</td></tr><tr><td align="left">缓冲区溢出</td><td align="left">向缓冲区内填充数据时超过了缓冲区本身的容量，而导致数据溢出并覆盖了其他内存空间的数据。</td></tr><tr><td align="left">栈溢出</td><td align="left">1. 是缓冲区溢出的一种，分为上溢出和下溢出。<br>2. 上溢出是指栈满而又向其增加新的数据，导致数据溢出。<br>3. 下溢出是指空栈而又进行删除操作，导致空间溢出。</td></tr></tbody></table><h3 id="GC-垃圾回收机制"><a href="#GC-垃圾回收机制" class="headerlink" title="GC 垃圾回收机制"></a>GC 垃圾回收机制</h3><ul><li>java 是自动垃圾回收机制。</li><li>程序员不需要再动手控制内存的释放。</li><li>当 jvm 发现内存资源紧张的时候，会自动的清理无用的对象。</li><li><code>System.gc();</code> 此方法可以立即运行 gc 垃圾回收器。</li></ul><h3 id="输出输入"><a href="#输出输入" class="headerlink" title="输出输入"></a>输出输入</h3><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><ul><li>System.out.println 打印（print）并换行（line）。</li><li>如果直接打印对象且该对象没有覆盖 Object 类的 toString 方法会打印 <code>包名.类名@十六进制的hashCode</code> 形式。</li></ul><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner reader = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">reader.nextInt();	<span class="comment">// 读入一个整型数据。</span></span><br><span class="line">reader.nextFloat();	<span class="comment">// 读入一个单精度浮点型。</span></span><br><span class="line">reader.nextLine();	<span class="comment">// 读入一个字符串。</span></span><br></pre></td></tr></table></figure><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><h3 id="默认长度"><a href="#默认长度" class="headerlink" title="默认长度"></a>默认长度</h3><table><thead><tr><th align="left">类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">整型</td><td align="left">int（32位）、short（16位）、long（64位）、byte（8位，字节类型）、char（16位）</td></tr><tr><td align="left">浮点型</td><td align="left">1. float（32位，小数点7位）、double（64位，小数点16位）<br>2. float后面数值加f（相当于强制类型转换，浮点型默认double类型）。</td></tr><tr><td align="left">非数值</td><td align="left">booleam（8位，布尔类型）、String（类）</td></tr></tbody></table><h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><table><thead><tr><th align="left">基本类型</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">byte</td><td align="left">0</td></tr><tr><td align="left">short</td><td align="left">0</td></tr><tr><td align="left">int</td><td align="left">0</td></tr><tr><td align="left">long</td><td align="left">0</td></tr><tr><td align="left">float</td><td align="left">0.0</td></tr><tr><td align="left">double</td><td align="left">0.0</td></tr><tr><td align="left">char</td><td align="left">‘\u0000’</td></tr><tr><td align="left">boolean</td><td align="left">false</td></tr></tbody></table><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>静态初始化：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] 数组名称 = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] 数组名称 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;               <span class="comment">// 与上面的效果相同，只是简写了上面的内容。</span></span><br><span class="line"><span class="keyword">int</span>[] 数组名称 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1024</span>] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;; <span class="comment">//错误，静态初始化不能指定数组容量。</span></span><br></pre></td></tr></table></figure><p>动态初始化：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] 数组名称 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br></pre></td></tr></table></figure><h3 id="Arrays-类"><a href="#Arrays-类" class="headerlink" title="Arrays 类"></a>Arrays 类</h3><table><thead><tr><th align="left">方法</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">Arrays.toString(数组名)</td><td align="left">输出数组内容。</td></tr><tr><td align="left">Arrays.asList(数组名称)</td><td align="left">将数组转换成 list 集合。</td></tr><tr><td align="left">Arrays.sort(数组引用)</td><td align="left">对数组中的元素按照升序排序。</td></tr></tbody></table><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>可变参数定义：数据类型…数组名称。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span>...args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">		</span><br><span class="line">		result += args[i];</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	System.out.println(result);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main 方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] params = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line">sum(params);</span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure><p>可变参数是数组参数的一种简写，可变参数相当于：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> args[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">		result += args[i];</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">	System.out.println(result);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数值类型转换"><a href="#数值类型转换" class="headerlink" title="数值类型转换"></a>数值类型转换</h2><h3 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h3><ul><li>运算时，运算两端的数据类型必须要保持一致。</li><li>如果运算都为数值类型，会自动把小的数据类型转换为大的数据类型。</li><li>不能把一个大的数值类型赋值给小的类型，比如：int 类型变量不能赋值给 byte 类型变量。</li><li>而 byte 类型变量可以直接赋值给 int 类型的变量。</li></ul><h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><p>强制类型转换容易造成数据的溢出，比如：long 类型变量赋值给 int 类型变量。</p><h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><ul><li>在一个作用域（一对花括号为一个作用域）中，要给变量赋另一个变量，它会先到当前作用域中去找是否存在指定变量。</li><li>如果有，就给作用域中的变量直接赋值，不会再往上去找。</li><li>如果没有，就往上一层作用域去找。</li></ul><h2 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h2><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><p>foreach 遍历数组，是一种简写方式。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] num = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i : num) &#123;</span><br><span class="line"></span><br><span class="line">	System.out.println(i);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; num.length; i++)&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> i = num[j];</span><br><span class="line">	System.out.println(i);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>foreach 可以遍历数组和集合。</li><li>规定不能在 foreach 循环中增删操作。</li></ul><h3 id="退出外层循环"><a href="#退出外层循环" class="headerlink" title="退出外层循环"></a>退出外层循环</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">outter: <span class="keyword">for</span>()&#123;</span><br><span class="line"></span><br><span class="line">    inner:<span class="keyword">for</span>()&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span> outter;   <span class="comment">// 退出outter循环</span></span><br><span class="line">        <span class="keyword">break</span> inner;    <span class="comment">// 退出inner循环</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>outter 和 inner 分别为 for 循环别名。</li></ul><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><ul><li>final 修饰变量表示其值不能改变。</li><li>final 修饰方法表示方法不能重写。</li><li>final 关键修饰类的时候，表示这个类不能被继承。</li><li>final 修饰引用表示指向的地址不能改变，即对象不能改变。</li><li>用 final 修饰的变量存放在方法区，方法区的声明周期直到 jvm 关闭。</li></ul><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><ul><li>static 只能修饰类中的成员属性和方法，也不能在方法中使用 static 修饰符。</li><li>static 不能修饰普通类，但可以修饰普通类中的内部类。</li><li>static 用来声明独立于对象的静态成员，无论一个类实例化多少对象，它的静态成员只有一份拷贝。</li><li>static 修饰的变量在项目启动时就分配内存，直到程序结束。</li><li>static 修饰的方法在被调用的时候才分配内存。</li><li>静态方法只能访问静态成员，就算用 final 修饰的成员也不能访问。</li><li>静态方法中定义的变量不是静态的，返回值是静态的。</li><li>static 修饰的属性和方法放在方法区，而基本数据类型是存放在栈区的。</li></ul><h3 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h3><ul><li>当类被加载的时候就会执行静态代码块。</li><li>类被加载的意思是使用 new 关键字。</li><li>new 一个对象就是在堆内存中开辟一块内存。</li><li>类只会被加载一次到内存中，下一次直接从内存中使用。</li><li>静态字段是在静态代码块中初始化，非静态字段是在构造方法中初始化。</li></ul><h2 id="this-指针"><a href="#this-指针" class="headerlink" title="this 指针"></a>this 指针</h2><p>在一个类中，方法不是静态方法，可以直接调用本类中的其他方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">people</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        show(); <span class="comment">//相当于this.show();</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="this-说明"><a href="#this-说明" class="headerlink" title="this 说明"></a>this 说明</h3><ul><li>this 只能在类中使用，表示当前对象。</li><li>this 可以作为返回值，表示返回当前对象。</li><li>静态方法没有 this 指针，也就是说不能在静态方法中使用 this 关键字。</li></ul><h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><ul><li>super 指向父类对象的地址。</li><li>this 和 super 可以调用构造方法，如果构造方法复用，this 和 super 必须放在第一行。</li><li>this 和 super 不能混合使用。</li><li>父类的成员属性一般是私有的，可以通过调用父类的构造函数初始化父类的私有属性。</li></ul><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ul><li>无论父类中的成员变量是私有的、共有的、还是其它类型的，子类都会拥有父类中的这些成员变量。</li><li>但是父类中的私有成员变量，无法在子类中直接访问。</li><li>必须通过从父类中继承得到的 protected、public 方法（如 getter、setter 方法）来访问私有成员。</li><li>无论父类中的成员变量是静态的、还是非静态的，子类都会拥有父类中的这些成员变量。</li><li>无论父类中的成员变量是否被子类覆盖，子类都会拥有父类中的这些成员变量。</li><li>继承父类时，子类的访问权限要比父类的大或一样大，不能比父类权限小。</li></ul><h3 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h3><table><thead><tr><th align="left">关系</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">基类</td><td align="left">父类的别称。</td></tr><tr><td align="left">派生类</td><td align="left">子类的别称。</td></tr></tbody></table><h3 id="访问权限"><a href="#访问权限" class="headerlink" title="访问权限"></a>访问权限</h3><table><thead><tr><th align="left">访问权限</th><th align="left">子类能否访问</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">public</td><td align="left">能</td><td align="left"></td></tr><tr><td align="left">默认</td><td align="left">能</td><td align="left">同一个包中的子类可以访问，不同包中的子类不能访问。</td></tr><tr><td align="left">protected</td><td align="left">能</td><td align="left"></td></tr><tr><td align="left">private</td><td align="left">不能</td><td align="left"></td></tr></tbody></table><h3 id="类的类型转换"><a href="#类的类型转换" class="headerlink" title="类的类型转换"></a>类的类型转换</h3><ul><li><p>把父类对象赋值给子类引用，需要强制类型转换。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Dog dog = (Dog)anim;	<span class="comment">// Animal 为 Dog 的父类，anim 为 Anima 类型的实例。</span></span><br></pre></td></tr></table></figure></li><li><p>而子类对象赋值给父类引用不需要强制类型转换。</p></li><li><p>只有存在父子关系才可以类型转换，子类之间不能相互转换。</p></li><li><p>为什么子类对象赋值给父类引用不需要强制类型转换？</p><ul><li>父类引用接受不同子类实例，表现为多态性。</li><li>子类继承父类，它含有父类部分。</li><li>如果子类对象赋值给父类引用，则使用该变量只能访问子类的父类部分，因为子类含有父类的部分。</li><li>如果反过来，子类引用访问父类的扩充成员变量，就会访问不到，因为原变量不包含该部分（内存越界）。</li></ul></li></ul><h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><ul><li><p>判断对象是否为指定类的实例，返回布尔类型。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">boolean</span> result = obj <span class="keyword">instanceof</span> Class;</span><br></pre></td></tr></table></figure></li><li><p>也可以判断对象是否为指定类的子类实例。</p></li><li><p>也可以判断对象是否实现对应接口。</p></li></ul><h3 id="重写和重载"><a href="#重写和重载" class="headerlink" title="重写和重载"></a>重写和重载</h3><h4 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h4><ul><li>重写是子类对父类的允许访问的方法的实现过程进行重新编写, 返回值和形参都不能改变。</li><li>重写方法不能抛出新的检查异常或者比被重写方法申明更加宽泛的异常。</li><li>返回类型与被重写方法的返回类型可以不相同，但是必须是父类返回值的派生类（JAVA7 特性）。</li><li>访问权限不能比父类中被重写的方法的访问权限更低。</li><li>声明为 final 的方法不能被重写。</li><li>声明为 static 的方法不能被重写，但是能够被再次声明（static 修饰的方法或属性属于类）。</li><li>构造方法不能被重写。</li></ul><h4 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h4><ul><li>重载是在一个类里面，方法名字相同，而参数不同，返回类型可以相同也可以不同。</li><li>被重载的方法必须改变参数列表(参数个数或类型不一样)。</li><li>方法能够在同一个类中或者在一个子类中被重载。</li><li>被重载的方法可以改变返回类型。</li><li>无法以返回值类型作为重载函数的区分标准。</li></ul><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><ul><li>多态是同一个行为具有多个不同表现形式或形态的能力。</li><li>多态就是同一个接口，使用不同的实例而执行不同操作。</li><li>或父类引用指向子类对象，运行时表现的是子类特征。</li></ul><h3 id="abstract（抽象）"><a href="#abstract（抽象）" class="headerlink" title="abstract（抽象）"></a>abstract（抽象）</h3><ul><li>abstract 修饰类表示抽象类。</li><li>抽象类除了不能实例化对象之外，类的其它功能依然存在，成员变量、成员方法和构造方法的访问方式和普通类一样。</li><li>由于抽象类不能实例化对象，所以抽象类必须被继承，才能被使用。</li><li>abstract 修饰方法表示该方法为抽象方法，抽象方法没有方法体，具体由子类实现。</li><li>abstract 不能修饰成员属性。</li><li>abstract 不能和 private、final 和 static 修饰符一起使用。</li><li>abstract 修饰的方法必须被重写，private 修饰的方法为私有方法，私有方法是不能被重写，所以二者冲突。</li><li>抽象方法没有方法体，静态方法需要对方法体中的执行内容分配空间，所以不能和 static 共存。</li><li>final 修饰的类和方法不能被继承和重写，所以不能和 final 共存。</li></ul><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><ul><li>接口是一个抽象类型，是抽象方法的集合，接口通常以 interface 来声明。</li><li>接口没有构造方法。</li><li>接口定义的成员默认访问权限时 public。</li><li>接口不可以实现方法，接口中的方法会被隐式的指定为 public abstract。</li><li>接口中的变量会被隐式的指定为 public static final 变量。</li><li>接口中不能含有静态代码块以及静态方法(用 static 修饰的方法)。</li><li>普通类 extends 和 implements 可以配合使用，类只能继承一个类，但类可以实现多个接口。</li><li>接口可以继承多个接口，而类只能继承一个父类。</li><li>除非实现接口的类是抽象类，否则该类要实现接口中的所有方法。</li></ul><h4 id="抽象类和接口的区别"><a href="#抽象类和接口的区别" class="headerlink" title="抽象类和接口的区别"></a>抽象类和接口的区别</h4><ul><li>相同点都不能被实例化。</li><li>不同点：<ol><li>抽象类是有构造方法，而接口中是没有构造方法。</li><li>抽象类可以包含普通方法和抽象方法，而接口只能包含抽象方法。</li><li>接口中成员变量默认属性是public static final，而抽象类是默认权限（和普通类一样）。</li><li>接口中成员方法默认属性是 public abstract，而抽象类则是默认权限。</li><li>一个类只能继承一个抽象类，而一个类却可以实现多个接口。</li><li>抽象类是一个类，而接口并不是类，编写接口的方式和类相似。</li></ol></li></ul><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><ul><li>泛型即参数化类型，参数化类型就是将类型由原来的具体的类型参数化，然后在使用时传入具体的类型。</li><li>泛型可以使用在类、接口和方法中，分别被称为泛型类、泛型接口、泛型方法。</li><li>在编译过程中，正确检验泛型结果后，会将泛型的相关信息擦出。</li><li>并且在对象进入和离开方法的边界处添加类型检查和类型转换的方法，泛型信息不会进入到运行时阶段。</li><li>泛型解决了类型转换（不用手动强制类型转换）和类型检测（类型约束）的问题。</li></ul><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名称&lt;泛型标识：可以随便写任意标识号，标识指定的泛型的类型&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> 泛型标识 <span class="keyword">var</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3><p>自定义泛型方法，单独给一个方法定义泛型。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(T a)</span></span>&#123; &#125;</span><br></pre></td></tr></table></figure><ul><li>方法想要单独使用泛型，必须要有参数才有意义。</li></ul><p>静态方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">test</span><span class="params">(T a)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> a;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型通配符"><a href="#泛型通配符" class="headerlink" title="泛型通配符"></a>泛型通配符</h3><p>泛型通配符 &lt;?&gt;：不知道使用什么类型来接收的时候可以使用?表示未知，通配符只用来做接收数据，不能用来操作数据。</p><h3 id="泛型的擦除"><a href="#泛型的擦除" class="headerlink" title="泛型的擦除"></a>泛型的擦除</h3><p>其中list_b就没有泛型了。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list_a = <span class="keyword">null</span>;</span><br><span class="line">List  list_b = <span class="keyword">null</span>;</span><br><span class="line">list_b = list_a;</span><br></pre></td></tr></table></figure><h3 id="泛型注意点"><a href="#泛型注意点" class="headerlink" title="泛型注意点"></a>泛型注意点</h3><p>泛型前后类型必须保持一致。</p><p>从 JAVA7 开始后面的类型可以不声明泛型如：<code>new ArrayList&lt;&gt;();</code></p><p>泛型是没有继承的。</p><p>泛型其实是一个语法糖，本质还是Object，内部其实还是要做强转的。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">	T  x;</span><br><span class="line">	T  y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 本质还是</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span>&#123;</span><br><span class="line">	Object  x;</span><br><span class="line">	Object  y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>泛型不能使用在静态方法上面。原因：静态方法是直接使用类名调用，泛型是在创建对象的时候才会去声明。</p><p>泛型只能指定声明包装类，不能是基本数据类型， 所以泛型是引用类型，引用类型就支持继承。</p><h2 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h2><p>定义：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> 类名().属性 = 参数;</span><br></pre></td></tr></table></figure><p>匿名对象指没有名称的对象，创建对象之后没有赋给某一个变量。</p><p>因为没有名称，匿名对象仅仅只能使用一次，一般的，把匿名对象作为方法的实参传递。</p><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><p>自动装箱：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer num = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 相当于		</span></span><br><span class="line">Integer num = Integer.valueOf(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><ul><li>其实是一个语法糖。</li><li>valueOf 方法当中的实现还是new一个包装类。</li></ul><p>自动拆箱：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n = num; 其中num为Integer类型</span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line"><span class="keyword">int</span> n = num.intValue;</span><br></pre></td></tr></table></figure><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>外部类只能有两个修饰符，public 和默认（什么都不写）。</p><h3 id="实例内部类"><a href="#实例内部类" class="headerlink" title="实例内部类"></a>实例内部类</h3><p>创建内部类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outter</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>        <span class="comment">// Inner的引用，this指针与对象有关系，不关类的事。</span></span><br><span class="line">        Outter.<span class="keyword">this</span>	<span class="comment">// Outter的引用。</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实例内部类可以理解为外部类的一个成员属性。</li><li>实例内部类中的<strong>成员</strong>不能用 static 修饰。因为 static 只能在外部类或静态内部类中声明。</li><li>实例内部类可以访问外部类的静态成员和普通成员。</li></ul><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><p>静态内部类没有外部类的引用，因为外部类在堆中开辟内存，静态内部类在方法区开辟内存。</p><p>静态内部类只能访问外部类的静态成员。</p><p>静态内部类中可以用 static 修饰。</p><h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><p>局部内部类定义在类中的方法中，不能有 static 修饰，因为用 static 修饰，表示依赖与类。局部内部类存在与类中的方法，所以不能在外部类中创建。<br>局部内部类访问当前方法中的变量，必须用final修饰，普通变量和方法存在与栈中，而实例化对象存在与堆中。当方法出栈，局部内部类访问的变量跟着一起出栈就访问不到，造成空指针异常，用final修饰就是把变量存放在方法区中。<br>匿名内部类。必须有父类 或 接口 才能实现。<br>创建方法：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new 父类构造器  或  接口()&#123;</span><br><span class="line"></span><br><span class="line">	定义方法</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法中的内部类访问外部类方法必须定义final关键字。方法是处于栈中的，生命周期比较短。</p><h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ol><li>String.format();</li></ol><h1 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h1><p>生成随机数：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Random r = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取0-9之间的随机数</span></span><br><span class="line"><span class="keyword">int</span> number = r.nextInt(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取1-10之间的随机数</span></span><br><span class="line"><span class="keyword">int</span> num = r.nextInt(<span class="number">10</span>)+<span class="number">1</span>;</span><br></pre></td></tr></table></figure><h1 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><p>时间戳是指格林威治时间 1970 年 01 月 01 日 00 时 00 分 00 秒(北京时间 1970 年 01 月 01 日 08 时 00 分 00 秒)起至现在的总<strong>秒</strong>数。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>获取毫秒级时间戳：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法 一  </span></span><br><span class="line">System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法 二  </span></span><br><span class="line">Calendar.getInstance().getTimeInMillis();</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法 三  </span></span><br><span class="line"><span class="keyword">new</span> Date().getTime();</span><br></pre></td></tr></table></figure><ul><li>System.currentTimeMillis() 方式速度最快。</li><li>Calendar.getInstance().getTimeInMillis() 方式速度最慢，Canlendar 因为要处理时区问题会耗费很多的时间。</li></ul><p>获取纳秒级时间戳：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.nanoTime();</span><br></pre></td></tr></table></figure><h1 id="UUID"><a href="#UUID" class="headerlink" title="UUID"></a>UUID</h1><h2 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h2><p>UUID 目的是让分布式系统中的所有元素，都能有唯一的辨识信息，而不需要通过中央控制端来做辨识信息的指定。</p><p>UUID 是由一组 32 位数的 16 进制数字所构成，所以 UUID 理论上的总数为 16^32=2^128，约等于 3.4 x 10^38。也就是说若每纳秒产生 1 兆个 UUID，要花 100 亿年才会将所有 UUID 用完。</p><p>UUID 的标准型式包含 32 个 16 进制数字，以连字号分为五段，形式为 8-4-4-4-12 的 32 个字符。示例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">550e8400-e29b-41d4-a716-446655440000</span><br></pre></td></tr></table></figure><p>UUID由以下几部分的组合：</p><ol><li>当前日期和时间。</li><li>时钟序列。</li><li>全局唯一的IEEE机器识别号，如果有网卡，从网卡MAC地址获得，没有网卡以其他方式获得。</li><li>在 hibernate（Java orm框架）中， 采用 IP-JVM 启动时间 - 当前时间右移32位 - 当前时间 - 内部计数（8-8-4-8-4）来组成 UUID。</li></ol><h2 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h2><p>生成 UUID：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String uuid = UUID.randomUUID().toString().replace(<span class="string">"-"</span>, <span class="string">""</span>).toLowerCase();</span><br></pre></td></tr></table></figure><h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><p>常量可以通过一个外部文件记录，JAVA 程序通过读取这个文件读取常量（比如 URL、参数）。</p><p>当常量改变的时候，就可以通过修改静态文件改变常量，就不用改程序代码。</p><h1 id="JAVA-三层架构"><a href="#JAVA-三层架构" class="headerlink" title="JAVA 三层架构"></a>JAVA 三层架构</h1><p>三层：controller、service、dao。</p><img src="https://ftp.bmp.ovh/imgs/2019/08/463b74f379e33155.png" width="50%"><h1 id="MVC-模式"><a href="#MVC-模式" class="headerlink" title="MVC 模式"></a>MVC 模式</h1><p>MVC 全名是 Model View Controller。</p><ul><li>Model 指的是数据（比如数据库保存的数据）。</li><li>Controller 控制器负责从视图读取数据，控制用户输入，并向模型发送数据（比如 JAVA 后端）。</li><li>View 指的是页面展示（前端）。</li></ul><p>MVC 分层有助于管理复杂的应用程序，因为您可以在一个时间内专门关注一个方面（前端、后端、数据库分离）。</p><ul><li>后端负责通过 jsp 渲染网页。</li><li>前端只负责调用后端接口和页面美化。</li></ul><hr><p>jvm内存<br>基本类型变量存放在栈中。<br>方法存放在栈中。<br>new关键字修饰存放在堆中。<br>static关键字修饰存放在方法区。<br>final关键字修饰存放在方法区。<br>字符常量存放在方法区中的常量池中。<br>枚举<br>关键字enum<br>定义枚举 enum 枚举名称{<br>常量对象1，常量对象2，常量对象3…<br>} 注意：枚举中的常量对象后面不需要跟加分号，如果要在枚举对象后面定义变量或方法，一定要加分号。<br>枚举中的常量默认被 public static final 枚举类型 修饰。<br>枚举内部私有化自己的构造器，不能创建对象。<br>枚举是一个特殊的java类，枚举类默认继承enum这个类。枚举是多个常量对象的集合。</p><p>System.out.println( 枚举名称.常量 ); 和 System.out.println( 枚举名称.常量.name ); 效果一样。</p><p>枚举名称.常量.ordinal() 返回枚举下标。<br>switch(枚举名称.常量){ //相当于 枚举名称.常量.ordinal();<br>case 枚举中常量1:break;<br>case 枚举中常量2:break;<br>}</p><p>valueOf( String s )把一个字符串转成一个枚举类型，字符串对应的枚举必须要存储，否则会报错。<br>枚举类型 新变量 = 枚举类型.valueOf(“枚举中的常量”);</p><p>values() 通过values可以获取数据当中的所有常量，返回枚举类型的数据。<br>枚举中定义的是枚举类型的对象，不是常量，而是常量对象。<br>String<br>String本质还是char类型数组。<br>String str = null; 还没有分配空间。<br>String str = “”; 已经分配了空间，但内容为空。<br>字符串比较：<br>== 比较两个字符串地址是否相等。<br>equals(Object obj); 在Object中和==号的作用相同，但String已经覆盖了Object类的方法，不仅比较地址是否相等，而且比较内容是否相等，如果地址相等，立即返回true，如果地址不等，继续比较内容是否相等，如果相等，返回true，否则返回false。</p><p>String str = “abc”;<br>String str = new String(“abc”);<br>上面两种写法的区别：<br>第一种写法：会先到常量池中看一下是否存在该字符串常量，如果存在，直接使用，不创建新的地址。否则，就会在常量池中创建一个对象。<br>第二种写法，先在堆中开辟一块空间，在查看常量池中是否存在”abc”这个对象，若存在，堆中的对象就会指向这个”abc”的对象，再赋值给str。</p><p>String str = “abc”;<br>String str1 = “a” + “b” + “c”;<br>str 和 str1 是否相等？<br>相等，编译时，编译器会把“a” + “b” + “c” 这种形式 弄成 “abc” 这种形式。<br>String temp = “ab”;<br>String str3 = temp + “c”;<br>str3 和 str是否相等？<br>不等，原因如下图</p><p>String类常用方法：<br>String(byte[] byte,int start,int length);<br>start为byte数组开始读的下标，length为要读多少个元素。该构造方法在读取文件的时候经常使用。<br>String(byte[] byte,int start,int length, String charsetName); charsetName 为编码类型。<br>int indexOf(String str);<br>返回子串str在当前字符串中的位置，若没有找到，返回-1。<br>String substring( int beginindex );<br>截取当前字符串从beginindex处的字符直到最后的子串。<br>String substring( int beginindex, int endindex );<br>截取当前字符串从beginindex处开始到endindex处的子串，不包括endindex处。<br>String trim()<br>作用是去掉字符串两端的多余的空格，且无论两端的空格有多少个都会去掉，当然中间的那些空格不会被去掉。</p><p>字符串连接：<br>“+”除字符串相加功能外，还能将字符串与其他的数据类型相连成一个新的字符串。</p><p>String是不可变字符串，当进行字符串拼接的时候，会不断创建对象<br>可变字符串：StringBuilder 效率最高，但是没有加锁，不安全<br>StringBuffer 效率比StringBuilder慢一些，但是安全<br>可变字符串，它的内容可以进行修改，改变是不会创建新的地址。<br>可变字符串通过append(String str); 方法进行拼接。</p><p>字符串包含双引号：通过转义字符 \” 转义成 “<br>集合类<br>数组可以存放任意类型，如基本数据类型和引用类型。<br>而集合类只能存放引用类型，就算存放基本数据类型，也会自动装箱。</p><p>Collection：<br>size(); 获取集合中的长度。<br>toArray(); 将集合放回Object类型的数组。<br>addAll(Collection c); 将c集合所有内容合并到指定类中。如b.addAll(c);<br>remove(“删除指定值”);</p><p>Iterator是一个接口，具体实现是各种集合类中完成。<br>Iterator it = c.iterator(); 将c集合中的内容放到迭代器中，放到迭代器中的内容会自动类型提升，提升为Object类型。<br>it.next(); 获取迭代器中的内容，类型为Object类型的引用。<br>it.hasNext(); 判断迭代器中是否还有内容，如果有返回true，否则返回false。<br>it.remove(); 删除迭代器正在遍历的元素。不能直接修改集合中的结果，一定要通过迭代器的remove方法修改。原因通过具体源码可得。</p><p>list：<br>add(index, “填充参数”); 根据角标填充参数，注意不能大于list的长度。<br>get(index); 根据角标获取参数。<br>listIterator(); 返回ListIterator类型的迭代器，功能比普通迭代器强大，有add()方法。ListIterator也是一个接口，具体实现在集合类中完成。</p><p>ArrayList：<br>实现原理：把原有数据复制出来，再创建一个新数组，容量扩充原来的50%，在原数据放进去。<br>获取元素比较快。<br>Vector:<br>和ArrayList差不多，但是Vector比ArrayList跟安全，因为加锁了。<br>LinkedList：<br>增加删除操作比较快。</p><p>Set：<br>想要在Set当中自定义对象去重，必须覆盖equals和hashCode方法。Set集合先判断hashCode是否相等，若果两个对象的hashCode相等，就通过类中equals方法比较。</p><p>LinkHashSet:<br>LinkHashSet是HashSet的子类，它存放数据是有序的，而HashSet存放数据无须的，它们都不能存放相同数据。<br>TreeSet<br>用来对数据进行排序。向这个集合中存放数据都是排序好，不重复的。<br>TreeSet存放的引用类型必须相同。因为引用类型不同，无法比较，也就无法存放。<br>要将自定义对象存放到TreeSet集合中，必须实现Comparable接口中的comparaTo方法。<br>comparaTo返回值等于0，表示比较的值相等。<br>comparator返回值小于0，表示比比较值小。<br>comparator返回值大于0，表示比比较值大。<br>TreeSet可以构造方法中可以传入一个比较器，根据比较器中的规则进行比较。<br>要使用比较器必须实现ComparaTor接口中的compara()方法。<br>Map：<br>map包含两个集合，一个Set集合，一个Collection集合。<br>put(key, value); 将键值对存放到map集合中。如果key值不重复，返回null。如果重复，就把原来覆盖掉，把原来的key值作为返回值。<br>map不能使用foreach进行遍历。<br>get(key); 根据key值取出对应value值。<br>keySet() 将key集合返回为一个Set集合，通过这个set集合可以获取所有key值，通过key值就可以拿出value值。<br>entrySet() 将map集合中的内容转成entry对象返回entry对象的Set集合。entry为map集合中的内部接口。<br>foreach( Map.Entry&lt;K, V&gt; entry : map.entrySet() ){<br>entry.getKey();<br>entry.getValue();<br>} containsKey(“key”) 判断key值是否存在，存在返回true，否则返回false<br>LinkHashMap和HashMap唯一区别是，LinkHashMap存放数据是有序的，而HashMap存放数据是无序的。<br>TreeMap是对key值进行排序。<br>异常<br>异常处理机制由捕获异常和处理异常两部分。当出现了异常事件，就会生成一个异常对象，传递给运行中的系统。系统将会寻找处理异常的方法，把当前对象交给该方法处理。如果没有找到可以捕获异常的方法，系统将会终止。<br>在try代码块中出现异常，会终止try代码块中后续程序，try代码块外的代码不会受到影响。<br>Exception：<br>getMessage(); 获取异常信息。<br>直接打印异常对象 获取异常类型和信息。<br>printStackTrace(); 获取异常类型、信息和发生代码错误的位置。</p><p>throw： 抛出运行时异常。如：throw new RuntimeException(“非法数据”);<br>为什么抛出运行时异常，可以不用处理。异常可以往上抛，可以抛给jvm处理，jvm内部有异常处理机制。<br>抛出编译时异常。如 throw new Exception(“非法数据”); 抛出编译时异常，要么必须处理，要么往上抛出异常。<br>throw后面跟异常对象的名称。<br>throws 用在方法声明之后，后面可以跟多个异常类型的引用。<br>return阻止当前方法运行， 是不能阻止finally代码块的运行。finally代码块外的代码不会执行。<br>自定义异常：<br>定义运行时异常：继承运行时异常RuntimeException。<br>定义编译时异常：继承Exception类。<br>定义有参数的异常类：定义带参数的构造方法，构造方法中把参数传入父类的构造方法。通过super关键字。<br>通过类加载器获得文件绝对路径<br>xxx.class.getClassLoader().getResource(“”).getPath();<br>获取src资源文件编译后的路径(即classes路径)。</p><p>xxx.class.getClassLoader().getResource(“文件”).getPath();<br>获取classes路径下“文件”的路径，如果文件不存在则会抛出异常。</p><p>xxx.class.getResource(“”).getPath();<br>getResource(“”)，获取类所在包的路径。<br>getResource(“/”) ，java 2e 获取classes目录的根目录， java se 获取bin目录的根目录。</p><p>this.getClass().getClassLoader().getResource(“”).getPath();<br>通过类的实例获取路径。<br>file类的使用<br>定义File类：<br>File file = new File(String pathname);<br>pathname为文件的路径名称。<br>File file = new File(String pathname, String child);<br>pathname为路径名，child为文件名。<br>File file = new File(File parent, String child);<br>parent为File类，表示所在目录的路径， child为文件名， 其中parent的实例为new File(“C:/目录路径”);<br>file类的路径可以是目录路径或文件路径。<br>常用方法：<br>boolean mkdir(); 创建目录。<br>boolean mkdirs(); 创建多层目录。<br>boolean createNewFile();<br>如果文件不存在，创建一个空的文件。创建文件的所在目录必须存在，不然报错。<br>boolean exists(); 判断文件是否存在。<br>String getName(); 取得文件名或路径名。<br>String getParent(); 取得上一级目录。<br>boolean delete(); 删除文件。假如要删除目录，该目录必须为空。<br>String[] List(); 返回当前目录下的所有文件和子目录。<br>不常用方法：<br>long length(); 获取文件的大小，以字节为单位。<br>boolean isDirectory(); 判断是否为目录，文件必须存在才能判断。<br>boolean isFile(); 判断是否为文件，文件必须存在才能判断。</p><p>File类的对象主要用于建立与某磁盘文件的链接，获取主要信息，例如文件所在目录，文件长度，文件的读写权限。不涉及对文件的读写操作。<br>输入输出流不能同时操作同一个文件。<br>输入/输出流 的 使用<br>流中的数据可以是未经加工的二进制流数据，也可以是经一定编码处理后符合某种格式规定的特定数据。<br>字节流是最基本的，采用ASCII编码,所有的InputStream和OutputStream的子类都是,主要用在处理二进制数据，它是按字节来处理的。<br>但实际中很多的数据是文本，又提出了字符流的概念，采用Unicode编码.它是按虚拟机的encode来处理，也就是要进行字符集的转化。<br>所有输入流类都是InputStream抽象类或Reader抽象类的子类，而所有输出类都是OutputStream抽象列或Writer抽象类的子类。</p><p>InputStream:<br>int read(byte[] b);<br>从输入数据流中读取字节并存入数组中。<br>int read(byte[] b, int off, int len);<br>从输入数据流中读取len个字节存入数组下标为off的数组b中。<br>void close();<br>关闭输入数据流。<br>OutputStream:<br>void write(byte[] b, int off, int len);<br>当文件不存在会自动创建文件。<br>void close();<br>先关闭输出流再关闭输入流。<br>需要自己close的东西，一般都是用了虚拟机之外的资源，例如端口，显存，文件等，虚拟机无法通过垃圾回收释放这些资源，只能你显式调用close方法来释放。你读一个文件，忘记关闭了流，你在操作系统里对这个文件的写，删除等操作就会报错，告诉你这个文件被某个进程占用。</p><p>FileOutputStream(File file);<br>FileInputStream(File file);</p><p>BufferedInputStream 是缓冲输入流。它继承于FilterInputStream。<br>BufferedInputStream(InputStream in);<br>内置缓存字节数组的大小 8KB。<br>BufferedInputStream(InputStream in, int size);<br>使用指定buf大小。<br>1.BufferedOutputStream在close()时会自动flush。<br>2.BufferedOutputStream在不调用close()的情况下，缓冲区不满，又需要把缓冲区的内容写入到文件或通过网络发送到别的机器时，才需要调用flush。<br>BufferedInputStream装饰一个 InputStream 使之具有缓冲功能。</p><p>DataInputStream(InputStream is);<br>DataOutputStream(OutputStream os);<br>这个输入输出流可以按照数据类型来读取数据。<br>RandomAccessFile类<br>RandomAccessFile类负责对一部分的文件输入 / 输出。 它不是InputStream类和OutputStream类的类。RandomAccessFile类创建的流可以读取文件的数据也可以向文件写入数据。不用创建同时创建输入输出类。</p><p>RandomAccessFile类的创建：<br>RandomAccessFile(String path, String mode);<br>RandomAccessFile(File file, String mode);<br>mode的参数分为 r, rw, rws, rwd<br>r : 表示只读，试图进行写操作将引发异常。<br>rw : 表示可读可写， 文件不存在将会先创建文件。<br>rws : 表示可读可写，并且更改文件内容或元数据时同步写到存储设备中。<br>rwd : 更改文件内容时同步写到存储设备中。</p><p>常用方法：<br>long getFilePointer(); 返回文件指针的当前位置。<br>void seek(long pos);<br>设置文件指针到给定的绝对位置。一般以位置0标志文件的开始。<br>long length(); 返回文件的长度。<br>close(); 关闭文件。<br>readDouble() 从文件中读取一个双精度浮点值（8字节）<br>多线程<br>创建多线程有两种方法：继承Thread类和实现Runnable接口。</p><p>通过继承Thread类来创建线程类：<br>一个Thread类的实例对象就是一个线程，Thread类的子类对象也是一个线程。<br>线程在程序执行时的代码被封装在Thread类或及其子类的成员方法中。通过覆写run()方法来完成所需要的功能。<br>线程的启动或运行并不是调用成员方法run(),而是调用成员方法start()达到间接调用run()方法的目的。</p><p>通过实现Runnable接口来创建线程类：<br>Runnable只有run() 方法, 没有start() 方法。Runnable接口实现类的实例只是具有线程体的目标对象。<br>启动 Runnable接口实现类的 线程必须将类的实例传递给Thread类 的构造器。创建出Thread类的实例。通过Thread类的引用调用start() 方法。<br>Runable接口 只是一个接口。 没有任何方法。<br>注意：必须覆盖 Thread类 或 Runnable 接口 的 run() 方法 才能定义线程完成所需功能。</p><p>多线程是多个线程之间轮流执行的,就是将一个时间段分成若干个时间片,每个线程只运行一个时间片。时间片结束，运行下一个相乘。例如一个 线程 在 死循环中， 它的时间片已过。也会被剥夺 cpu 的控制权。</p><p>main方法本身也是一个线程。</p><p>线程5种状态：<br>新生态：已经被创建，但没有分配CPU资源。<br>可运行状态：线程执行start()方法后，便进入可运行状态。此时线程不一定立即执行。但CPU随时可能被分配该线程。<br>运行状态：正在运行的线程处于运行状态。此时线程独占CPU的控制权。若有更高优先级的线程出现，则该线程将放弃控制权进入可运行状态。<br>阻塞状态：如果线程处于阻塞状态，此时线程不会被分配CPU时间。<br>死亡状态：当线程结束后进入死亡状态。</p><p>synchronized关键字：<br>synchronized 块的使用：<br>Object obj<br>synchronized (obj) {<br>//代码块<br>} 要执行代码块中的内容，必须争夺obj上的锁。</p><p>简化写法：<br>synchronized ( this ) {<br>//代码块<br>} 要执行代码块中的内容，必须争夺这个对象的锁。</p><p>synchronized 方法加锁。 本质还是对 this 加锁。</p><p>对静态方法的同步本质上是对类的同步。对类 的 .class 加锁</p><p>对象锁是在一个类的对象上加的的锁，只有一把，不管有几个方法进行了同步。这些同步方法都共有一把锁，只要一个线程获得了这个对象锁，其他的线程就不能访问该对象的任何一个同步方法。</p><p>常用方法：<br>static int activeCount(); 查看线程数。<br>static void sleep(long millis);<br>在指定的时间内处于阻塞状态，指定时间一过，线程进入可执行状态。<br>sleep()方法导致了程序暂停执行指定的时间，让出cpu给其他线程。在调用sleep()方法的过程中，线程不会释放对象锁。<br>millis单位为毫秒。<br>static void yield();<br>使处于运行状态的线程主动抛弃CPU控制权，进入可运行状态。<br>final void wait();<br>让线程处于阻塞状态，并让对象释放锁。当其他线程类对象调用notify() 方法是。 阻塞状态的线程从 wait() 代码处继续往下执行。 不会重新进入方法体。<br>final void notify();<br>唤醒阻塞状态的任意一个线程（只要是Thread的子类调用wait()方法都能用notify() 方法唤醒）。与wait()方法配套使用。<br>final void notifyAll(); 唤醒所有阻塞状态的线程。<br>static Thread Thread.currentThread(); 可以获取当前线程的引用。</p><p>wait()方法和notify()要执行这两个方法，前提线程必须获得其对象的锁，所以这两个方法必须在同步块（synchronized 块）代码里面调用。而且这两个方法定义在Object对象中。</p><p>线程优先级：Java线程优先级以整数1-10表示。最大优先级为10，最小优先级为1。默认优先级为5。<br>同过Thread 类 的getPriority(); 方法获得线程 的优先级。 setPriority(); 设置优先级。<br>jdbc编程<br>ddl数据定义语言<br>dml数据操纵语言<br>dql数据查询语言<br>executeUpdate(String) 执行ddl和dml语句，返回整数。ddl返回0，dml返回更新数据的行数。<br>executeQuery(String) 执行dql语句，返回结果集。<br>Statement接口：<br>对于dql返回查询的结果集。<br>对于dml返回受影响的函数。<br>对于ddl返回0</p><p>ResultSet接口：<br>若列的类型是varchar, char, text 都使用getString来获取列。<br>若列的类型是int, integer 使用getInt来获取列。</p><p>PreparedStatement接口：<br>查看预编译sql语句：<br>((JDBC4PreparedStatement)ps).asSql(); 返回的是sql语句，可以直接打印。<br>ps为PreparedStatement类的对象。<br>PreparedStatement是Statement的子类。<br>Mysql没有预编译池。而Oracle有预编译池。所以PreparedStatement和Statement在MySQL上性能几乎一样。而在Oracle上PreparedStatement类会比Statement类性能上更有优势。</p><p>调用MySQL存储过程:<br>con.prepareCall(“ { call 存储过程名(?) } ”);<br>con为连接对象。<br>?为传入参数。<br>返回值为CallableStatement类。</p><p>获得存储过程输出参数：<br>CallablesStatement cs = con.prepareCall(“ { call 存储过程名(?, ?) } ”);<br>cs.setXxx(1, 参数);<br>cs.registerOutParameter(2, Types.数据库类型);<br>cs.execute;<br>Xxx name = cs.getXxx(2);</p><p>连接对象close方法并不是释放对象内存，而是断开数据库连接。</p><p>常见连接池：dbcp连接池、c3p0连接池（07年已经没有维护了）<br>、druid连接池（阿里巴巴提供的连接池，性能好）。</p><p>配置连接池的读取文件：<br>后缀名必须是properties，内容以key=value的形式编写。<br>java代码：<br>Properties p = new Properties();<br>FileInputStream in = new FileInputStream(“文件路径”);<br>p.load(in);<br>String value = p.getProperty(“key”);<br>dbcp读取配置文件（注意key值不能乱写,一定要指定以下key值）：<br>driverClassName<br>url<br>username<br>password</p><p>Properties p = new Properties();<br>FileInputStream in = new FileInputStream(“文件路径”);<br>p.load(in);<br>DataSource ds = BasicDataSourceFactory.createDataSource(p);</p><p>dml代码抽取：<br>PreparedStatement中SetObject(index, 参数)，其中可以接收任意参数;<br>Java反射<br>Class.forName(xxx.xx.xx)返回的是一个Class 类。Class类对象表示的是一个 类 或 接口。<br>Class.forName(String className)这个方法传入一个类的权限定名称。然后再用这个Class类型的实例调用newInstance()方法会返回一个 传入类型 的对象。<br>每个Java类必须由某个类加载器装入到内存。Class.forName(xxx.xx.xx)的作用是要求JVM查找并加载指定的类，也就是说JVM会执行该类的静态代码段。</p><p>Java反射中调用getClass()方法返回的是这个类的类对象。Java中每一个类在被编译成为.class文件的时候，JVM（Java虚拟机）都将会自动对每一个类创建一个类对象，这个类对象包含了这个类的所有的信息（包括成员变量、方法、构造器）。今后我们在创建这个类的实例或者这个类的对象时都是以这个类的类对象为蓝图（或模板）来构建的。</p><p>如果该类没有构造方法，newInstance() 就会抛出异常。 例如 实现接口的匿名内部类。<br>Socket编程<br>任何语言中都有Socket编程，本质还是 bin + ip + 端口通讯的模式， 所以就算是 c 语言编写的服务器， java 编写的客户端 都可以互通。<br>Java.net包中包含 客户端 Socket 类 和 ServerSocket 类。</p><p>Socket类：<br>Socket(String host, int port); host是服务器IP地址，port是访问服务器的端口号。<br>getInputStream(); 获得输入流。<br>getOutputStream(); 获得输出流。<br>getInetAddress(); 获取客户端ip地址。<br>close() 断开接收端连接。</p><p>ServerSocket类：<br>ServerSocket (int port); 设置服务器端口号。<br>Socket accept();<br>等待接收端的连接请求，如果客户端不发送连接请求，将一直等待。返回Socket类的对象实例，通过Socket类可以获得客户端发送来的输出流。这样就可以解析客户端发送的数据。</p><p>InetAddress类：<br>static InetAddress getByName(String host); 通过域名， 获得InetAddress类。<br>static InetAddress getLocalHost() 获取本机IP地址。<br>String getHostName(); 获取InetAddress对象所含域名。<br>String getHostAddress(); 获取InetAddress对象所含的IP地址。</p><p>DatagramPacket类（用于UDP）：<br>DatagramPacket(byte data[], int length, InetAddress address, int port);<br>参数data用于存放数据包数据， length为数据包中数据的长度， address表示发送数据的目的地址。port表示发送数据的端口号。<br>DatagramPacket(byte data[], int offset ,int length, InetAddress address, int port);<br>offset表示从 offset 下标开始读取 length 长度数组。<br>DatagramPacket(byte data[], int length);<br>该构造函数用于新建一个数据包对象用于接收数据包。<br>synchronized InetAddress getAddress();<br>返回一个InetAddress类的实例，用于获取数据包中的信息。</p><p>DatagramSocket类：<br>DatagramSocket(); 该对象负责发送数据包。<br>DatagramSocket(int port);<br>port必须和数据包中的端口号相同。也就是服务器端口号。<br>void send(DatagramPacket p) ; 发送指定数据包。<br>synchronized void receive(DatagramPacket p);<br>服务器端接收数据，p为存储数据的数据包。<br>void close(); 断开连接。<br>数据包中的主要信息主要是通过byte[] 数组存储。<br>Servlet编程<br>servlet 是服务器 上的 一个程序， 负责处理 服务器接收的 http 请求。</p><p>response.setContentType(“text/html;charset=UTF-8”);<br>response.setContentType(MIME)方法设置发送到客户端的响应的内容类型，此时响应还没有提交。给出的内容类型可以包括字符编码说明，例如：text/html;charset=UTF-8<br>如果该方法在getWriter()方法被调用之前调用，那么响应的字符编码将仅从给出的内容类型中设置。该方法如果在getWriter()方法被调用之后或者在被提交之后调用，将不会设置响应的字符编码。</p><p>PrintWriter out = response.getWriter();<br>获取输出流 输出的对象是页面，getWriter的返回值是一个PrintWriter类型，所以用PrintWriter out对象来接受。</p><p>String str = “任意字符串”;<br>str = new String(str.getBytes(“gbk”),”utf-8”);</p><p>备注说明：<br>str.getBytes(“ISO8859-1”); 意思是以ISO8859-1的编码重新编码成二进制位。<br>new String(XXX,”UTF-8”); 意思是以UTF-8的解码生成字符串。</p><p>URl参数中?和&amp;的区别<br>?后面带的是get方式传递的值,如果有多个值,用&amp;号分割。</p><p>编码和解码的概念：<br>从文字到0、1的映射称为编码，反过来从0、1到文字叫解码。</p><p>request.getParameter(“xxx”)的参数的取值<br>1.Html中form表单中标签的name属性<br>2.Html中form表单提交时的action的参数<br>3.Html中url的内容</p><p>servlet标签中<br>servlet-name：servlet类名<br>servlet-class：servlet类所在路径</p><p>servlet-mapping标签中<br>servlet-name：servlet类名（同上）<br>url-pattern：访问此路径文件时候使用转到上面配置的servlet上</p><p>&quot;这个是转义字符，用来表示双引号【”】，因为在java中两个双引号之间的部分表示为字符串。</p><p>hasMoreElements()<br>测试此枚举是否包含更多的元素。<br>返回：当且仅当此枚举对象至少还包含一个可提供的元素时，才返回 true；否则返回 false。</p><p>nextElement( )<br>如果此枚举对象至少还有一个可提供的元素，则返回此枚举的下一个元素。</p><p>Servlet中request.getParameter和getParameterValues getParameterNames三者区别<br>1.request.getParameter:获取前台表单单个元素name对应的value值<br>2.request.getParameterValues:获取前台表单多个标签同名name对应的所有value值<br>3.request.getParameterNames:获取前台表单所有标签元素name的对应的所有value值</p><p>子类属性方法多，所以可以直接赋值给父类，而父类属性方法少，不能将子类的所有属性和方法覆盖。</p><p>response.setIntHeader(“Refresh”, 5); //设置刷新自动加载时间为 5 秒<br>ate date = calendar.getTime(); // 从一个 Calendar 对象中获取 Date 对象<br>SimpleDateFormat sdf=new SimpleDateFormat(“yyyy-MM-dd HH:mm:ss”);<br>或：<br>SimpleDateFormat sdf=new SimpleDateFormat();<br>sdf.applyPattern(“yyyy-MM-dd HH:mm:ss”); 设置日期输出的格式</p><p>sdf.format(Date date); 是将当前时间格式转换为指定格式</p><p>————————————————-bean的生命周期——————————————-<br>init-method属性配置初始化方法，初始化方法用于准备数据。<br>destroy-mothod属性用于配置销毁方法<br>容器close并且bean作用域为单例（singleton），销毁方法才会执行。<br>——————————————-Cookies—————————————————–<br>Cookie cookie = new Cookie(“admin”, “identification”); 创建cookies对象<br>cookie.setMaxAge(60/<em>秒</em>/ * 20); 设置生命周期<br>response.addCookie(cookie); 响应流添加cookies<br>Cookie[] cookies = response.getCookies(); 响应流获得所有cookies，并返回cookies数组<br>cookie.getName() 获得cookie的name值<br>cookie.getValue() 获得cookie的value值<br>cookie不设置生命周期，默认存储到浏览器的内存中，当浏览器关闭，cookie自动销毁。<br>cookie的携带路径：默认情况下会在访问创建cookie的web资源相同的路径都携带cookie信息。<br>cookie.setPath(“/CookiePro/cookieServlet”); 只有访问cookie.Servlet才携带cookie信息<br>cookie.setPath(“/CookiePro”); 访问指定的工程（项目）时，都会携带cookie信息。<br>cookie.setPath(“/”); 访问服务器部署的所有工程时都会携带cookie信息<br>————————————Session————————————————–<br>Session技术是将数据存取在服务器的技术，会为每个客户都创建一块内存空间存储客户的数据。Session需要借助于cookie存储客户的唯一性标识sessionid来找到自己的session域。</p><p>HttpSession session = request.getSession();<br>根据sessionid判断该客户是否在服务器已经存在session域，若存在获取专属于当前会话的session对象，若不存在，会创建一个新的session放回。</p><p>session.getAttribute(“name”, “value”); 向session域写数据。<br>session.getAttribute(“name”); 通过name值获取value。</p><p><session-config>web.xml配置过期时间。<br><session-timeout>30</session-timeout><br></session-config></p><p>session域是从第一次执行request.session时创建。session过期时间是从最后一次操作结束开始计算。相当于没有执行request.session。</p><p>session.invalate 手动销毁session。<br>浏览器关闭，session并没有销毁，销毁的是以cookie形式存储的sessionid，没有设置生命周期，默认存储在浏览器中。<br>设置sessionid的生命周期，就是模拟sessionid的cookie。<br>session.getId(); 获取sessionid。</p><p>—————————————————-请求的发送方式———————————<br>1.通过浏览器的地址栏<br>2.通过html当中的form表单<br>3.通过a标签的href属性<br>4.src属性<br>——————–GET请求和POST请求————————————-<br>get请求：<br>大小限制：请求字符串中最多只能有1024个字节<br>编码类型为application/x-www-form-urlencoded。<br>只允许ascii字符类型，不能用二进制流。<br>查询字符串会显示在地址栏的url中，不安全。<br>get请求主要用于获取数据。</p><p>post请求：<br>编码类型没有限制。<br>参数类型没有限制，可以是字符串可以是二进制流。<br>post传输数据量大，可以达到2m。<br>post为了将数据传送到服务器。</p><p>get请求会发送一个数据包，post发送两个数据包。<br>post方式参数存放在请求数据包的消息体中。 get方式参数存放在请求数据包的请求行的URI字段中,以?开始以param=value&amp;me2=value2的形式附加在URI字段之后。而request.setCharacterEncoding(charset);只对消息体中的数据起作用,对于URI字段中的参数不起作用。get用new String(target.trim().getBytes(“ISO-8859-1”), charset);。</p><p>当文件比较大的时候可以考虑分段上传方式。<br>———————————–HTTP协议版本—————————————————<br>http1.0，发送请求，创建一次连接，获得一个web资源，断开连接。<br>http1.1，发送请求，创建一次连接，获得多个web资源，保持连接。<br>———————————优化tomcat启动速度————————————-<br><absolute-ordering>一个jar包都不扫描，servlet3.0才能添加这个标签<br>—————————servlet生命周期————————————————<br>当客户端向服务器发送请求，服务器读取xml文件，找到设置的url再找到权限名，通过java放射创建对象。<br>一般当服务器关闭的时候调用destroy方法<br><load-on-startup>2</load-on-startup>服务器启动调用init方法，其中数据是优先级。<br>Servlet容器默认是采用单实例多线程的方式处理多个请求的，所以只会调用初始化方法一次。<br>—————————–init方法中ServletConfig config 参数方法———————-<br>config.getServletName(); 获得servlet名称，返回字符串。<br>获取初始化参数，xml文件配置。<br><servlet><br><init-param><br><param-name>key</param-name><br><param-value>value</param-value><br></init-param><br></servlet><br>config.getInitParameter(“key”); 返回字符串，值为value。<br>获取ServletContext对象<br>ServletContext sc = config.getServletContext();<br>———————–xml中url-patten匹配形式—————————–<br>完全匹配、目录匹配、扩展名匹配<br>———————使用注解创建servlet———————-<br>@WebServlet(“/myServlet”);<br>相当于在xml文件中配置url<br>xml文件中 metadata-complete=”true” 不扫描注解改成false扫描注解<br>———————————————service方法———–<br>当servlet重写了service方法，无论发送什么请求，都会调用service方法不会调用doget或dopost方法。<br>原因：如果servlet当中没有存在service方法，就会到它的父类当中去找，在父类当中找到service是参数为ServletRequest，会在内部把参数转为httpServlet，转换完毕后会在继续调用参数为httpServletRequest的service方法，在此方法当中会获取参数的类型，根据不同的参数类型再去调用不同的方法。<br>——————————-ServletContext对象——————————-<br>服务器会为每一个工程创建一个对象，这个对象就是ServletContext对象。这个对象全局唯一，而且工程内部的所有servlet都共享这个对象。所以叫全局应用程序共享对象。<br>获取上下文：</absolute-ordering></p><p>通过init方法当中一个参数ServletConfig来获取<br>ServletConfig config<br>ServletContext sc = config.getServletContext();</p><p>调用本类的getServletContext()获得对象，本质还是通过init方法参数中的ServletConfig config对象当中的getServletContext()来获得对象。<br>如：this.getServletContext();<br>————————-ServletContext对象的使用方法——————————-<br>context.getRealPath(“a.txt”); 返回字符串，其路径为绝对路径，如项目名为biyeshiji。方法的返回值为 盘符:.…………………\biyeshiji\a.txt</p><p>1.getRealPath(“/“)方法返回的是项目在服务器的绝对路径，而getRealPath(“WEB-INF/myfile”)返回的是包含一个给定虚拟路径的绝对路径,其中/myfile是虚拟的。<br>2.getContextPath()方法返回的是项目相对路径，并不会返回其绝对的路径，就是说并不知道项目在哪个位置。</p><p>context.setAttribute(String name, Object value); 向ServletContext对象设置值<br>context.getAttribute(String name) 获取指定name的值<br>context.removeAttribute(String name) 删除指定name的值</p><p>域对象：能够存储数据的对象。<br>域对象：ServletContext、Session……………</p><p>———————————-读取文件—————————————————–<br>输入流就是把文件加载到程序里。让程序操作数据。<br>FileInputStream in = new FileInputStream(“文件绝对路径”); 加载本地文件<br>in.read() 读取一个字符，返回值为读取多少个字符，当文件读取完毕时返回一个-1<br>in.read(byte类型数组名); 把文件里的内容读取到数组中</p><p>in.close 关闭输入流<br>byte，即字节，由8位的二进制组成。<br>ASCII码：一个英文字母（不分大小写）占一个字节的空间，一个中文汉字占两个字节的空间。<br>UTF-8编码：一个英文字符等于一个字节，一个中文（含繁体）等于三个字节。中文标点占三个字节，英文标点占一个字节<br>Unicode编码：一个英文等于两个字节，一个中文（含繁体）等于两个字节。中文标点占两个字节，英文标点占两个字节<br>————————文件下载注意点—————————-<br>从服务器下载的图片、视频、声音文件。浏览器会自动解析，不会以附件的形式保存<br>————————–multipart/form-date格式————————-<br>type为text form-date; name=””</p><p>type为file form-data; name=””, filename=””<br>Content-Type:<br>————————–application/x-www-form-urlencoded—————————<br>只有普通key-value形式</p><p>Form-item 表单项<br>——————————文件上传———————————<br>以输入流的形式获取multipart请求的请求体内容<br>ServletInputStream is = request.getInputStream();</p><p>new String(buy, 0, len);<br>把一个字节数组buy从0取到len，取出来之后转换成String类型。</p><p>如果向浏览器发送二进制数，浏览器会自动解析它。</p><p>ServletFileUpload.isMultipartContent(request) 判断请求是否为multipart/form-date格式。<br>DiskFileItemFactory factory = new DiskFileItemFactory(); 创建一个fileitem工厂。<br>ServletFileUpload upload = new ServletFileUpload(factory); 创建文件上传核心组件。<br>upload.serHeaderEncoding(“UTF-8”); 设置每一个item的头部字符编码，其可以解决文件名的中文乱问题。<br>List<fileitem>items = upload.parseRequest(request); 解析请求，获取到所有的items<br>item.isFormField 判断item是否为普通表单项，是返回true。<br>item.getFieldName(); 获取到表单项名称。<br>item.getString(); 获取到表单项的值。<br>item.getString(“UTF-8”); 以utf-8的形式获取值<br>item.getName 获取上传文件原始名称。<br>InputStream is = item.getInputStream(); 获取到输入流<br>OutputStream os = new FileOutputStream(File); 获取输出流<br>os.write(buf, 0, len);<br>os.close;<br>is.close 关闭流</fileitem></p><p>—————————–文件上传注意点——————-<br>文件上传到服务器，必须分割成很多数据包，到达服务器肯定是无序的。所以有临时文件的概念，来接收数据包。<br>factory.setSizeThreshold(1024 * 1024 * 1)； 设置使用临时文件的边界值，大于该值，上传文件会先保存在临时文件中，否则，上传文件将直接写入到内存中<br>factory.setRepository(“路径字符串File类”) 设置临时文件夹<br>item.delete 删除临时文件<br>System.currentTimeMillis() System.currentTimeMillis()在java中是最常用的获取系统时间的方法，它返回的是1970年1月1日0点到现在经过的毫秒数。<br>upload.setFileSizeMax() 设置单个上传文件的最大边界值，单位为字节byte。<br>upload.setSizeMax(); 设置一次上传多个文件的最大边界值，单位为字节byte。<br>————————————–文件夹上限——————————————-<br>比如fat16下就只有最多512个文件或者目录；fat32格式下，一个特定文件夹中最多可以保存的子文件夹和文件的数量是65,534（但如果使用了长文件名，那么该数字会减小）；ntfs格式下，包含的文件个数的最大值是4,294,967,295个 (2^32 - 1)。<br>——————————–创建目录————————————–<br>java.io.File.mkdir()： 只能创建一级目录，且父目录必须存在，否则无法成功创建一个目录。<br>java.io.File.mkdirs()： 可以创建多级目录，父目录不一定存在。<br>file类中exists方法 检查文件或目录是否存在<br>File.separator 与系统有关的默认名称分隔符。此字段被初始化为包含系统属性 file.separator 的值的第一个字符。在 UNIX 系统上，此字段的值为 ‘/‘；在 Microsoft Windows 系统上，它为 ‘&#39;。</p><p>———————————-后台跳转连接——————————————————<br>它们的区别是什么？<br>request.getRequestDispatcher(“路径字符串”).forward(request, response);<br>response.sendRedirect(“路径字符串”);<br>———————–随机数——————–<br>random()方法，是返回一个[0,1)的浮点数。<br>—————————-web访问流程—————————–<br>找到主机-&gt;找到对应端口-&gt;engine引擎找到对应域名-&gt;通过全局xml文件找到对应项目-&gt;创建request和response对象-&gt;通过项目xml文件找到对应servlet，再把两个对象转到servlet。<br>request对象接收浏览器发送的数据<br>response写的内容会缓存到response缓冲区里面，tomcat除了读取response缓冲区中的内容，还会自动在tomcat生成的response对象中添加响应行、响应头。<br>—————————————设置response参数—————————————<br>response.setState(int code); 设置状态码<br>添加响应头信息：<br>response.addHeader(String, String);<br>response.addIntHeader(String, int);<br>response.addDateHeader(String, Date);<br>修改响应头：<br>response.setHeader(String, String);<br>response.setIntHeader(String, int);<br>response.setDateHeader(String, Date);</p><p>设置重定向：<br>response.setState(302);<br>response.setHeader(“location”, “/项目名称/servlet”);<br>重定向访问两次服务器，浏览器地址栏也会发生变化。<br>response.sendRedirect(“重定向地址”); 相当于上面两句话的意思。<br>response.setHeader(“refresh”,”3;url=<a href="http://www.baidu.com”" target="_blank" rel="noopener">http://www.baidu.com”</a>); 定时刷新重定向，每隔3秒钟去转发。</p><p>把写的内容存到response缓冲区中，默认使用的是iso8859的编码。<br>response.setCharacterEncoding(“UTF-8”); 设置缓冲区编码。<br>response.setHeader(“Content-Type”, “text/html;charset=UTF-8”);</p><p>简写： response.setContentType(“text/html;charset=UTF-8”);</p><p>——————————–request对象——————————-<br>request.getMethod(); 对去请求行，获取请求方式，放回字符串。<br>request.getRequestURL(); 获取浏览器url，放回StringBuffer。<br>request.getRequestURI(); 获取浏览器uri，放回String。<br>uri指的是URL中从项目名称到参数的内容。<br>获取url中get方式的请求参数：<br>request.getQueryString(); 返回String<br>获取URL中项目名称：<br>request.getContextPath(); 返回String类型。</p><p>获取请求头所有的名称 request.getHeaderNames(); 返回枚举类型。<br>根据名称获取指定的头信息：<br>request.getHeader(“referer”); 例如请求头中referer的值。<br>referer的含义：告诉服务器请求是哪个页面发送的，如果请求不是从页面发送的，不会referer属性。</p><p>请求体就是页面发送的参数。<br>request.getParameter(“name”); 获取请求体参数。<br>request.getParameterValues(“name”); 如果是复选框，获取多个值。<br>request.getParameterNames(); 获取所有参数名称，返回枚举类型。<br>request.getParameterMap(); 获取所有请求参数，返回map。</p><p>request.setCharacterEncoding(“UTF-8”); 设置post的编码，本方法对get方式无效。</p><p>BeanUtiles 第三方的jar包，把获取的请求参数封装成对象。</p><p>请求转发只需要发送一次请求，直接找servlet1，在servlet1当中直接转发给servlet2，浏览器中的地址栏不会发生改变。<br>RequestDispatcher disp = request.getRequestDispatcher(“转发url”); 获取转发器。<br>disp.forward(request, response); 将用户的请求，连同请求信息等内容，一起转发到服务器的另外一个servlet去处理，它不会丢失request信息。</p><p>request域对象 setAttribute(“key”, “value”); 存储值<br>getAttribute(“key”) 获取值<br>request域在一次请求当中数据是共享的，即转发，request对象发送一个请求是创建，请求结束时销毁。<br>Servlet的生命周期：当接收到第一次请求被创建直到服务器关闭，单例多线程。<br>转发中，涉及到多个servlet中的request对象，并不是同一个对象。转发就是把上一个request对象的信息交个要转发servlet的request对象。并不是同一个对象。<br>客户端地址：客户端访问服务器使用的地址，服务器外部地址，在写的时候要写上/项目名称/servlet的url<br>服务器端地址：在服务器内部当中使用的地址，不需要写项目名称，只写servlet的url就能访问。<br>mvc m是Javabean v是视图层 c是控制器<br>三层 web层 service层（对数据进行加工） dao层（从数据库取数据，封装成javabean交个service层）</p><p>——————————————————Spring———————————————————-<br>xml配置文件：<br><bean>id属性：唯一标识<br>class属性：类的路径<br><property>用于进行属性注入<br>name：bean的属性名，通过setter方法获得<br>一个方法名为setBookDao<br>BookDaobookDao<br>属性名为：bookDao<br>ref：另一个bean的id值的引用<br>依赖注入把对象的创造交给外部去管理,很好的解决了代码紧耦合的问题，是一种让代码实现松耦合的机制。<br>//创建spring容器<br>ApplicationContext applicationContext=new ClassPathXmlApplicationContext(xmlPath);<br>//生产实例<br>BookService bookService = (BookService)applicationContext.getBean(“bookServiceId”);<br>BeanFactory用于生产bean，采取延迟策略，第一次getBean时才会初始化。<br>ApplicationContext当配置文件被加载，就进行对象实例化。</property></bean></p><p>ClassPathXmlApplicationContext用于加载classpath（类路径、src）下的xml<br>FileSystemXmlApplicationContext用于加载指定盘符下的xml<br>/WEB-INF/…xml</p><p>类名.class, class.forName(), getClass() 获得字节码文件</p><p>静态工厂：<br>factory-method属性确定静态方法名。（这个静态方法返回对象）<br>考虑怎么生产bean，不要考虑其它的实现方法。<br>实例工厂：<br>factory-bean属性指定工厂实例，获得实例对象<br>factory-method属性指创建实例的方法</p><p>bean的作用域：用于确定spring创建bean的实例个数，默认singleton<br>singleton 在Spring loc容器中仅存在一个bean实例<br>prototype每次从容器中调用bean时，都返回一个新的实例。<br>scope属性用于设置bean的作用域。</p><p>设计模式<br>单例设计模式<br>必须要类中创建一个对象出来<br>1.私有化自己的构造方法（使用private关键字），不让创建出新的对象。<br>2.给外界创建一个方法，能够获得这个已经创建好的对象。<br>单例设计模式一般在编写工具类的时候使用。</p><!-- rebuild by neat -->]]></content>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js</title>
    <url>/posts/5063/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><h1 id="Node-js介绍"><a href="#Node-js介绍" class="headerlink" title="Node.js介绍"></a>Node.js介绍</h1><p>V8引擎是Goole开发的一个用于Chrome浏览器的底层JavaScript引擎，用于解析JavaScript语句创建其运行环境。该引擎可以嵌入任何应用程序中运行。Nodejs使用V8引擎来解析语句，并将其重建可在服务器上使用。</p><a id="more"></a><h1 id="Node-js命令"><a href="#Node-js命令" class="headerlink" title="Node.js命令"></a>Node.js命令</h1><table><thead><tr><th align="left">作用</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left"><code>node --version</code></td><td align="left">检测node.js版本</td></tr><tr><td align="left"><code>node js文件路径</code></td><td align="left">node终端执行js文件</td></tr><tr><td align="left"><code>node</code></td><td align="left">进入命令交互模式</td></tr></tbody></table><ul><li><p>命令交互模式</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ node</span><br><span class="line">&gt; console.log(&apos;Hello World!&apos;);</span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><ul><li>变量声明需要使用 var 关键字，没有使用 var 关键字变量会直接打印出来。</li><li>通过console.log() 来输出信息。</li><li>通过下划线获取上一个表达式的运算结果。</li><li>通过Ctrl+D组合键退出node终端。</li></ul></li></ul><h1 id="Node-js使用"><a href="#Node-js使用" class="headerlink" title="Node.js使用"></a>Node.js使用</h1><ul><li><code>require(&quot;模块名称&quot;)</code><ul><li>载入指定模块</li></ul></li></ul><h2 id="http模块"><a href="#http模块" class="headerlink" title="http模块"></a>http模块</h2><ul><li><code>createServer()</code><ul><li>创建服务器。</li><li>返回http.Server。</li><li><a href="https://github.com/zero3737/project/blob/master/server.js" target="_blank" rel="noopener">createServer示例</a></li></ul></li></ul><h1 id="NPM介绍"><a href="#NPM介绍" class="headerlink" title="NPM介绍"></a>NPM介绍</h1><p>NPM随同NodeJS一起安装的module管理工具。</p><h2 id="NPM命令"><a href="#NPM命令" class="headerlink" title="NPM命令"></a>NPM命令</h2><table><thead><tr><th align="left">命令</th><th align="left">作用</th><th align="left">补充</th></tr></thead><tbody><tr><td align="left"><code>npm –v</code></td><td align="left">检测npm的版本号。</td><td align="left"></td></tr><tr><td align="left"><code>npm install npm –g</code></td><td align="left"><strong>全局安装</strong>npm。</td><td align="left"></td></tr><tr><td align="left"><code>npm install &lt;Module Name&gt;</code></td><td align="left">局部安装模块。</td><td align="left">安装好后，模块就放在工程目录下的 node_modules 目录中（没有该目录自动创建），因此在代码中加载模块（require方法）无需指定第三方包路径。<wbr><strong>注意：只会安装dependencies依赖模块。</strong></td></tr><tr><td align="left"><code>npm install packagename --dev</code></td><td align="left">局部安装模块。</td><td align="left">安装两种依赖（dependencies 和 devDependencies）。</td></tr><tr><td align="left"><code>npm install &lt;Module Name&gt; -g</code></td><td align="left">全局安装模块。</td><td align="left">可以直接在命令行里使用。</td></tr><tr><td align="left"><code>npm install</code></td><td align="left">读取当前目录下的package.json依赖配置文件并下载package.json记录的依赖模块。</td><td align="left">默认会安装两种依赖（dependencies 和 devDependencies）。</td></tr><tr><td align="left"><code>npm install --production</code></td><td align="left">读取当前目录下的package.json依赖配置文件并下载package.json记录的依赖模块。</td><td align="left">安装dependencies依赖模块。</td></tr><tr><td align="left"><code>npm install --save</code></td><td align="left">会把依赖包名称添加到 package.json 文件 中的 dependencies 属性。</td><td align="left"></td></tr><tr><td align="left"><code>npm install --save-dev</code></td><td align="left">会把依赖包名称添加到 package.json 文件 中的 devDependencies 属性。</td><td align="left"></td></tr><tr><td align="left"><code>npm list –g</code></td><td align="left">查看所有全局安装的模块。</td><td align="left"></td></tr><tr><td align="left"><code>npm list &lt;Module Name&gt;</code></td><td align="left">查看指定模块。</td><td align="left">每个模块包都包含Package.json文件。该文件记录该包的信息。</td></tr><tr><td align="left"><code>npm list -g --depth 0</code></td><td align="left">查看用户已经安装的模块。</td><td align="left"></td></tr><tr><td align="left"><code>npm config ls</code></td><td align="left">查看NPM配置参数。</td><td align="left"></td></tr><tr><td align="left"><code>npm uninstall -g 模块名称</code></td><td align="left">卸载全局模块。</td><td align="left"></td></tr><tr><td align="left"><code>npm update -g 模块名称</code></td><td align="left">更新模块。</td><td align="left"></td></tr><tr><td align="left"><code>npm run 脚本名称</code></td><td align="left">读取package.json文件并执行相应文本。</td><td align="left"></td></tr></tbody></table><h2 id="Package-json-属性说明"><a href="#Package-json-属性说明" class="headerlink" title="Package.json 属性说明"></a>Package.json 属性说明</h2><table><thead><tr><th align="left">属性名称</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">name</td><td align="left">包名。</td></tr><tr><td align="left">version</td><td align="left">包的版本号。</td></tr><tr><td align="left">description</td><td align="left">包的描述。</td></tr><tr><td align="left">homepage</td><td align="left">包的官网 url 。</td></tr><tr><td align="left">author</td><td align="left">包的作者姓名。</td></tr><tr><td align="left">contributors</td><td align="left">包的其他贡献者姓名。</td></tr><tr><td align="left">dependencies</td><td align="left">依赖包列表。如果依赖包没有安装，npm 会自动将依赖包安装在 node_module 目录下。</td></tr><tr><td align="left">repository</td><td align="left">包代码存放的地方的类型，可以是 git 或 svn，git 可在 Github 上。</td></tr><tr><td align="left">main</td><td align="left">main 字段指定了程序的主入口文件，require(‘moduleName’) 就会加载这个文件。这个字段的默认值是模块根目录下面的 index.js。</td></tr><tr><td align="left">keywords</td><td align="left">关键字。</td></tr></tbody></table><ul><li>dependencies和devDependencies的区别？<ul><li>devDependencies：开发环境所使用的依赖模块。</li><li>dependencies：生产环境使用的依赖模块（核心模块）。</li></ul></li></ul><h2 id="NPM使用"><a href="#NPM使用" class="headerlink" title="NPM使用"></a>NPM使用</h2><ul><li><p>如何查看NPM全局安装模块的路径？</p><ol><li><p>cmd输入命令<code>npm config ls</code>。</p></li><li><p>prefix对应路径就是用户全局安装模块的路径。</p><img src="1.png" width="40%"></li></ol></li><li><p>通过<code>npm run</code>命令执行对应脚本。</p><ol><li><p>package.json配置文件内容如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    &quot;script&quot;:&#123;</span><br><span class="line"></span><br><span class="line">        &quot;dev&quot;: &quot;webpack -w&quot;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过 <code>npm run dev</code> 命令执行dev对应脚本 <code>webpack -w</code>命令 。</p></li></ol></li></ul><h1 id="NPM模块"><a href="#NPM模块" class="headerlink" title="NPM模块"></a>NPM模块</h1><h2 id="cnpm"><a href="#cnpm" class="headerlink" title="cnpm"></a>cnpm</h2><ul><li><p>安装cnpm</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li><li><p>使用 cnpm 命令来安装模块。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install [name]</span><br></pre></td></tr></table></figure></li><li><p>淘宝 NPM 镜像是一个完整 <code>npmjs.org</code> 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。</p></li></ul><h2 id="live-server"><a href="#live-server" class="headerlink" title="live-server"></a>live-server</h2><ul><li><p>安装live-server模块。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g live-server</span><br></pre></td></tr></table></figure></li><li><p>特点</p><ul><li>支持修改文件浏览器自动刷新功能。</li><li>自动打开浏览器。</li></ul></li><li><p>使用方法</p><ul><li>在项目根目录使用命令<code>live-server</code>启动服务器。</li></ul></li></ul><h2 id="hexo-cli"><a href="#hexo-cli" class="headerlink" title="hexo-cli"></a>hexo-cli</h2><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo官网</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="命令使用"><a href="#命令使用" class="headerlink" title="命令使用"></a>命令使用</h3><table><thead><tr><th align="left">命令</th><th align="left">作用</th><th align="left">补充</th></tr></thead><tbody><tr><td align="left"><code>hexo version</code></td><td align="left">显示 Hexo 版本。</td><td align="left"></td></tr><tr><td align="left"><code>hexo init [folder]</code></td><td align="left">新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。</td><td align="left"></td></tr><tr><td align="left"><code>hexo generate</code></td><td align="left">生成静态文件（网页资源）。</td><td align="left"><code>hexo g</code>为<code>hexo generate</code>简写。</td></tr><tr><td align="left"><code>hexo server</code></td><td align="left">启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</td><td align="left"></td></tr><tr><td align="left"><code>hexo deploy</code></td><td align="left">部署网站。</td><td align="left">可简写为<code>hexo d</code>。</td></tr><tr><td align="left"><code>hexo d -g</code></td><td align="left">生成并上传。</td><td align="left"></td></tr><tr><td align="left"><code>hexo clean</code></td><td align="left">清除缓存文件 (db.json) 和已生成的静态文件 (public)。</td><td align="left"></td></tr><tr><td align="left"><code>hexo new 文件名</code></td><td align="left">在_posts下生成相关md文件。</td><td align="left"><code>hexo new [layout] &lt;title&gt;</code>中的[layout]默认是post。</td></tr><tr><td align="left"><code>hexo new page &quot;title&quot;</code></td><td align="left">系统会自动给你在source文件夹下创建一个title文件夹，以及title文件夹中的<code>index.md</code>。</td><td align="left">最终部署时生成：<code>hexo\public\title\index.html</code>，但是它不会作为文章出现在博文目录。访问的title对应的链接就是<code>http://xxx.xxx/title</code>。</td></tr><tr><td align="left"><code>hexo new draft newpage</code></td><td align="left">在source/_draft中新建一个newpage.md文件。</td><td align="left">草稿不可见(未编译)。</td></tr><tr><td align="left"><code>hexo server --draft</code></td><td align="left">预览草稿。</td><td align="left"></td></tr><tr><td align="left"><code>hexo publish draft newpage</code></td><td align="left">把newpage.md发送到post中。</td><td align="left">草稿可见(编译)。</td></tr><tr><td align="left"><code>hexo clean &amp;&amp; hexo d -g</code></td><td align="left">清除静态文件并部署上传。</td><td align="left"></td></tr></tbody></table><h3 id="文件夹-文件说明"><a href="#文件夹-文件说明" class="headerlink" title="文件夹 | 文件说明"></a>文件夹 | 文件说明</h3><ul><li>node_modules: 依赖包。</li><li>public：存放生成的页面。</li><li>scaffolds：生成文章的一些模板。</li><li>source：用来存放你的文章。</li><li>themes：主题。</li><li>_config.yml: 全局配置文件。</li></ul><h3 id="config-yml文件配置说明。"><a href="#config-yml文件配置说明。" class="headerlink" title="_config.yml文件配置说明。"></a>_config.yml文件配置说明。</h3><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">补充</th></tr></thead><tbody><tr><td align="left">title</td><td align="left">网站标题。</td><td align="left"></td></tr><tr><td align="left">subtitle</td><td align="left">网站副标题。</td><td align="left"></td></tr><tr><td align="left">description</td><td align="left">网站描述。</td><td align="left">description主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。</td></tr><tr><td align="left">author</td><td align="left">您的名字。</td><td align="left"></td></tr><tr><td align="left">language</td><td align="left">网站使用的语言。</td><td align="left">zh-cn为简体中文。</td></tr><tr><td align="left">timezone</td><td align="left">网站时区。Hexo 默认使用您电脑的时区。</td><td align="left"></td></tr><tr><td align="left">url</td><td align="left">网址。</td><td align="left"></td></tr><tr><td align="left">root</td><td align="left">网站根目录。</td><td align="left"></td></tr><tr><td align="left">permalink</td><td align="left">文章的永久链接格式。</td><td align="left">比如新建一篇文章叫temp.md，那么这个时候他自动生成的地址就是<code>http://yoursite.com/2018/09/05/temp</code>。</td></tr><tr><td align="left">permalink_defaults</td><td align="left">永久链接中各部分的默认值。</td><td align="left"></td></tr></tbody></table><h3 id="hexo-deployer-git插件"><a href="#hexo-deployer-git插件" class="headerlink" title="hexo-deployer-git插件"></a>hexo-deployer-git插件</h3><ul><li><p>安装</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p><code>.deploy_git</code>文件夹说明</p><ul><li>hexo-deployer-git插件生成的<code>.deploy_git</code>文件夹内容由public文件夹而来。</li><li>之后<code>.deploy_git</code>通过<code>hexo d</code>命令就会把内容推送到github。</li></ul></li></ul><h3 id="利用hexo-github搭建博客"><a href="#利用hexo-github搭建博客" class="headerlink" title="利用hexo+github搭建博客"></a>利用hexo+github搭建博客</h3><ol start="0"><li><p>必须先配置 git 和 nodejs 环境。</p></li><li><p>原理是通过github pages服务和将md文件编译成html文件上传到github。</p></li><li><p>新建<code>github用户名.github.io</code>的仓库。</p><ul><li>这样你的域名后面就不会跟着仓库名。</li><li>Hexo编译的页面请求css和js资源路径都是<code>github用户名.github.io</code>格式，如果后面跟着你的仓库名，会造成资源请求404。</li></ul></li><li><p>初始化和生成静态文件。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init</span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure></li><li><p>npm安装hexo-deployer-git插件。</p></li><li><p>配置_config.yml文件。</p><p><img src="2.png" alt></p><blockquote><p>其中repository对应的值为git仓库的路径。</p></blockquote></li><li><p>配置完成，输入<code>hexo d</code>命令。</p><ul><li>该命令会将生成的.deploy_git文件夹中的文件上传到仓库，所以仓库以前的文件将会被覆盖。</li></ul></li><li><p>输入<code>github用户名.github.io</code>即可访问你的博客。</p></li></ol><h3 id="hexo图片显示问题"><a href="#hexo图片显示问题" class="headerlink" title="hexo图片显示问题"></a>hexo图片显示问题</h3><ol><li><p>找到 <code>_config.yml</code> 配置文件中的 <code>post_asset_folder</code> 参数，将其值改为true。</p><ul><li>当资源文件管理功能打开后，Hexo将会在你每一次通过 <code>hexo new [layout] &lt;title&gt;</code> 命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个 markdown 文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们。</li><li>当你打开文章资源文件夹功能后，你把一个 <code>example.jpg</code> 图片放在了你的资源文件夹中，如果通过使用相对路径的常规 markdown 语法 <code>![](/example.jpg)</code> ，它将不会出现在首页上（但是它会在文章中按你期待的方式工作）。</li><li>hexo 相对路径写法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% asset_path slug %&#125;</span><br><span class="line">&#123;% asset_img slug [title] %&#125;</span><br><span class="line">&#123;% asset_link slug [title] %&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>安装插件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br><span class="line">// 或</span><br><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure></li><li><p>将图片放到 markdown 同名文件夹（要跟md文件同一级），引用图片的URL为 <code>xxxx/图片名.jpg</code>。</p><ul><li>注意：不要用<code>./xxxx/图片名.jpg</code>这种格式写URL。程序会把路径中的<code>./</code>当成字符串编译，所以会乱码，造成资源请求失败。</li></ul></li></ol><h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p>在 themes 文件夹内，新增一个任意名称的文件夹，并修改 _config.yml 内的 theme 设定（theme的值为themes路径下的文件夹名字），即可切换主题。</p><h3 id="NexT-主题设置简体中文无效"><a href="#NexT-主题设置简体中文无效" class="headerlink" title="NexT 主题设置简体中文无效"></a>NexT 主题设置简体中文无效</h3><p>theme/next/languages/ 目录下的 zh-CN.yml 重命名为 zh-Hans.yml 即可。</p><p>更多 NexT 主题自定义配置参考<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT 官网</a></p><h3 id="让博文首页文章不显示全部内容"><a href="#让博文首页文章不显示全部内容" class="headerlink" title="让博文首页文章不显示全部内容"></a>让博文首页文章不显示全部内容</h3><p>在合适的位置加上<code>&lt;!--more--&gt;</code>即可。</p><h3 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h3><p>Front-matter 是md文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">layout</td><td align="left">布局</td></tr><tr><td align="left">title</td><td align="left">标题</td></tr><tr><td align="left">date</td><td align="left">建立日期</td></tr><tr><td align="left">updated</td><td align="left">更新日期</td></tr><tr><td align="left">comments</td><td align="left">开启文章的评论功能</td></tr><tr><td align="left">tags</td><td align="left">标签（不适用于分页）</td></tr><tr><td align="left">categories</td><td align="left">分类（不适用于分页）</td></tr><tr><td align="left">permalink</td><td align="left">覆盖文章网址</td></tr></tbody></table><p>其中，分类和标签需要区别一下，分类具有顺序性和层次性，也就是说 Foo, Bar 不等于 Bar, Foo；而标签没有顺序和层次。</p><h3 id="多台电脑工作机制"><a href="#多台电脑工作机制" class="headerlink" title="多台电脑工作机制"></a>多台电脑工作机制</h3><ol><li><code>hexo d</code>上传部署到github的其实是hexo编译后的文件，是用来生成网页的，不包含源文件，也就是上传的是在本地目录里自动生成的<code>.deploy_git</code>里面。</li><li>其他文件 ，包括我们写在source 里面的，和配置文件，主题文件，都没有上传到github。</li><li>所以可以利用git的分支管理，将源文件上传到github的另一个分支即可。</li></ol><h3 id="跳过渲染指定文件"><a href="#跳过渲染指定文件" class="headerlink" title="跳过渲染指定文件"></a>跳过渲染指定文件</h3><ol><li>找到 _config.yml 配置文件 skip_render 参数。</li><li>skip_render 一般有以下四种常用参数：<ol><li>跳过source目录下的 test.html: <code>skip_render: test.html</code>。</li><li>跳过source目录下 test 文件夹内所有文件：<code>skip_render: test/*</code>。</li><li>跳过source目录下 test 文件夹内所有文件包括子文件夹以及子文件夹内的文件：<code>skip_render: test/**</code>。</li><li>跳过多个路径：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">skip_render:</span><br><span class="line">    - test.html</span><br><span class="line">    - test/*</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="hexo同时部署多个仓库"><a href="#hexo同时部署多个仓库" class="headerlink" title="hexo同时部署多个仓库"></a>hexo同时部署多个仓库</h3><p>修改 _config.yml 文件 repo 参数：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    message: [message]</span><br><span class="line">    repo:</span><br><span class="line">        github: &lt;repository url&gt;,[branch]</span><br><span class="line">        coding: &lt;repository url&gt;,[branch]</span><br></pre></td></tr></table></figure><h3 id="自定义样式"><a href="#自定义样式" class="headerlink" title="自定义样式"></a>自定义样式</h3><p>找到 `./themes/next/source/css/_custom 路径下的 custom.styl 文件，自行添加CSS样式即可。</p><ul><li>next 为 next 主题对应文件夹。</li></ul><h3 id="hexo-重新部署时-github-自定义域名丢失问题"><a href="#hexo-重新部署时-github-自定义域名丢失问题" class="headerlink" title="hexo 重新部署时 github 自定义域名丢失问题"></a>hexo 重新部署时 github 自定义域名丢失问题</h3><p>CNAME 文件放在根目录下的 source 目录下。这样 hexo 部署的时候同时把 CNAME 文件也上传上去，不会覆盖掉。</p><h3 id="让-hexo-博客被百度收录"><a href="#让-hexo-博客被百度收录" class="headerlink" title="让 hexo 博客被百度收录"></a>让 hexo 博客被百度收录</h3><ol start="0"><li><p><a href="https://ziyuan.baidu.com/" target="_blank" rel="noopener">百度搜索资源平台</a></p></li><li><p>添加站点地图。</p><ul><li><p>安装 hexo-generator-sitemap 和 hexo-generator-baidu-sitemap 插件。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line"></span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><ol><li><p>安装这两个插件每次部署到远程仓库（hexo d -g）的时候，都会自动生成站点地图（baidusitemap.xml 和 sitemap.xml）。</p></li><li><p>将生成的文件提交到<a href="https://ziyuan.baidu.com/" target="_blank" rel="noopener">百度搜索资源平台</a>。</p><img src="3.png" width="50%"><p>数据引入 -&gt; 链接提交 -&gt; sitemap</p></li></ol></li></ul></li><li><p>自动推送</p><ol start="0"><li><p>next 主题自带百度推送功能，需要我们去手动开启。</p></li><li><p>编辑主题目录下的 <code>_config.yml</code> 配置文件，将 baidu_push 参数的值修改为 true（这样 baidu-push.swig 的 JS 代码就会添加到每个页面上）。</p></li><li><p>数据引入 -&gt; 链接提交 -&gt; 自动推送</p></li><li><p>将下图的 JS 代码添加到 baidu-push.swig 文件中（在主题目录下搜索即可找到该文件路径）。</p><img src="4.png" width="50%"></li><li><p>baidu-push.swig 内容如下</p><img src="5.png" width="50%"></li><li><p>每次代开页面自动执行脚本。</p></li></ol></li></ol><h2 id="配置-404-页面"><a href="#配置-404-页面" class="headerlink" title="配置 404 页面"></a>配置 404 页面</h2><p>source 目录下或 NexT 主题 source 目录下添加 404.html 部署 github 服务器上即可。</p><p>只要 github 仓库根目录下有 404.html 即可。</p><h2 id="json-server"><a href="#json-server" class="headerlink" title="json-server"></a>json-server</h2><p>正在努力编写中…</p><h2 id="lowdb"><a href="#lowdb" class="headerlink" title="lowdb"></a>lowdb</h2><p>正在努力编写中…</p><h2 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h2><p>正在努力编写中…</p><h2 id="PostCSS"><a href="#PostCSS" class="headerlink" title="PostCSS"></a>PostCSS</h2><p>正在努力编写中…</p><h2 id="js-cookie"><a href="#js-cookie" class="headerlink" title="js-cookie"></a>js-cookie</h2><p>正在努力编写中…</p><h1 id="页面静态化"><a href="#页面静态化" class="headerlink" title="页面静态化"></a>页面静态化</h1><p>正在努力编写中…</p><!-- rebuild by neat -->]]></content>
  </entry>
  <entry>
    <title>PHP</title>
    <url>/posts/11574/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><h1 id="php环境搭建"><a href="#php环境搭建" class="headerlink" title="php环境搭建"></a>php环境搭建</h1><p><a href="https://www.php.net/" target="_blank" rel="noopener">php官网链接</a></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>选择Downloads -&gt; Windows downloads -&gt; 选择相应版本zip包即可。</p><a id="more"></a> <img src="1.png" width="50%"><p>关于TS（线程安全）和NTS（非线程安全）区别？</p><ul><li>如果你打算使用IIS，则你可以以ISAPI或FastCGI这两种方式来安装PHP。<ul><li>如果你要在IIS中以FastCGI方式使用PHP，则你应该使用PHP的非线程安全的版本。<ul><li>原因是以FastCGI方式安装PHP时，PHP拥有独立的进程，并且FastCGI是单一线程的，不存在多个线程之间可能引发的相互干扰。由于省去了线程安全的检查，因此使用FastCGI方式比ISAPI方式的效率更高一些。</li></ul></li><li>如果你要在IIS中以ISAPI的方式使用PHP，则你应该使用PHP的线程安全版本。<ul><li>原因是PHP以ISAPI方式安装时，PHP没有独立的进程，而是作为DLL被IIS加载运行的，即是依附于Web服务器进程的。当Web服务器运行在多线程模式下（IIS正是这种情况），PHP自然也就运行在多线程模式下。只要是在多线程模式下运行，就可能存在线程安全问题，因此应选择PHP的线程安全版本。</li></ul></li></ul></li><li>如果你打算使用Apache，则你可以以模块、ISAPI、FastCGI这三种方式来安装PHP。<ul><li>如果你要在Apache中以模块方式安装PHP，则你应该使用PHP的线程安全的版本。<ul><li>原因是当PHP作为Apache的模块安装时，PHP没有独立的进程，而是作为模块以DLL的形式被加载到Apache中的，是随Apache的启动而启动的，而Windows下的Apache为多线程工作模式，因此PHP自然也就运行在多线程模式下。因此，这种情况下应使用PHP的线程安全版本。</li></ul></li><li>如果你要在Apache中以FastCGI方式使用PHP，则同在IIS中使用FastCGI的PHP的情况一样，你应该使用PHP的非线程安全的版本。<ul><li>原因是在Apache中以FastCGI方式安装PHP时，PHP拥有独立的进程，并且FastCGI是单一线程的，故应使用PHP的非线程安全版本以提高性能。</li></ul></li><li>如果你要在Apache中以ISAPI方式安装PHP，则你应该使用PHP的线程安全的版本。<ul><li>以ISAPI方式来安装PHP时，PHP也没有独立的进程，也是作为模块被加载到Apache中的，因此，同样也需要使用PHP的线程安全版本。</li><li>通常认为ISAPI是配合IIS使用的，因为ISAPI最初就是微软为IIS开发的。但Apache现在也可以通过加载mod_isapi.so模块来实现ISAPI的功能，以允许PHP以ISAPI的方式安装。.so文件是Apache自1.3版本后制定的用于Windows下的模块命名规则，对于Windows下的Apache而言，.so与.dll文件一样，都是动态链接库文件。当要以ISAPI方式来安装PHP时，通常是加载一个名如phpXisapi.dll的DLL文件，其中的X为阿拉伯数字4、5等等。但一般不建议在Apache中以ISAPI方式来安装PHP，原因是到目前为止，Apache通过mod_isapi.so模块来实现的ISAPI功能并不完整，并未完整实现微软对ISAPI所制定的全部规范。</li></ul></li></ul></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol start="0"><li><p>环境说明</p><ul><li>以线程安全版本的php为准。</li><li>Apache无法设置相对路径。</li></ul></li><li><p>Apache配置httpd.conf文件。</p><ol><li><p>在文件末尾新起一行，输入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LoadModule php7_module &quot;D:\Apache24\php-7.1.30-Win32-VC14-x64\php7apache2_4.dll&quot;</span><br></pre></td></tr></table></figure><ul><li>这行代码意思就是让Apache服务器引入php模块，从而可以支持php应用的web访问。</li><li>如果要引入php5模块，将php7_module改成php5_module即可，再设置对应路径即可。</li></ul></li><li><p>继续添加一行</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AddType application/x-httpd-php .php .html .htm .php5</span><br></pre></td></tr></table></figure><ul><li>让Apache识别php文件的后缀，从而对这些后缀的应用进行解析。</li></ul></li><li><p>最后添加一行。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PHPIniDir &quot;D:\Apache24\php-7.1.30-Win32-VC14-x64&quot;</span><br></pre></td></tr></table></figure><ul><li>配置Apache服务器php.ini的路径，从而使服务器读取php的配置。</li><li>php.ini文件可省略。</li></ul></li><li><p>配置如下</p><img src="2.png" width="75%"></li></ol></li><li><p>php根目录把php.ini-development复制一个副本，然后将副本重命名为php.ini，然后配置php.ini。</p><ol><li><p>找到<code>; On windows:</code>这一行。把extension_dir前面的注释去掉，设置ext目录（在php根目录下）。</p><img src="3.png" width="75%"><ul><li>ext目录是指定php相应扩展的目录，如果这个不设置，那么只能使用php核心功能。</li></ul></li><li><p>我这里只开启mysqli扩展。</p><img src="4.png" width="75%"></li></ol></li></ol><!-- rebuild by neat -->]]></content>
  </entry>
  <entry>
    <title>数据库</title>
    <url>/posts/63394/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="数据库管理工具"><a href="#数据库管理工具" class="headerlink" title="数据库管理工具"></a>数据库管理工具</h2><h3 id="phpMyAdmin"><a href="#phpMyAdmin" class="headerlink" title="phpMyAdmin"></a>phpMyAdmin</h3><p><a href="https://www.phpmyadmin.net/" target="_blank" rel="noopener">phpMyAdmin</a></p><ul><li><p>phpMyAdmin的安装</p><ol start="0"><li><p>要使用phpMyAdmin必须先配置php环境。</p><a id="more"></a></li><li><p>把phpMyAdmin的解压目录放在Apache的htdocs目录下。这是Apache的网站存放目录。</p><p><img src="1.png" alt></p></li><li><p>配置config.default.php文件，路径在phpMyAdmin根目录下的libraries目录。</p><ol><li><p>查找<code>$cfg[&#39;PmaAbsoluteUri&#39;]</code>，填写phpmyadmin的访问网址。</p><ul><li><p>如<code>http://localhost/phpMyAdmin/index.php</code>。</p><p><img src="2.png" alt></p></li><li><p>这里可留空。</p></li></ul></li><li><p><code>$cfg[&#39;Servers&#39;][$i][&#39;host&#39;]</code></p><ul><li>填写localhost或mysql所在服务器的ip地址。</li></ul></li><li><p><code>$cfg[&#39;Servers&#39;][$i][&#39;port&#39;]</code></p><ul><li>mysql端口，如果是默认3306，保留为空即可。</li></ul></li><li><p><code>$cfg[&#39;Servers&#39;][$i][&#39;user&#39;]</code></p><ul><li>mysql用户名。</li></ul></li><li><p><code>$cfg[&#39;Servers&#39;][$i][&#39;password&#39;]</code></p><ul><li>mysql密码，留空就行。</li></ul></li><li><p><code>$cfg[&#39;Servers&#39;][$i][&#39;auth_type&#39;]</code></p><ul><li>在此有四种模式可供选择，cookie，http，HTTP，config。<ol><li>config方式即输入phpmyadmin的访问网址即可直接进入（前提是<code>$cfg[&#39;Servers&#39;][$i][&#39;password&#39;]</code>密码配置正确），无需输入用户名和密码，是不安全的，不推荐使用。</li><li>当该项设置为cookie，http或HTTP时，登录phpmyadmin需要数据用户名和密码进行验证。</li></ol></li></ul></li><li><p><code>$cfg[&#39;blowfish_secret&#39;]</code></p><ul><li>设置短语密码。如果认证方法设置为cookie，就需要设置短语密码，不能留空，否则会在登录phpmyadmin时提示错误。</li></ul></li><li><p><code>$cfg[&#39;DefaultLang&#39;]</code></p><ul><li>选择语言，zh代表简体中文的意思。</li></ul></li></ol></li><li><p>配置完成输入<code>http://localhost/phpMyAdmin/index.php</code>即可访问。</p></li><li><p>如果遇到phpMyAdmin高级功能尚未完全设置这个问题，导入create_tables.sql文件即可。位置在phpMyAdmin根目录下的sql目录。</p></li></ol></li></ul><h3 id="HeidiSQL"><a href="#HeidiSQL" class="headerlink" title="HeidiSQL"></a>HeidiSQL</h3><p>正在努力编写中…</p><h2 id="安装多个-MySQL-服务"><a href="#安装多个-MySQL-服务" class="headerlink" title="安装多个 MySQL 服务"></a>安装多个 MySQL 服务</h2><ol><li><p>复制目录：</p><img src="8.png" width="80%"></li><li><p>配置端口（配置 MySQL 根目录下 my.ini 文件）：</p><img src="5.png" width="40%"></li><li><p>修改路径：</p><img src="6.png" width="50%"></li><li><p>以管理员身份安装 MySQL2 服务：</p><img src="7.png" width="50%"></li><li><p>连接 MySQL2 默认空密码，在 mysql 数据库中新建查询重设密码。</p><img src="9.png" width="80%"></li></ol><h2 id="树形结构数据"><a href="#树形结构数据" class="headerlink" title="树形结构数据"></a>树形结构数据</h2><p>根据 parent_id 查询父节点下的所有一级子节点。</p><img src="54.png" width="80%"><ul><li>is_parent 字段为是否为父节点（该节点是否拥有子节点）。</li></ul><h2 id="字典表设计"><a href="#字典表设计" class="headerlink" title="字典表设计"></a>字典表设计</h2><img src="53.png" width="80%"><h2 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h2><p>正在努力编写中…</p><h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><p>读写分离：读操作往往比写操作更吃数据库性能。</p><img src="3.png" width="50%"><ul><li>一个数据库负责写操作，另外两个数据库负责读操作。</li></ul><p>主从复制：读的数据库和负责写的数据库同步。</p><h3 id="主从库搭建"><a href="#主从库搭建" class="headerlink" title="主从库搭建"></a>主从库搭建</h3><p>主从复制原理：</p><ul><li>假设主服务器叫 A，从服务器叫 B。主从复制就是 B 跟着 A 学，A 做什么，B 就做什么。</li><li>那么 B 怎么同步 A 的动作呢？现在 A 有一个日志功能，把自己所做的增删改查的动作。</li><li>全都记录在日志中，B只需要拿到这份日志，照着日志上面的动作施加到自己身上就可以了。</li></ul><ol><li><p>要求：</p><img src="10.png" width="80%"></li><li><p>配置 MySQL 服务（不是 MySQL2 服务） my.ini 文件：</p><img src="11.png" width="80%"><ul><li>log-bin 指定二进制日志。</li><li>server-id 集群中的 MySQL 唯一标识。</li></ul></li><li><p>修改从库（MySQL2） my.ini 文件：</p><img src="12.png" width="80%"></li><li><p>重启两个 MySQL 实例（服务）：</p><img src="13.png" width="80%"></li><li><p>主库授权（Navicat 可在 mysql 数据库新建查询）：</p><img src="15.png" width="80%"></li><li><p>命令参数解释：</p><img src="14.png" width="80%"></li><li><p>查看主服务器 BIN 日志的信息：</p><img src="16.png" width="80%"><ul><li>执行完之后记录下这两值，然后在配置完从服务器之前不要对主服务器进行任何操作，因为每次操作数据库时这两值会发生改变。</li></ul></li><li><p>设置从服务器，关闭 slave: <code>stop slave;</code>（这一步可忽略）。</p><ul><li>如果你以前配置过主从的话，一定要先关闭。</li></ul></li><li><p>从服务器输入以下 mysql 语句：</p><img src="17.png" width="80%"><p>参数解释：</p><ul><li>MASTER_HOST: 设置要连接的主服务器的 ip 地址。</li><li>MASTER_USER: 设置要连接的主服务器的用户名。</li><li>MASTER_PASSWORD: 设置要连接的主服务器的密码。</li><li>MASTER_LOG_FILE: 设置要连接的主服务器的 bin 日志的日志名称，即第 3 步得到的信息。</li><li>MASTER_LOG_POS: 设置要连接的主服务器的 bin 日志的记录位置，即第 3 步得到的信息（这里注意，最后一项不需要加引号。否则配置失败）。</li></ul></li><li><p>启动从服务器 <code>start slave</code>（mysql 语句）;</p></li><li><p><code>show slave status;</code> 查看是否配置成功：</p><img src="18.png" width="80%"><ul><li>两项为 Yes 配置即成功。</li></ul></li></ol><h2 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h2><h3 id="MySQL-代理"><a href="#MySQL-代理" class="headerlink" title="MySQL 代理"></a>MySQL 代理</h3><p>解决 JAVA 连接多个数据源的问题。</p><img src="4.png" width="50%"><h3 id="mysql-proxy"><a href="#mysql-proxy" class="headerlink" title="mysql-proxy"></a>mysql-proxy</h3><ol><li><p>MySQL 官网下载 mysql-proxy。</p></li><li><p>配置：</p><img src="19.png" width="50%"><ul><li>proxy-adress mysql 代理服务器的 IP 地址和端口号。</li><li>proxy-backend-addresses 主库 IP 地址和端口号。</li><li>proxy-read-only-backend-addresses 从库 IP 地址和端口号（从库有多个可以配置多个）。</li><li>proxy-lua-script 读写分离脚本。</li></ul></li><li><p>配置环境变量：</p><img src="20.png" width="80%"></li><li><p>创建服务：</p><img src="21.png" width="80%"></li><li><p>启动服务：</p><img src="23.png" width="80%"><ul><li>如果启动失败装 VC++ 2008 运行库（64位系统：32 和 64 位都要装，32 位系统：只装 32 位）。</li></ul></li><li><p>创建连接：</p><img src="22.png" width="50%"></li></ol><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><p>当前事务中返回最后生成的主键信息。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LAST_INSERT_ID</span>();</span><br></pre></td></tr></table></figure><h2 id="数据库存放图片-URL"><a href="#数据库存放图片-URL" class="headerlink" title="数据库存放图片 URL"></a>数据库存放图片 URL</h2><p>图片 URL 只存图片名字，如果通过日期分类，则图片 URL 为：日期 + 图片名字。</p><hr><p>数据库安装命令：<br>mysqld –remove<br>mysqld –install<br>mysqld –initialize-insecure –user=mysql<br>net start mysql<br>MySQL命令：<br>创建数据库 create database 数据库名;<br>显示所有数据库 show databases;<br>删除数据库 drop database 数据库名;<br>使用数据库 use 数据库名;<br>创建表 create table 表明(列名1 列类型1，列名2 列类型2…);<br>显示库中所有表 show tables;<br>删除表 drop table 表名;<br>想表中插入数据 insert into 表名<br>(列名1，列名2…)<br>values<br>(值1，值2…);<br>查看表中数据 select * from 表名;<br>筛选数据 where 列名 关系运算符 筛选条件;<br>修改数据 update 表名 set 列名1 等号 修改的数值1, 列名2 等号 修改的数值2;<br>删除表中数据 delete from 表名;（不是删除表）<br>搜索表中含有部分关键字的值 like<br>排序 order by 列名 asc或desc<br>约束 check(列名 关系运算符 约束条件);（MySQL无效）<br>emun(值1, 值2…);枚举法约束范围较小，枚举的值从1开始（单选）。<br>set(“选项1”,”选项2”,”选项3”,…);（多选）<br>分组 groub by 列名; 在分组的列上我们可以使用COUNT,SUM,AVG,等函数。<br>显示数据表各属性 show columns from 表名;<br>删除列 alter table 表名 drop 列名;<br>增加列 alter table 表名 add 列名 数据类型;<br>修改列属性 alter table 表名 modify 列名 数据类型;<br>外键约束 foreign key(列名) references 主表名 (主表列名);<br>增加外键属性 alter table 副表名 add foreign key (副列名) references 主表名 (主列名)<br>进价：<br>MySQL 数据类型<br>格式<br>tinyint 1字节<br>smallint 2字节<br>mediumint 3字节<br>int或integer 4 字节<br>bigint 8字节<br>float 4字节<br>double 8字节<br>char 0-255字节<br>varchar 0-65535字节<br>tinytext 0-255字节<br>text 0-65535字节<br>mediumtext 0-16777215字节<br>longtext 0-4294967295字节<br>date 3字节 YYYY-MM-DD<br>time 3字节 HH:MM:SS<br>year 1字节 YYYY<br>datetime 8字节 YYYY-MM-DD HH:MM:SS<br>engine 设置存储引擎<br>default charset 默认编码<br>not null 不允许为空, 在操作数据库时如果输入该字段的数据为NULL ，就会报错。<br>varchar(10) 可以存储的最大字符串长度为10个字节<br>InnoDB就是作为MySQL默认的存储引擎。<br>date类型插入时间格式为’YYYY-MM-DD’。<br>字符串内容用单引号括起来，数值不能用单引号括起来。<br>使用箭头标记-&gt;不是SQL语句的一部分，它仅仅表示一个新行，如果一条SQL语句太长，我们可以通过回车键来创建一个新行来编写 SQL 语句，SQL 语句的命令结束符为分号。<br>select + 列名 + from + 表名 + where + 列名 + 关系运算符 + 筛选条件;<br>where<br>= 等号<br>&lt;&gt;, != 不等于</p><blockquote><p>大于号<br>&lt; 小于号<br>= 大于等于号<br>&lt;= 小于等于号<br>or 或者<br>and 并且</p></blockquote><p>unsigned只能放在数据类型后面，unsigned int是错误的。<br>primary key 设置主键<br>primary key(列名1，列名2…) 复合主键，注意没有单引号<br>主键不能为空且值不能重复。<br>auto_increment 定义列为自增的属性，一般用于主键，数值会自动加1<br>default 设置默认值<br>auto_increment与default不能一起使用，默认值是违背自增长的。<br>auto_increment一定要与primary key一起使用。<br>默认值为not null，一定要指定默认值（default），不然会报错。<br>delete语句如果没有指定WHERE子句，MySQL 表中的所有记录将被删除。<br>like子句中使用百分号 %字符来表示任意字符，如果没有使用百分号 %, LIKE 子句与等号 = 的效果是一样的。<br>如： where name like ‘%.com’<br>now()获取系统当前时间，赋值给数据类型为date的变量，不用单引号括起来。<br>select * from 表名1<br>union<br>select * from 表名2;<br>union操作符用于连接两个以上的select语句的结果组合到一个结果集合中。<br>unique取值唯一，其值是不能改变的。<br>in操作符允许我们在where子句中规定多个值（or）。<br>如：where id in(1,2,3); where name in(‘LJL’,’KAO’);<br>count(*) 统计函数。<br>查找数值范围：where id between 1 and 3;<br>嵌套查询：select * from table1 where 列名 in (select 列名 from table2)<br>设置外键的条件：<br>该键所参考的字段必须为主键<br>两个字段必须具有相同的数据类型和约束<br>unique 标识唯一的，值不能重复。<br>having 分组筛选条件，与group by 一起使用，功能相当于where。<br>having后的判断字段必须是聚合函数返回的结果。<br>关系和属性重新命名的子句为as。<br>MySQL显示连接数：<br>show processlist;<br>数据库分类<br>关系型数据库、 非关系型数据库<br>外键：关联两个数据表<br>索引：使用索引可快速访问数据表中的特定信息，索引是对数据表中的一列或多列的值进行排序的一种结果。类似与书籍的目录。<br>mysql数据库<br>information_schema数据库 存取数据库对象信息，如用户表信息，列信息，根除，字符，分区。<br>performance_schema数据库 存储数据库服务器相关参数信息<br>sys数据库 通过这个库可以快速的了解系统的元数据信息。这个库是通过视图的形式把information_schema和performance_schema结合起来，查询出更加令人容易理解的数据。<br>mysql 存储数据库用户权限信息。<br>数据库默认端口号 3306<br>字符集<br>asscii 演变 iso-646</p><p>为了处理不同的文字，各大计算机公司、各国、标准化政府，组织先后发明了几百种字符集：<br>iso-8859 gb2312-80 gbk big5 (和ascii差不多,不过各自编码规则不一样)</p><p>统一字符 iso制定iso10646规则<br>unicodel技术委员会1991年推出了unicode1.0<br>1991年10月，iso将unicode收编，名为bmp</p><p>iso-10646编码空间足以容纳从古至今使用过的文字和字符。但很多文字字符已经很少使用。<br>Unicode双字节方式都能满足需求。<br>UTF-8是Unicode编码的一种使用方式。<br>概念<br>数据库对象 存储、管理和使用数据的不同结构形式，如：表、视图、存储过程、函数、触发器、事件等。<br>数据库： 存储数据库对象的容器。<br>存储引擎：每一种技术都使用不同的存储机制、索引技巧、锁定水平并且最终提供广泛的不同的功能和能力。通过选择不同的技术，你能够获得额外的速度或者功能，从而改善你的应用的整体功能。不同的存储引擎性能不一样。<br>什么是事物： 是指作为单个逻辑工作单元执行的一些列操作，要么完全地执行，要么完全的不执行。<br>存储引擎分类<br>MYISAM： 不支持事物、外键、但是访问速度块，对事物完整性没有要求或者以select、insert为主的应用基本都可以使用这个引擎来建表。每个MYISAM在磁盘上存储成3个文件，其中扩展名和表明都相同，扩展名为.frm(定义表结构，一个表多少列多少行)、.MYDate，存储数据、MYIndex，存取索引。<br>INNODB： INNODB存储引擎提供了具有提交、回滚和崩溃修复能力的事物安全。但是会占用更多的磁盘空间以保留数据和索引。<br>MEMORY： memory使用存在内存中的内容来建表。每个memory表实际对应一个磁盘文件，格式是.frm。memory类型的表访问速度非常快，因为他到数据是放在内存中的，并且默认使用hash索引，但是一旦服务器关闭，表中的数据就会丢失，但表还会继续存在。<br>mysql命名规则<br>采用26个英文字母(区分大小写)和0-9的自然数(经常不需要)加上下划线’<em>‘组成，命名简洁明确，多个单词用下划线’</em>‘分隔。<br>禁止使用数据库关键字，如：name，time ，datetime，password等<br>SQL数据类型<br>mysql中定义数据字段的类型对你数据库的优化是非常重要的。<br>mysql数据类型大致分为3类：数值类型、String类型、日期和时间类型。</p><p>常用的数据类型：<br>double double(5,2)表示最多5位，其中必须有2位小数，即最大值999.99<br>char 固定长度字符串类型 char(10) ‘abc ’ 必须10个字节<br>varchar 可变长度字符串类型，varchar(10) ‘abc’<br>text 字符串类型<br>date 日期类型，格式为：yyyy-MM-dd<br>time 时间类型，格式为：hh:mm:ss<br>datetime 日期时间类型，格式为：yyyy-MM-dd hh:mm:ss</p><p>varchar(25) 最多只能有25个字符。<br>int(11) 位数不够，用多少个0补齐。c10 0000000099 c11 00000000099</p><p>在mysql中，字符串类型和日期类型都要用单引号括起来。<br>mysql语言分类</p><p>ddl数据定义语言：用来定义数据库对象：创建库、表、列等（结构）<br>create database 数据库名 character set utf8;<br>数据表添加一列 alter table 表名 add 列名 数据类型<br>数据表添加约束 alter table 表名 add constraint 约束类型<br>修改一个表的字段类型 alter table 表名 modify 字段名 数据类型<br>删除表的一个字段 alter table 表名 drop 字段名<br>查看表结构 desc 表名<br>查看表的创建细节 show create table 表名<br>修改表名 rename table 原始表名 to 修改表名<br>修改表列名 alter table 表名 change 原始列名 新列名 数据类型<br>修改表字符集 alter table 表名 character set 字符编码<br>删除表 drop table 表名</p><p>dml是对表中的数据进行增删改的操作：<br>插入数据 insert into 表名（列名1, 列名2） values （列值1, 列值2）<br>插入多条数据 insert into 表名（列名1, 列名2） values (列值1, 列值2),<br>(列值1，列值2)<br>修改所有数据 update 表名 set 列名=要修改的值<br>修改指定一行 update 表名 set 列名1=要修改的值1, 列名1=要修改的值1<br>where 列名=列值<br>mysql 支持 数据库名.表名 的方式，表示数据中的那张表<br>修改数据库密码 密码保存在mysql数据库中的user表的authentication_string字段里。<br>password(‘密码’); 对密码进行加密<br>flush privileges 修改mysql密码后要刷新mysql的系统权限相关表。</p><p>修改密码另一种方法（必须退出mysql执行）:<br>mysqladmin -u root -p password 要修改的密码<br>password： 原始密码</p><p>cmd命令 cls清除cmd命令框信息（必须退出mysql执行）。</p><p>delete from 表名 where 列名 = 列值<br>删除所有记录 delete from 表名; truncate table 表名<br>delete与truncate的区别 delete删除表中的数据，表结构还在，删除后的数据可以找回<br>truncate删除是把表直接删除掉，然后在创建一个同样的新表。删除的数据不能找回。执行速度比delete快。</p><p>dql数据查询语言：<br>结果集：数据库执行dql语句不会对数据进行改变，而是让数据库发送结果集给客户端。通过查询语句查询出来的数据以表的形式展示给我们称这个表为虚拟结果集。存放在内存中。查询返回的结果集是一张虚拟表。<br>select 列名1, 列名2 form 表名<br>mysql中dql 关键字书写顺序<br>select[distinct] 优先级最高<br>from<br>join（如left join）<br>on<br>where<br>group by<br>having<br>union<br>order by<br>limit 优先级最低<br>mysql中dql 关键字执行顺序<br>from 对FROM左边的表和右边的表计算笛卡尔积，产生虚表VT1；优先级最高</p><p>on 对虚拟表VT1进行ON筛选，只有那些符合条件的行才会被记录在虚拟表VT2中；</p><p>join 如果是OUT JOIN，那么将保留表中（如左表或者右表）未匹配的行作为外部行添加到虚拟表VT2中，从而产生虚拟表VT3；</p><p>where 对虚拟表VT3进行WHERE条件过滤，只有符合的记录才会被放入到虚拟表VT4；</p><p>group by 根据GROUP BY子句中的列，对虚拟表VT4进行分组操作，产生虚拟表VT5；</p><p>having 对虚拟表VT6进行 HAVING 条件过滤，只有符合的记录才会被插入到虚拟表VT7中；<br>select 执行SELECT操作，选择指定的列，插入到虚拟表VT8中；</p><p>distinct 对虚拟表VT8中的记录进行去重，产生虚拟表VT9；</p><p>order by 将虚拟表VT9中的记录按照进行排序操作，产生虚拟表VT10；</p><p>limit 取出指定行的记录，产生虚拟表VT11，并将结果返回。优先级最低。<br>条件查询条件运算符<br>条件查询就是在查询时给出where子句，在where子句中可以使用一些运算符及关键字。<br>运算符 = != &lt;&gt;(不等于) &lt; &lt;= &gt; &gt;=<br>between………..and 在什么范围<br>in（set） 固定的范围值<br>is null(为空) is not null（不为空）<br>and与 or或 not非</p><p>in 和 等号的区别<br>= 的速度会略快，用于单值，IN 一般是用于多个值的时候比如 id in (1,2,3,15,65)</p><p>sql注释<br>mysql 用–注释<br>条件查询应用<br>select * from students where id in(1001, 1002, 1003);<br>查询id为1001,1002,1003。<br>select * from 表名 where name is not null;</p><p>模糊查询：关键字 ：like<br>通配符： _ 任意一个字母<br>查询姓名有5个字母构成，并且第5个字母为“s”的学生记录<br>select * from students where name like ‘—-s’<br>% 任意多个字母<br>查询姓名以m开头的学生记录<br>select * from 表名 where name like ‘m%’</p><p>去除重复记录 select distinct name from 表名<br>distinct关键字去除重复记录</p><p>把查询字段的结果进行运算，必须都要是数据类型<br>select <em>, 字段1+字段2 from 表名<br>对字段重命名<br>对查询结果字段起别名 select *, 字段1 + ifnull(字段2, 0) as total from 表名<br>as可省略<br>注意：as只能跟在select后面<br>排序<br>排序关键字 order by asc 从小到大（默认）<br>desc从大到小<br>注意：order by 后面必须指定字段名<br>select * from 表名 order by 字段名 asc; asc可省略<br>select * from 表名 order by 字段名1 desc, 字段名2 desc;<br>如果字段名1值相同，则按字段名2排序。<br>常用函数<br>count():统计指定列不为null的记录行数。<br>max():计算指定列的最大值，如果指定列是字符串类型，那么使用字符串排序运算；<br>min():计算指定列的最小值，如果指定列是字符串类型，那么使用字符串排序运算；<br>sum():计算指定列的数值和，如果指定列类型不是数值类型，那么计算结果为0；<br>avg():计算指定列的平均值，如果指定列类型不是数值类型，那么计算结果为0；<br>只要在Count中指定非NULL表达式，结果没有任何区别。因此当你指定Count(</em>） 或者CountCount（543）或者无论Count(‘anything’)时结果都会一样，因为这些值都不为NULL。<br>IFNULL(expr1,expr2):如果expr1不是NULL，IFNULL()返回expr1，否则它返回expr2。</p><p>查询表中有多少条记录<br>select count(*) from 表名。<br>count经常配合分组查询使用。</p><p>查询所有字段1的和<br>select sum(字段1) from 表名</p><p>聚合函数都是用在字段上。</p><p>一般在书写sql的是时候很多时候会误将聚合函数放到where后面作为条件查询，事实证明这样是无法执行的，执行会报【此处不允许使用聚合函数】异常。为什么会报异常呢？其原因很简单：<br>1、having放在group by 的后面<br>2、group by 后面只能放非聚合函数的列<br>3、where 子句的作用是在对查询结果进行分组前，将不符合where条件的行去掉，即在分组之前过滤数据，条件中不能包含聚组函数，使用where条件显示特定的行。<br>4、having 子句的作用是筛选满足条件的组，即在分组之后过滤数据，条件中经常包含聚组函数，使用having 条件显示特定的组，也可以使用多个分组标准进行分组。<br>那聚合函数在什么情况下使用或者应该处在sql文中的哪个位置呢<br>聚合函数只能在以下位置作为表达式使用：<br>1、 select 语句的选择列表（子查询或外部查询）；<br>2、 compute 或 compute by 子句；<br>3、having 子句；</p><p>—————————数据分类—————————————-<br>关键字 group by<br>select 字段名 from group by 字段名<br>当group by 单独使用时，只显示每组的第一条记录。<br>注意：使用了group by 后，要求Select出的结果字段都是可汇总的，否则就会出错。<br>GROUP BY X, Y意思是将所有具有相同X字段值和Y字段值的记录放到一个分组里。</p><p>函数 group_concat()<br>group_concat(字段名)可以作为一个输出字段来使用，表示分组之后，根据分组结果，使用group_concat来放置一组的某字段的值的集合。<br>只能写在select后面。</p><p>select 字段名1, group_concat(‘name’) from 表名 group by 字段名1<br>对字段名1进行分组，并显示每一组中的name<br>分组之后还可以对数据进行求和、平均值、最大值、最小值操作<br>select 字段名1, sum(字段名2) from 表名 group by 字段名1<br>根据字段名1进行分组，然后对每一组求和。</p><p>having关键字：<br>用来分组查询后指定一些条件来输出查询结果，having作用和where一样，但having只能用于group by。<br>where和having的区别：<br>having是在分组后对数据进行过滤<br>where是在分组前对数据进行过滤<br>where不可以使用聚合函数，having可以使用聚合函数</p><p>为什么where不能使用聚合函数？<br>where是条件查询，所以不能用聚合函数。</p><p>聚合函数是针对结果集进行的，但是where条件并不是在查询出结果集之后运行，所以主函数放在where语句中，会出现错误，</p><p>而having不一样，having是针对结果集做筛选的，所以我门一般吧组函数放在having中，用having来代替where，having一般跟在group by后</p><p>所以where后面已经是产生结果集了吗？？？？？？？？<br>—————————–关键字limit————————————————–<br>limit关键字：从哪一行开始查，总共要插几行。<br>limit 参数1,参数2 参数1：从哪一行开始插，参数2：一共要查几行。<br>———————————–ddl中数据完整性——————————————–<br>实体完整性：表中的一行（一条记录）代表一个实体。<br>主键约束特点：数据唯一，且不能为空。<br>mysql标识主键关键字 primary key<br>联合主键：多个字段生成一个主键 primary key(字段1, 字段2);<br>联合主键特点：每个主键不能为空，两个主键字段数据相同才违反联合主键约束。</p><p>唯一约束：指定列的数据不能重复，但可以为空。<br>关键字： unique<br>create table 表名(字段名1 数据类型, 字段名2 数据类型 unique);</p><p>自动增长列：指定列的数据自动增长，即使数据删除，还是从删除的序号继续往下增长。<br>关键字 auto_increment</p><p>域完整性约束：数据类型、非空约束、默认值约束（default）;<br>非空约束关键字 not null;<br>默认值约束： default</p><p>参照完整性：数据库的主键和外键类型一定要一致，两个表必须是InnoDB类型。<br>外键关键字 foreign key references（参考那张表，与那张表建立联系）<br>constraint 外键名 foreign key(字段名) references 另一张表（另一张表字段名）</p><p>———————————-表与表关系——————————————————<br>多对多关系：通过一张关系表来建立多对多关系。<br>为什么要拆分数据？<br>避免大量冗余数据的出现。<br>——————————合并结果集—————————————<br>关键字union 合并时去除重复记录<br>关键字 union all 合并时不去除重复记录<br>格式 select * from 表1 union select * from 表2<br>select * from 表1 union all select * from 表2<br>注意事项： 被合并的两个结果集：列数、列类型必须相同。<br>————————————多表查询—————————————–<br>同时查询两个表，会出现笛卡尔集的现象。<br>select * from 表1, 表2;<br>查询时给表起别名 select * from 表1 别名1, 表2 别名2;<br>多表查询是where条件中的字段名前要声明是哪张表。<br>select * from 表1, 表2 where 表1.字段1 = 表2.字段1;<br>去除笛卡尔集现象：在查询时要把主键与外键保持一致。<br>99写法： select * form 表1, 表2 where 表1.id = 表2.id(其中表1的id必须与表2的id保持一致)<br>内连接关键字：join…on<br>join后面写另外一张表。<br>on后面只写主外键的关系。<br>内连接之等值连接： select * from 表1 inner join 表2 on 表1.id = 表2.id;<br>左(外)连接：左连接就是把左边表的信息全部查出来，右边表的信息只有满足条件的才会被查出来。<br>select * form 表1 left join 表2 on 表1.id = 表2.id;<br>右连接：右连接就是把右边表的信息全部查出来，左边表的信息只有满足条件的才会被查出来。<br>select * from 表1 right join 表2 on 表1.id = 表2.id;</p><p>多表联查：<br>99写法: select * from 表1, 表2, 表3 where 表1.id = 表2.1id and 表3.id = 表2.3id<br>内连接: select * from 表1 join 表2 on 表1.id = 表2.1id<br>join 表3 on 表3.id = 表2.3id<br>on后面除了等号还可以跟其他查询条件<br>当一条sql语句包含多条子查询的时候，要注意列名冲突的问题。<br>——————————–保留小数—————————-<br>在mysql中，round函数用于数据的四舍五入，它有两种形式：<br>1、round(x,d) ，x指要处理的数，d是指保留几位小数<br>这里有个值得注意的地方是，d可以是负数，这时是指定小数点左边的d位整数位为0,同时小数位均为0；<br>2、round(x) ,其实就是round(x,0),也就是默认d为0；<br>————————————-子查询——————————————————–<br>子查询出现的位置：<br>where后，把select 查询出的结果当做另一个select的条件值。<br>from后，把查询出的结果当做一个新表，必须给派生表起别名。<br>子查询里的命名不会与括号外面造成的命名造成冲突。可以取相同的名字。</p><p>当有多个值进行比较的时候可以用一个括号括起来：<br>select * from 表名<br>where (字段1，字段2)<br>0in (select 字段1, 字段2 from emp where ename = ‘值1’);</p><p>自连接：自己连接自己，给自己起别名。<br>——————————-函数———————————————–<br>concat(s1,s2,s3…………..)<br>将传入的字符串连接成一个字符串，任何字符串与null连接结果都是null<br>insert(str, x, y, instr)<br>将字符串str从x位置开始，y个字符长的子串替换为指定的字符instr<br>日期函数：</p><p>DATE_FORMAT() 函数用于以不同的格式显示日期/时间数据。<br>DATE_FORMAT(date,format)<br>date 参数是合法的日期。format 规定日期/时间的输出格式。</p><p>NOW() 函数返回当前的日期和时间。</p><p>WEEK(date[,mode])：<br>该函数返回日期的星期数。WEEK()的两参数形式允许指定星期是否于星期天或星期一开始，以及是否返回值应该是在范围从0到53或者从1到53。如果省略了模式参数，那么使用 default_week_format 系统变量的值</p><p>MONTH函数返回一个整数，表示指定日期值的月份。 以下说明了MONTH函数的语法<br>MONTH(date);</p><p>–简单Case函数<br>CASE 字段名<br>WHEN ‘1’ THEN ‘男’<br>WHEN ‘2’ THEN ‘女’<br>ELSE ‘其他’ END<br>–Case搜索函数<br>CASE WHEN sex = ‘1’ THEN ‘男’<br>WHEN sex = ‘2’ THEN ‘女’<br>ELSE ‘其他’ END</p><p>其中then 后面跟随整型， 表示加数值， 如then 1,就是加1。</p><p>这两种方式，可以实现相同的功能。简单Case函数的写法相对比较简洁，但是和Case搜索函数相比，功能方面会有些限制，比如写判断式。<br>还有一个需要注意的问题，Case函数只返回第一个符合条件的值，剩下的Case部分将会被自动忽略。</p><p>database() 返回当前数据库名<br>version() 返回当前数据库版本<br>user() 返回当前登录用户<br>password(str) 对str进行加密<br>md5(str) 返回str的md5值<br>—————————–事务——————————————<br>事务用来管理 insert,update,delete 语句</p><p>start transaction; 开启事务<br>操作1<br>操作2<br>commit; 提交事务<br>rollback 回滚事务<br>事务没有提交之前，其数据都不会被改变<br>—————————–视图———————————————-<br>创建视图<br>create view 视图名 as （结果集）;</p><p>create algorithm = {undefined|merge|temptable} view 视图名 with check option；<br>algorithm参数： merge替换式，可以进行更新真实表中的数据<br>temptable具化式，临时表存储在内存中，所以不可以进行更新操作。<br>undefined，mysql更倾向于替换式<br>with check option 更新数据时不能插入或更新不符合视图限制条件的记录。<br>————————–存储过程——————————————–<br>declare 变量名 数据类型(大小) default 默认值;<br>declare 变量名1, 变量名2 数据类型(大小) default 默认值;<br>set 变量名 = 10; 修改变量的值。<br>select 列名 into 变量名 from 表名 给变量赋值。</p><p>定义存储过程：<br>delimiter $$ 结束符修改<br>create procedure 存储过程名(in 参数名 数据类型) in表示必须传入参数<br>begin</p><p>end$$<br>delimiter ;</p><p>call 存储过程名; 调用存储过程。<br>show procedure status 查看所有存储过程。<br>show procedure status where db = 数据库名 删除指定存储过程。<br>drop procedure 名称 删除存储过程。</p><p>存储过形参out 输出一个参数。<br>call 存储过程名称(@变量名);<br>select @变量名; 查看变量名的值，@表示传入一个地址。</p><p>inout 表示传入参数和输出值。<br>————————-自定义函数————————–<br>delimiter $$<br>create function 函数名(变量名 参数类型) returns 返回值类型<br>begin</p><p>return 变量名;<br>end$$</p><p>循环：<br>while 循环条件 do</p><p>end while;</p><p>set autocommit = 0; 默认情况下是自动提交sql语句，设置不自动提交sql语句。<br>repeat循环：<br>repeat</p><p>until 循环条件<br>end repeat;<br>commit; 提交所有sql语句。统一提交sql语句。<br>———————————–索引———————————————————–<br>不使用索引,mysql必须是从第一条记录开始读完整个表，直到找出相关的行。<br>explain sql语句 \g; 查看SQL语句有没有添加索引。<br>自动创建索引： 在表上定义了主键时，会自动创建一个对应的唯一索引。<br>在表上定义了一个外键时，会自动创建一个普通索引。<br>hash索引只有MEMORY引擎支持。</p><p>———————————定义变量———————————————-<br>一、局部变量。<br>局部变量一般用在sql语句块中，比如存储过程的begin/end。其作用域仅限于该语句块，在该语句块执行完毕后，局部变量就消失了。<br>局部变量一般用declare来声明，可以使用default来说明默认值。<br>二、用户变量。<br>用户变量的作用域要比局部变量要广。用户变量可以作用于当前整个连接，但是当当前连接断开后，其所定义的用户变量都会消失。<br>select @变量名<br>对用户变量赋值有两种方式，一种是直接用”=”号，另一种是用”:=”号。其区别在于使用set命令对用户变量进行赋值时，两种方式都可以使用；当使用select语句对用户变量进行赋值时，只能使用”:=”方式，因为在select语句中，”=”号被看作是比较操作符。</p><p>select @i:=0 from dual; 等价写法 select @i:=0;</p><p>查询结果赋值给变量：<br>select @num:=1; 或 select @num:=字段名 from 表名 where ……<br>———————————where——————————————————<br>WHERE 关键字后面接有效的表达式（definition），该表达式表示被操作的数据记录必须满足的条件。</p><h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>什么是 Redis？</p><img src="24.png" width="80%"><p>Redis 特点：</p><img src="25.png" width="80%"><p>Redis 的应用：</p><img src="26.png" width="80%"><p>Redis 没有 Windows 版本：</p><img src="27.png" width="80%"><p>Redis 工具：</p><img src="29.png" width="50%"><p>Redis 采用的是基于内存的采用的是单进程单线程模型的 KV 数据库。</p><p>Redis 默认端口号是 6379。</p><h2 id="Redis-Windows-版本下载安装"><a href="#Redis-Windows-版本下载安装" class="headerlink" title="Redis Windows 版本下载安装"></a>Redis Windows 版本下载安装</h2><ol><li><p><a href="https://github.com/microsoftarchive/redis/releases" target="_blank" rel="noopener">Redis 下载地址</a></p></li><li><p>选择 zip 包。</p><img src="67.png" width="80%"></li><li><p>解压，先运行服务程序（不要关闭，最小化服务程序）再运行命令行工具。</p><img src="68.png" width="80%"></li></ol><h2 id="Redis-数据类型"><a href="#Redis-数据类型" class="headerlink" title="Redis 数据类型"></a>Redis 数据类型</h2><img src="34.png" width="80%"> <img src="35.png" width="80%"> <img src="36.png" width="80%"><h2 id="Redis-使用"><a href="#Redis-使用" class="headerlink" title="Redis 使用"></a>Redis 使用</h2><p>启动 Redis 服务（以服务程序运行）：</p><img src="28.png" width="80%"><p>打开 Redis 命令行工具：</p><img src="30.png" width="80%"><p>切换数据库：</p><img src="31.png" width="80%"><ul><li><p>Redis 默认使用 0 号库：</p><img src="33.png" width="50%"></li></ul><p>Keys 命令用于查找符合条件的 key：</p><img src="37.png" width="50%"><p>EXIXTS key 验证 key 是否存在：</p><img src="38.png" width="50%"><ul><li>1 存在，0 不存在。</li></ul><p><code>move k1 15</code> 将 k1 这条数据移动到 15 号数据库。</p><p>设置 key 过期时间和查看 key 是否过期：</p><img src="39.png" width="80%"><table><thead><tr><th align="left">命令</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">dbsize</td><td align="left">查看当前库的 key</td></tr><tr><td align="left">Flushdb</td><td align="left">清空当前库的所有 key</td></tr><tr><td align="left">Flushall</td><td align="left">删除全部库</td></tr><tr><td align="left">type key</td><td align="left">查看 key 的类型</td></tr></tbody></table><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><table><thead><tr><th align="left">命令</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">set key val</td><td align="left">向数据库插入数据</td></tr><tr><td align="left">setex key time val</td><td align="left">设置 key 的 val 为 val，过期时间为 time（单位秒）</td></tr><tr><td align="left">setnx key val</td><td align="left">key 如果存在则不插入 key，不存在 key 则插入 key</td></tr><tr><td align="left">mset k1 v1 k2 v2 …</td><td align="left">同时设置多对 key val</td></tr><tr><td align="left">mget k1 v1 k2 v2 …</td><td align="left">同时获取多对 key val</td></tr><tr><td align="left">msetnx k1 v1 k2 v2 …</td><td align="left">同时设置多对 key val，如果数据库中存在一个和语句相同的 key，这条语句不会执行。</td></tr><tr><td align="left">get key</td><td align="left">获取 key 的 val</td></tr><tr><td align="left">getset k v</td><td align="left">先获取 k，在设置 v</td></tr><tr><td align="left">del key</td><td align="left">删除 key</td></tr><tr><td align="left">append key val2</td><td align="left">向 key 中 val1 中拼接 val2</td></tr><tr><td align="left">strlen key</td><td align="left">返回 key 的长度</td></tr><tr><td align="left">incr key</td><td align="left">key 自增 1（val 必须为数字）</td></tr><tr><td align="left">decr key</td><td align="left">key 自减 1（val 必须为数字）</td></tr><tr><td align="left">incrby key num</td><td align="left">key 中的 val 和 num 相加（val 为 100，num 为 100，执行后 val 为 200）</td></tr><tr><td align="left">decrby key num</td><td align="left">key 中的 val 和 num 相减（val 为 100，num 为 100，执行后 val 为 0）</td></tr></tbody></table><p>截取和替换字符串：</p><img src="40.png" width="50%"><ul><li>getrange 截取字符串，index 从 0 开始（index 后面的参数为 end 下标）。</li><li>setrange 替换字符串，从 index 开始替换（index 后面的参数为替换内容）。</li></ul><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><table><thead><tr><th align="left">命令</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">lpush list v1 v2 v3 …</td><td align="left">向 list 中插入 v1、v2、v3（在左边（上）开始放元素：v3、v2、v1）</td></tr><tr><td align="left">rpush list v1 v2 v3 …</td><td align="left">向 list 中插入 v1、v2、v3（在右边（下）开始放元素：v1、v2、v3）</td></tr><tr><td align="left">lrange list 0 -1</td><td align="left">查看 list 中所有元素，下标从 0 开始</td></tr><tr><td align="left">lpop list</td><td align="left">弹出 list 中左（上）边的元素</td></tr><tr><td align="left">rpop list</td><td align="left">弹出 list 中右（下）边的元素</td></tr><tr><td align="left">lindex list 0</td><td align="left">查看 list 下标为 0 的元素</td></tr><tr><td align="left">llen list</td><td align="left">查看 list 中的长度</td></tr><tr><td align="left">lrem list 2 k</td><td align="left">删除 list 中 2 个 k</td></tr><tr><td align="left">ltrim list 4 6</td><td align="left">截取 list 中下标从 4 到 6 的元素</td></tr><tr><td align="left">rpoplpush list1 list2</td><td align="left">list1 中弹出一个元素放到 list2 中</td></tr><tr><td align="left">lset list 0 v</td><td align="left">更新 list 中下标为 0 的元素</td></tr><tr><td align="left">linsert list before/after v1 v2</td><td align="left">向 list 中 v1 前增加 v2（存在多个 v1，则在首次找到的 v1 前增加，之后的不会执行）</td></tr></tbody></table><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><table><thead><tr><th align="left">命令</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">sadd set v1、v2、v3…</td><td align="left">向 set 中添加 v1、v2、v3（元素不可重复）</td></tr><tr><td align="left">smembers set</td><td align="left">查看 set 中所有元素</td></tr><tr><td align="left">sismember set v</td><td align="left">查看 v 是否为 set 中的成员</td></tr><tr><td align="left">scard set</td><td align="left">获取 set 中存在几个元素</td></tr><tr><td align="left">srem set v1 v2 …</td><td align="left">删除 set 中 v1 v2 元素</td></tr><tr><td align="left">srandmember set [count]</td><td align="left">随机取出[count]（count 为负，表示可重复） set 中的元素</td></tr><tr><td align="left">spop set [count]</td><td align="left">随机出栈</td></tr><tr><td align="left">smove set1 set2 v</td><td align="left">向 set1 中 v 移动到 set2</td></tr><tr><td align="left">sdiff set1 set2</td><td align="left">返回 set1 中不与 set2 中相同的值（差集）</td></tr><tr><td align="left">sinter set1 set2</td><td align="left">返回 set1 中与 set2 中相同的值（交集）</td></tr><tr><td align="left">sunion set1 set2</td><td align="left">返回 set1 与 set2 中的并集</td></tr></tbody></table><h3 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h3><table><thead><tr><th align="left">命令</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">hset map k v</td><td align="left">在 map 中添加键值对</td></tr><tr><td align="left">hmset map k1 v1 k2 v2 …</td><td align="left">向 map 中添加多个键值对时</td></tr><tr><td align="left">hget map k</td><td align="left">获取 map 中 k 对应的 v</td></tr><tr><td align="left">hmget map k1 k2 […]</td><td align="left">获取 map 中多对 k 对应的 v</td></tr><tr><td align="left">hgetall map</td><td align="left">获取 map 中所有键值对</td></tr><tr><td align="left">hdel map k1 k2 […]</td><td align="left">删除 map 中多对键</td></tr><tr><td align="left">hlen map</td><td align="left">获取 map 中的长度</td></tr><tr><td align="left">hexists map k</td><td align="left">查看 map 中的 k 是否存在</td></tr><tr><td align="left">hkeys map</td><td align="left">查看 map 中有多少个键</td></tr><tr><td align="left">hvals map</td><td align="left">查看 map 中有多少个值</td></tr><tr><td align="left">hincrby map k 1</td><td align="left">map k 对应 v 自增加 1</td></tr><tr><td align="left">hincrbyfloat map k 1.23</td><td align="left">map k 对应 v 自增加 1.23</td></tr><tr><td align="left">hsetnx map k v</td><td align="left">map 中不存在 k，则添加 k v，存在 k，则不赋值</td></tr></tbody></table><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><img src="46.png" width="80%"><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>multi 开启事务，exec 提交事务。</p><img src="47.png" width="50%"><p>discard 放弃事务：</p><img src="48.png" width="50%"><ul><li>事务编写中语法错误，将全部不执行，就算 exec 提交事务也不会执行。</li></ul><p>没有语法错误，v1 为字符型，不能自增，产生错误，但提交会执行：</p><img src="49.png" width="50%"><h2 id="配置文件参数说明"><a href="#配置文件参数说明" class="headerlink" title="配置文件参数说明"></a>配置文件参数说明</h2><img src="65.png" width="80%"><h3 id="后台启动"><a href="#后台启动" class="headerlink" title="后台启动"></a>后台启动</h3><p>daemonize yes</p><img src="41.png" width="80%"><h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><h4 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h4><img src="43.png" width="80%"><h4 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h4><img src="44.png" width="80%"><p>启用 AOF 方式，关闭 RDB 方式：</p><img src="45.png" width="80%"><h2 id="移除算法"><a href="#移除算法" class="headerlink" title="移除算法"></a>移除算法</h2><p>配置文件中 maxmemory-policy 选项：</p><img src="42.png" width="80%"><h2 id="Redis-映射-MySQL-数据库"><a href="#Redis-映射-MySQL-数据库" class="headerlink" title="Redis 映射 MySQL 数据库"></a>Redis 映射 MySQL 数据库</h2><p>采用 hash 类型存储 MySQL 数据：</p><ul><li>大 key: 表名</li><li>小 key: id</li><li>value: 行数据 json 字符串</li></ul><p>采用 String 类型存储 MySQL 数据：</p><ul><li>hash 类型不能设置过期时间 只能采用 string 类型。</li><li>key: 表名:每行数据标识（id）</li><li>value: 每行数据json字符串</li></ul><h2 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h2><h3 id="主从复制-1"><a href="#主从复制-1" class="headerlink" title="主从复制"></a>主从复制</h3><p>include 会覆盖 redis.conf 的配置，修改端口号：</p><img src="50.png" width="50%"><ul><li>修改进程 pid。</li></ul><p>启动 3 个 redis 服务：</p><img src="51.png" width="80%"><p>配置从库：</p><img src="52.png" width="80%"><h3 id="Redis-Cluster-集群"><a href="#Redis-Cluster-集群" class="headerlink" title="Redis-Cluster 集群"></a>Redis-Cluster 集群</h3><h4 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h4><img src="55.png" width="50%"> <img src="56.png" width="80%"> <img src="58.png" width="80%"><ul><li>redis 根据 key 决定将数据放入那个 redis 服务器。</li><li>理论上 redis 集群可以有 16383 台服务器（插槽）。</li><li>插槽为了解决 key 存放到哪台服务器上。</li></ul><h4 id="redis-集群投票机制"><a href="#redis-集群投票机制" class="headerlink" title="redis 集群投票机制"></a>redis 集群投票机制</h4><img src="57.png" width="50%"> <img src="59.png" width="80%"><h4 id="redis-搭建"><a href="#redis-搭建" class="headerlink" title="redis 搭建"></a>redis 搭建</h4><ol><li><p>环境搭建：</p><img src="60.png" width="80%"><ul><li>rubygems ruby 脚本管理工具。</li><li>redis-trib.rb 集群管理工具需要 redis-3.0.0.gem 这个 ruby 包。</li></ul></li><li><p>创建 6 个 redis 进程。</p><img src="61.png" width="50%"></li><li><p>cluster-enable 注释为是否打开 redis 集群。</p><img src="64.png" width="80%"></li><li><p>运行命令：</p><img src="62.png" width="80%"><ul><li><code>-- replicas 1</code> 参数为为每个主库设置一个从库。</li></ul></li><li><p>运行结果：</p><img src="63.png" width="80%"></li><li><p>连接</p><img src="66.png" width="80%"><ul><li><code>-c</code> 参数表示以集群方式连接 redis。</li></ul></li></ol><!-- rebuild by neat -->]]></content>
  </entry>
  <entry>
    <title>优秀网站</title>
    <url>/posts/52192/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><h1 id="网站导航"><a href="#网站导航" class="headerlink" title="网站导航"></a>网站导航</h1><table><thead><tr><th align="left">网站</th><th align="left">网址</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">Codrops</td><td align="left"><a href="https://tympanus.net/" target="_blank" rel="noopener">https://tympanus.net/</a></td><td align="left">1. Codrops 是一个网页设计和开发博客。<br>2. 发布关于最新网络趋势，技术和新可能性的文章和教程。</td></tr></tbody></table><h1 id="优秀网站推荐"><a href="#优秀网站推荐" class="headerlink" title="优秀网站推荐"></a>优秀网站推荐</h1><table><thead><tr><th align="left">网站</th><th align="left">网址</th></tr></thead><tbody><tr><td align="left">星巴克</td><td align="left"><a href="https://www.starbucks.com.cn/" target="_blank" rel="noopener">https://www.starbucks.com.cn/</a></td></tr><tr><td align="left">ant design</td><td align="left"><a href="https://ant.design/index-cn/" target="_blank" rel="noopener">https://ant.design/index-cn/</a></td></tr><tr><td align="left">Web前端工程师简历</td><td align="left"><a href="http://www.show08.com/" target="_blank" rel="noopener">http://www.show08.com/</a></td></tr><tr><td align="left">JaJian-博客园</td><td align="left"><a href="https://www.cnblogs.com/JaJian/" target="_blank" rel="noopener">https://www.cnblogs.com/JaJian/</a></td></tr></tbody></table><a id="more"></a><!-- rebuild by neat -->]]></content>
  </entry>
  <entry>
    <title>SEO</title>
    <url>/posts/30083/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><h1 id="常用搜索引擎指令"><a href="#常用搜索引擎指令" class="headerlink" title="常用搜索引擎指令"></a>常用搜索引擎指令</h1><table><thead><tr><th align="left">指令</th><th align="left">作用</th><th align="left">补充</th></tr></thead><tbody><tr><td align="left">site:域名</td><td align="left">搜索某个域名下的所有文件(注意：文件须是搜索引擎收录的文件)。</td><td align="left"></td></tr><tr><td align="left">site:域名 关键字</td><td align="left">搜索特定域名下匹配到关键字的内容。</td><td align="left"></td></tr><tr><td align="left">双引号</td><td align="left">把搜索词放在双引号，代表完全匹配搜索。</td><td align="left"></td></tr><tr><td align="left">减号(-)</td><td align="left">搜索不包含减号后面的词的页面。</td><td align="left">减号前面有空格而后面没有空格。</td></tr><tr><td align="left">星号(*)</td><td align="left">*号代表了任何文字，例如：郭*纲。</td><td align="left">百度不支持。</td></tr><tr><td align="left">inurl:</td><td align="left">用于搜索查询词出现在URL(链接)中的页面。</td><td align="left"></td></tr><tr><td align="left">inanchor:</td><td align="left">这个指令返回的结果是导入链接锚文字中包含搜索词的页面。</td><td align="left">百度不支持该指令。</td></tr><tr><td align="left">intitle:</td><td align="left">该指令返回的是页面title中包含关键词的页面。</td><td align="left"></td></tr><tr><td align="left">alltitle:</td><td align="left">该标签返回的结果是页面标题中包含<strong>多组</strong>关键词的文件。</td><td align="left"></td></tr><tr><td align="left">allinurl:</td><td align="left">与alltitle类似。</td><td align="left"></td></tr><tr><td align="left">filetype:</td><td align="left">该指令用于特定的文件格式。</td><td align="left">百度支持下面几种文件：pdf、doc、xls、ppt、rtf、all。其中的all表示搜索百度所有支持的文件类型。Google则支持所有能索引的文件格式，包括HTML、PHP等。</td></tr><tr><td align="left">link:</td><td align="left">搜索某个url的反向链接，既包括内部链接，也包括外部链接。</td><td align="left">百度则不支持该指令。</td></tr></tbody></table><a id="more"></a><!-- rebuild by neat -->]]></content>
  </entry>
  <entry>
    <title>LESS</title>
    <url>/posts/34939/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="浏览器端"><a href="#浏览器端" class="headerlink" title="浏览器端"></a>浏览器端</h2><ol><li><p>必须在服务器上运行。</p></li><li><p>cdn 方式引入。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/less.js/3.9.0/less.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>引入 less 文件。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet/less"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"styles.less"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>link 标签放在头部。</p></li></ol><a id="more"></a><h2 id="vue-cli-环境"><a href="#vue-cli-环境" class="headerlink" title="vue-cli 环境"></a>vue-cli 环境</h2><p>安装 less 和 less-loader。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install less less-loader --save-dev</span><br></pre></td></tr></table></figure><p>配置 build/webpack.base.conf.js 文件中的 rules 属性。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//  此处省略无数行，已有的的其他的内容</span></span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            <span class="comment">//  此处省略无数行，已有的的其他的规则</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                loader: <span class="string">"style-loader!css-loader!less-loader"</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，在代码中的 style 标签中 加上 lang=”less” 属性即可。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="comment">/* less 代码 */</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="引入全局变量"><a href="#引入全局变量" class="headerlink" title="引入全局变量"></a>引入全局变量</h3><ol><li><p>安装 sass-resources-loader。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install sass-resources-loader --save-dev</span><br></pre></td></tr></table></figure></li><li><p>build/utils.js 中找到 generateLoaders 函数。</p></li><li><p>在 generateLoaders 函数上下文添加以下函数。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lessResourceLoader</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> loaders = [</span><br><span class="line">        cssLoader,</span><br><span class="line">        <span class="string">'less-loader'</span>,</span><br><span class="line">        &#123;</span><br><span class="line">            loader: <span class="string">'sass-resources-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">                resources: [</span><br><span class="line">                    path.resolve(__dirname, <span class="string">'../src/styles/quanju.less'</span>), <span class="comment">// 全局 less 文件配置。</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">if</span> (options.extract) &#123;</span><br><span class="line">        <span class="keyword">return</span> ExtractTextPlugin.extract(&#123;</span><br><span class="line">            use: loaders,</span><br><span class="line">            fallback: <span class="string">'vue-style-loader'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">'vue-style-loader'</span>].concat(loaders)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>path.resolve 中的路径改成对应全局 less 文件路径。</p></li></ol><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>定义变量</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@color:</span> <span class="number">#4D926F</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#header</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">@color</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">@color</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选择器</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@selector:</span> <span class="string">~".class"</span> div;</span><br><span class="line"></span><br><span class="line"><span class="variable">@&#123;selector&#125;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#2ECCFA</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 编译后 */</span></span><br><span class="line"><span class="selector-class">.class</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#2ECCFA</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>URL</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@images:</span> <span class="string">"http://www.yiibai.com"</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.myclass</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">background </span>: url(<span class="string">"@&#123;images&#125;/less/images/birds.jpg"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>属性</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@my-property:</span> color;</span><br><span class="line"><span class="selector-class">.myclass</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">background-</span><span class="variable">@&#123;my-property&#125;</span>: <span class="selector-id">#81F7D8</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>变量复用</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@s:</span> <span class="variable">@s1</span> ul;</span><br><span class="line"><span class="variable">@s1:</span> <span class="string">~".div-ul"</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">nav</span> <span class="variable">@&#123;s1&#125;</span>, <span class="variable">@&#123;s&#125;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="混合（类）"><a href="#混合（类）" class="headerlink" title="混合（类）"></a>混合（类）</h1><p>混合可以是 id 或 class，但不能是标签元素。</p><p>混合可以将一个定义好的 class A 轻松的引入到另一个 class B 中，从而简单实现 class B 继承 class A 中的所有属性。</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.rounded-corners</span> (<span class="variable">@radius</span>: <span class="number">5px</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="variable">@radius</span>;</span><br><span class="line">  <span class="attribute">-webkit-border-radius</span>: <span class="variable">@radius</span>;</span><br><span class="line">  <span class="attribute">-moz-border-radius</span>: <span class="variable">@radius</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#header</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.rounded-corners</span>;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们还可以带参数地调用，就像使用函数一样。</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#footer</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.rounded-corners</span>(<span class="number">10px</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="嵌套（选择器）"><a href="#嵌套（选择器）" class="headerlink" title="嵌套（选择器）"></a>嵌套（选择器）</h1><p>我们可以在一个选择器中嵌套另一个选择器来实现继承，这样很大程度减少了代码量，并且代码看起来更加的清晰。</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#header</span> &#123;</span><br><span class="line">    <span class="selector-tag">h1</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">26px</span>;</span><br><span class="line">        <span class="attribute">font-weight</span>: bold;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">p</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">        <span class="selector-tag">a</span> &#123; </span><br><span class="line">            </span><br><span class="line">            <span class="attribute">text-decoration</span>: none;</span><br><span class="line">            <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="attribute">border-width</span>: <span class="number">1px</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h2><ul><li><p>&amp; 符号表示父级元素。</p></li><li><p>&amp;_2 编译后为 wrap_2。</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line"></span><br><span class="line">　　<span class="selector-tag">&amp;</span><span class="selector-tag">_2</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">display</span>: none;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>&amp; &gt; div 编译后为 <code>#app &gt; div</code>。</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#app</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">&amp;</span> &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: red;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">p</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">background-color</span>: green;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 p 标签编译后为 <code>#app p</code>。和 &amp; p 编译的结果一样。</p><ul><li>分组选择器中嵌套 &amp;，则 &amp; 表示分组选择器中的所有元素。<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>, <span class="selector-tag">span</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">&amp;</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 编译后 */</span></span><br><span class="line"><span class="selector-tag">p</span>, <span class="selector-tag">span</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>extend 中参数不能为变量。</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parentClass</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.subClassOne</span>&#123;</span><br><span class="line">	<span class="selector-tag">&amp;</span><span class="selector-pseudo">:extend(.parentClass)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 和上面的写法等价 */</span></span><br><span class="line"><span class="selector-class">.subClassTwo</span><span class="selector-pseudo">:extend(.parentClass)</span>&#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 写法错误 */</span></span><br><span class="line"><span class="variable">@myClass:</span>.redColor;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.subClass</span><span class="selector-pseudo">:extend(.redColor)</span>&#123;&#125;	<span class="comment">// extend 参考的选择器名在参考处为变量，错误。</span></span><br><span class="line"><span class="selector-class">.subClass</span><span class="selector-pseudo">:extend(</span><span class="variable">@&#123;myClass&#125;</span>)&#123;&#125;  <span class="comment">// extend内选择器名为变量，错误。</span></span><br></pre></td></tr></table></figure><h1 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h1><p>转义字符 ~。</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">color</span>: <span class="string">~"green"</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 编译后 */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
  </entry>
  <entry>
    <title>微信小程序</title>
    <url>/posts/35506/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><h1 id="微信官方文档网站"><a href="#微信官方文档网站" class="headerlink" title="微信官方文档网站"></a>微信官方文档网站</h1><p><a href="https://developers.weixin.qq.com/doc/" target="_blank" rel="noopener">微信官方文档</a></p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/" target="_blank" rel="noopener">小程序</a></p><a id="more"></a><h1 id="WXML"><a href="#WXML" class="headerlink" title="WXML"></a>WXML</h1><p>数据绑定</p><ul><li><p>组件属性(需要在双引号之内)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;view id=&quot;item-&#123;&#123;id&#125;&#125;&quot;&gt; &lt;/view&gt;</span><br></pre></td></tr></table></figure></li><li><p>关键字 true 和 false (需要在双引号之内)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;checkbox checked=&quot;&#123;&#123;false&#125;&#125;&quot;&gt; &lt;/checkbox&gt;</span><br></pre></td></tr></table></figure></li></ul><p>列表渲染</p><ul><li>默认数组的当前项的下标变量名默认为 index，数组当前项的变量名默认为 item。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;view wx:for=&quot;&#123;&#123;array&#125;&#125;&quot;&gt;</span><br><span class="line">    &#123;&#123;index&#125;&#125;: &#123;&#123;item.message&#125;&#125;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure></li></ul><p>条件渲染</p><ul><li><p>在框架中，使用 wx:if=”” 来判断是否需要渲染该代码块。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;view wx:if=&quot;&#123;&#123;length &gt; 5&#125;&#125;&quot;&gt; 1 &lt;/view&gt;</span><br><span class="line">&lt;view wx:elif=&quot;&#123;&#123;length &gt; 2&#125;&#125;&quot;&gt; 2 &lt;/view&gt;</span><br><span class="line">&lt;view wx:else&gt; 3 &lt;/view&gt;</span><br></pre></td></tr></table></figure></li><li><p>wx:if 和 hidden<br>wx:if 有更高的<strong>切换</strong>消耗而 hidden 有更高的<strong>初始</strong>渲染消耗。</p></li></ul><h1 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h1><p>小程序根目录下的 app.json 文件用来对微信小程序进行全局配置。</p><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">必填</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">pages</td><td align="left">string[]</td><td align="left">是</td><td align="left">页面路径列表</td></tr><tr><td align="left">window</td><td align="left">Object</td><td align="left">否</td><td align="left">全局的默认窗口表现</td></tr><tr><td align="left">tabBar</td><td align="left">Object</td><td align="left">否</td><td align="left">底部 tab 栏的表现</td></tr></tbody></table><h2 id="pages"><a href="#pages" class="headerlink" title="pages"></a>pages</h2><p>用于指定小程序由哪些页面组成，每一项都对应一个页面的路径（含文件名）信息。</p><p>文件名不需要写文件后缀，框架会自动去寻找对于位置的<code>.json</code>, <code>.js</code>, <code>.wxml</code>, <code>.wxss</code>四个文件进行处理。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    &quot;pages&quot;: [</span><br><span class="line"></span><br><span class="line">        &quot;pages/index/index&quot;,</span><br><span class="line">        &quot;pages/logs/logs&quot;</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="window"><a href="#window" class="headerlink" title="window"></a>window</h2><p>用于设置小程序的状态栏、导航条、标题、窗口背景色。</p><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">默认值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">navigationBarTitleText</td><td align="left">string</td><td align="left">&nbsp;</td><td align="left">导航栏标题文字内容</td></tr><tr><td align="left">navigationBarTextStyle</td><td align="left">string</td><td align="left">white</td><td align="left">导航栏标题颜色，仅支持 black / white</td></tr></tbody></table><h2 id="tabBar"><a href="#tabBar" class="headerlink" title="tabBar"></a>tabBar</h2><p>如果小程序是一个多 tab 应用（客户端窗口的底部或顶部有 tab 栏可以切换页面），可以通过 tabBar 配置项指定 tab 栏的表现，以及 tab 切换时显示的对应页面。</p><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">必填</th><th align="left">默认值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">list</td><td align="left">Array</td><td align="left">是</td><td align="left">&nbsp;</td><td align="left">tab 的列表，详见 list 属性说明，最少 2 个、最多 5 个 tab</td></tr></tbody></table><h3 id="list属性说明"><a href="#list属性说明" class="headerlink" title="list属性说明"></a>list属性说明</h3><p>list 接受一个数组，只能配置最少 2 个、最多 5 个 tab。tab 按数组的顺序排序，每个项都是一个<strong>对象</strong>。</p><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">必填</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">pagePath</td><td align="left">string</td><td align="left">是</td><td align="left">页面路径，<strong>必须在 pages 中先定义</strong></td></tr><tr><td align="left">text</td><td align="left">string</td><td align="left">是</td><td align="left">tab 上按钮文字</td></tr><tr><td align="left">iconPath</td><td align="left">string</td><td align="left">否</td><td align="left">图片路径，icon 大小限制为 40kb，建议尺寸为 81px * 81px，<strong>不支持网络图片</strong>。当 position 为 top 时，不显示 icon。</td></tr><tr><td align="left">selectedIconPath</td><td align="left">string</td><td align="left">否</td><td align="left">选中时的图片路径。<strong>与 iconPath 属性特性一致</strong>。</td></tr></tbody></table><h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><h2 id="小程序生命周期"><a href="#小程序生命周期" class="headerlink" title="小程序生命周期"></a>小程序生命周期</h2><p>App(Object object)</p><ul><li>注册小程序。接受一个 Object 参数，其指定小程序的生命周期回调等。</li><li>App() 必须在 app.js 中调用，必须调用且只能调用一次。不然会出现无法预期的后果。</li><li>Object 参数<table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">必填</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">onLaunch</td><td align="left">function</td><td align="left">否</td><td align="left">监听小程序初始化。</td></tr><tr><td align="left">onShow</td><td align="left">function</td><td align="left">否</td><td align="left">监听小程序启动或切前台。</td></tr><tr><td align="left">onHide</td><td align="left">function</td><td align="left">否</td><td align="left">监听小程序切后台。</td></tr></tbody></table></li></ul><p>AppObject getApp(Object object)</p><ul><li>获取到小程序全局唯一的 App 实例。</li><li>示例<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var appInstance = getApp()</span><br><span class="line">console.log(appInstance.globalData) // I am global data</span><br></pre></td></tr></table></figure></li></ul><h2 id="页面生命周期"><a href="#页面生命周期" class="headerlink" title="页面生命周期"></a>页面生命周期</h2><p>Page(Object object)</p><ul><li>注册小程序中的一个页面。接受一个 Object 类型参数，其指定页面的初始数据、生命周期回调、事件处理函数等。</li><li>Object 参数<table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">说明</th><th align="left">补充</th></tr></thead><tbody><tr><td align="left">data</td><td align="left">Object</td><td align="left">页面的初始数据</td><td align="left"></td></tr><tr><td align="left">onLoad</td><td align="left">function</td><td align="left">监听页面加载</td><td align="left"></td></tr><tr><td align="left">onShow</td><td align="left">function</td><td align="left">监听页面显示</td><td align="left"></td></tr><tr><td align="left">onReady</td><td align="left">function</td><td align="left">监听页面初次渲染完成</td><td align="left"></td></tr><tr><td align="left">onHide</td><td align="left">function</td><td align="left">监听页面隐藏</td><td align="left"></td></tr><tr><td align="left">onPullDownRefresh</td><td align="left">function</td><td align="left">监听用户下拉动作</td><td align="left">需要在app.json的window选项中或页面配置中开启enablePullDownRefresh。</td></tr><tr><td align="left">onReachBottom</td><td align="left">function</td><td align="left">页面上拉触底事件的处理函数</td><td align="left">需要开启enablePullDownRefresh。</td></tr></tbody></table></li></ul><h1 id="文件作用域"><a href="#文件作用域" class="headerlink" title="文件作用域"></a>文件作用域</h1><p>在 JavaScript 文件中声明的变量和函数只在该文件中有效；不同的文件中可以声明相同名字的变量和函数，不会互相影响。</p><p>通过全局函数 getApp 可以获取全局的应用实例，如果需要全局的数据可以在 App() 中设置。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// app.js</span><br><span class="line"></span><br><span class="line">App(&#123;</span><br><span class="line"></span><br><span class="line">  globalData: 1</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// a.js</span><br><span class="line"></span><br><span class="line">var app = getApp()</span><br><span class="line"></span><br><span class="line">app.globalData++</span><br></pre></td></tr></table></figure><h1 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h1><p>可以将一些公共的代码抽离成为一个单独的 js 文件，作为一个模块。模块只有通过 <code>module.exports</code> 或者 <code>exports</code> 才能对外暴露接口。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// common.js</span><br><span class="line"></span><br><span class="line">function sayHello(name) &#123;</span><br><span class="line"></span><br><span class="line">    console.log(`Hello $&#123;name&#125; !`)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">function sayGoodbye(name) &#123;</span><br><span class="line"></span><br><span class="line">    console.log(`Goodbye $&#123;name&#125; !`)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports.sayHello = sayHello</span><br><span class="line">exports.sayGoodbye = sayGoodbye</span><br></pre></td></tr></table></figure><p><strong>在需要使用这些模块的文件中</strong>，使用 require 将公共代码引入。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var common = require(&apos;common.js&apos;)</span><br><span class="line"></span><br><span class="line">Page(&#123;</span><br><span class="line"></span><br><span class="line">    helloMINA: function() &#123;</span><br><span class="line"></span><br><span class="line">        common.sayHello(&apos;MINA&apos;)</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    goodbyeMINA: function() &#123;</span><br><span class="line"></span><br><span class="line">        common.sayGoodbye(&apos;MINA&apos;)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
  </entry>
  <entry>
    <title>Markdown</title>
    <url>/posts/17683/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><ul><li>Markdown 是一种纯文本格式的标记语言。</li><li>通过简单的标记语法，它可以使普通文本内容具有一定的格式。</li><li>Markdown 兼容 HTML 语法。</li></ul><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><table><thead><tr><th align="left">名称</th><th align="left">示例</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">标题</td><td align="left"><code>#</code></td><td align="left">1. 在想要设置为标题的文字前面加 <code>#</code> 来表示。<br>2. 一个 <code>#</code> 是一级标题，二个 <code>#</code> 是二级标题，以此类推，支持六级标题。<br>3. 标准语法一般在 <code>#</code> 后跟个空格再写文字。</td></tr><tr><td align="left">换行</td><td align="left"></td><td align="left">行与行之间留一空行或行末尾留两个空格在换行。</td></tr><tr><td align="left">斜体</td><td align="left"><code>*斜体*</code></td><td align="left">倾斜的文字左右分别用<strong>一个</strong> <code>*</code> 号包起来。</td></tr><tr><td align="left">加粗</td><td align="left"><code>**加粗**</code></td><td align="left">加粗的文字左右分别用<strong>两个*</strong>号包起来。</td></tr><tr><td align="left">斜体加粗</td><td align="left"><code>***斜体加粗***</code></td><td align="left">倾斜和加粗的文字左右分别用<strong>三个*</strong>号包起来。</td></tr><tr><td align="left">删除线</td><td align="left"><code>~~删除线~~</code></td><td align="left">删除线的文字左右分别用两个 <code>~~</code> 号包起来。</td></tr><tr><td align="left">引用</td><td align="left"><code>&gt;</code></td><td align="left">1. 在引用的文字前加 <code>&gt;</code> 即可。<br>2. 引用也可以嵌套，如加两个 <code>&gt;&gt;</code> 或三个 <code>&gt;&gt;&gt;</code>，可以<strong>无限</strong>引用下去。</td></tr><tr><td align="left">分割线</td><td align="left"><code>---</code></td><td align="left">三个或者三个以上的 <code>-</code> 或者 <code>*</code> 都可以。</td></tr><tr><td align="left">图片</td><td align="left"><code>![alt](图片地址 &quot;title&quot;)</code></td><td align="left">1. alt 就是显示在图片下面的文字，相当于对图片内容的解释。<br>2. title 是图片的标题，当鼠标移到图片上时显示的内容，title 可加可不加。<br>3. 可简写成 <code>![](图片地址)</code> 形式。</td></tr><tr><td align="left">单行代码</td><td align="left"><code>单行代码</code></td><td align="left">代码之间分别用一个反引号包起来。单行代码(行内代码)不会默认换行。</td></tr><tr><td align="left">代码块</td><td align="left"></td><td align="left">代码之间分别用三个反引号包起来，且两边的反引号单独占一行。</td></tr><tr><td align="left">无序列表</td><td align="left"><code>- 列表内容</code></td><td align="left">1. 无序列表用 -、+、* 任何一种都可以。<br>2. -、+、* 跟内容之间都要有一个空格。</td></tr><tr><td align="left">有序列表</td><td align="left"><code>1. 列表内容</code></td><td align="left">1. 语法：序号加点。<br>2. 序号跟内容之间要有空格。<br>3. 序号的值可以相同，Markdown 渲染页面时序号会渲染成递增的形式。</td></tr><tr><td align="left">列表嵌套</td><td align="left"></td><td align="left">在父层的基础上，子层在开头加两个空格或 1 个 Tab 即可。</td></tr><tr><td align="left">超链接</td><td align="left"><code>[超链接名](超链接地址 &quot;title&quot;)</code></td><td align="left">1. title 可加可不加。</td></tr><tr><td align="left">内部链接</td><td align="left"><code>[some words](#title-xxxx-1)</code></td><td align="left">1. <code>#</code> 后面紧跟已经存在的多级标题。<br>2. 链接名需要全部小写。<br>3. 空格用 <code>-</code> 连接。<br>4. 可以用 <code>\-</code> 转义。</td></tr><tr><td align="left">键盘文本</td><td align="left"><code>&lt;kbd&gt;键盘按键&lt;/kbd&gt;</code></td><td align="left">kbd 标签。</td></tr></tbody></table><a id="more"></a><h2 id="HTML-调整图片大小"><a href="#HTML-调整图片大小" class="headerlink" title="HTML 调整图片大小"></a>HTML 调整图片大小</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src = &quot;图片地址&quot; width = &quot;25%&quot;&gt;</span><br></pre></td></tr></table></figure><ul><li>调整图片大小，Markdown 语法不支持调整图片大小。</li><li>可是 Markdown 兼容 HTML 语法，可以用 img 标签来插入图片。</li></ul><h2 id="高亮显示"><a href="#高亮显示" class="headerlink" title="高亮显示"></a>高亮显示</h2><table><thead><tr><th align="left">支持高亮显示的语言</th><th align="left">关键字</th></tr></thead><tbody><tr><td align="left">Shell</td><td align="left">bash, shell</td></tr><tr><td align="left">C</td><td align="left">cpp, c</td></tr><tr><td align="left">C#</td><td align="left">c#, c-sharp, csharp</td></tr><tr><td align="left">XML</td><td align="left">xml, xhtml, xslt, html</td></tr><tr><td align="left">CSS</td><td align="left">css</td></tr><tr><td align="left">Java</td><td align="left">java</td></tr><tr><td align="left">JavaScript</td><td align="left">js, jscript, javascript</td></tr><tr><td align="left">PHP</td><td align="left">php</td></tr><tr><td align="left">Python</td><td align="left">py, python</td></tr><tr><td align="left">SASS &amp; SCSS</td><td align="left">sass, scss</td></tr><tr><td align="left">SQL</td><td align="left">sql</td></tr><tr><td align="left">GO</td><td align="left">go, golang</td></tr></tbody></table><ul><li>代码块支持高亮显示，而单行代码不支持。</li><li>该表格只记录了主流语言，Markdown 还支持其他语言高亮显示。</li><li>“```html” 表示 html 代码高亮显示。</li></ul><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">表头 | 表头 | 表头</span><br><span class="line">:-: | :-: | :-:</span><br><span class="line">内容 | 内容 | 内容</span><br><span class="line">内容 | 内容 | 内容</span><br><span class="line">内容 | 内容 | 内容</span><br></pre></td></tr></table></figure><ol><li><code>|</code>、<code>-</code>、<code>:</code> 之间的多余空格会被忽略，不影响布局。</li><li>默认标题栏居中对齐，内容居左对齐。</li><li><code>-:</code> 表示内容和标题栏居右对齐，<code>:-</code> 表示内容和标题栏居左对齐，<code>:-:</code> 表示内容和标题栏居中对齐。</li><li>内容和 <code>|</code> 之间的多余空格会被忽略，每行第一个 <code>|</code> 和最后一个 <code>|</code> 可以省略，<code>-</code> 的数量至少有一个。</li></ol><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><table><thead><tr><th align="left">转义字符</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>&amp;lt;</code></td><td align="left">左尖括号。</td></tr><tr><td align="left"><code>&amp;gt;</code></td><td align="left">右尖括号。</td></tr><tr><td align="left"><code>&amp;nbsp;</code></td><td align="left">空格。</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
  </entry>
  <entry>
    <title>Git入门教程</title>
    <url>/posts/29207ea7/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>所有的版本控制系统，其实只能跟踪文本文件的改动，比如 TXT 文件、网页、所有的程序代码等等。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从 100KB 改成了 120KB。Microsoft 的 Word 格式是二进制格式，因此，版本控制系统是没法跟踪 Word 文件的改动的。</p><p>工作区：就是你在电脑里能看到的目录。</p><p>版本库：工作区有一个隐藏目录 .git，这个不算工作区，而是 Git 的版本库。版本库里存了很多东西，其中最重要的就是称为 stage（或者叫 index）的暂存区。</p><p>还有 Git 为我们自动创建的第一个分支 master，以及指向 master 的一个指针叫 HEAD。</p><a id="more"></a><h2 id="配置姓名和邮箱"><a href="#配置姓名和邮箱" class="headerlink" title="配置姓名和邮箱"></a>配置姓名和邮箱</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;Your Name&quot;</span><br><span class="line">git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure><p><code>--global</code> 参数表示这台机器上所有的 Git 仓库都会使用这个配置。当然也可以对某个仓库指定不同的用户名和 Email 地址。</p><h2 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h2><table><thead><tr><th align="left">命令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">git init</td><td align="left">在当前目录下会自动生成 .git 隐藏文件夹，该隐藏文件夹就是 git 版本库。</td></tr><tr><td align="left"><code>git add &lt;file&gt;</code></td><td align="left">将文件添加到暂存区（将目标文件加入跟踪列表）。</td></tr><tr><td align="left"><code>git add -A</code></td><td align="left">将所有文件添加到存储区。</td></tr><tr><td align="left"><code>git add -f App.class</code></td><td align="left">强制添加。被 git 忽略的文件也可以强制添加。</td></tr><tr><td align="left"><code>git commit –m &quot;message&quot;</code></td><td align="left">将暂存区文件提交到版本库。<code>-m</code> 参数为提交说明。</td></tr><tr><td align="left">git status</td><td align="left">显示工作目录和暂存区的状态。</td></tr><tr><td align="left"><code>git log --pretty=oneline</code></td><td align="left">显示提交日志。<code>--pretty=oneline</code> 只显示 commit id 和描述。</td></tr><tr><td align="left">git reflog</td><td align="left">查看命令历史。</td></tr><tr><td align="left"><code>git diff &lt;file&gt;</code></td><td align="left">比较当前文件和暂存区文件差异。</td></tr><tr><td align="left"><code>git diff HEAD [&lt;path&gt;...]</code></td><td align="left">比较工作区与最新本地版本库。</td></tr><tr><td align="left"><code>git reset --hard HEAD^</code></td><td align="left">将当前 HEAD 复位到指定状态。HEAD 表示当前版本，<code>HEAD^</code> 表示上一个版本，<code>HEAD^^</code> 表示上上一个版本，<code>HEAD~100</code> 表示前 100 个版本。<br>Git 的版本回退速度非常快，因为 Git 在内部有个指向当前版本的 HEAD 指针。当你回退版本的时候，Git 仅仅是改变 HEAD 指向。</td></tr><tr><td align="left"><code>git reset HEAD &lt;file&gt;</code></td><td align="left">把暂存区的修改撤销掉，重新放回工作区。</td></tr><tr><td align="left"><code>git checkout --file</code></td><td align="left">文件在工作区的修改全部撤销。文件没有被放到暂存区，撤销修改就回到和版本库一模一样的状态；文件已经添加到暂存区后，撤销修改就回到添加到暂存区后的状态。</td></tr><tr><td align="left">git rm file</td><td align="left">删除文件，同时还会将这个删除操作记录放到缓存区。</td></tr></tbody></table><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><table><thead><tr><th align="left">命令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">git checkout master</td><td align="left">切换分支。</td></tr><tr><td align="left">git branch</td><td align="left">查看当前有哪些分支。当前分支前面有个星号。</td></tr><tr><td align="left">git branch dev</td><td align="left">创建分支 dev。</td></tr><tr><td align="left">git branch -d dev</td><td align="left">删除 dev 分支。</td></tr><tr><td align="left">git branch -D dev</td><td align="left">强制删除 dev 分支。</td></tr><tr><td align="left">git branch dev origin/dev</td><td align="left">创建远程 origin 的 dev 分支到本地。默认克隆只有master分支。</td></tr><tr><td align="left">git checkout -b dev</td><td align="left">创建并切换到 dev 分支。</td></tr><tr><td align="left">git merge dev</td><td align="left">将当前分支合并到 dev 分支。</td></tr><tr><td align="left"><code>git merge --no-ff -m &quot;merge with no-ff&quot; dev</code></td><td align="left">将当前分支合并到 dev 分支。<code>--no-ff</code> 参数，表示禁用快速模式。<br>普通模式：当前分支合并时会提交到版本库，不是简单的变更指针指向。<br>快速模式：把当前分支指向指定分支。</td></tr><tr><td align="left">git log –graph</td><td align="left">查看分支合并图。</td></tr></tbody></table><h3 id="分支策略"><a href="#分支策略" class="headerlink" title="分支策略"></a>分支策略</h3><p>master 分支称为主分支，HEAD 表示指向当前分支。</p><p>master 分支应该是非常稳定的，dev 分支是不稳定的。1.0 版本发布时，再把 dev 分支合并到 master 上，在 master 分支发布 1.0 版本。每个人都在 dev 分支上干活，每个人都有自己的分支，时不时地往 dev 分支上合并。</p><p>在 master 分支修复 bug，必须新建 bug 分支，修复完切换到 master 分支合并 bug 分支。</p><p>在 dev 分支上开发新功能，新建 Feature 分支，新功能开发完毕切换到 dev 分支合并，如果不想合并必须强制删除。</p><p>总结：</p><ul><li>master 分支是主分支，因此要时刻与远程同步。</li><li>dev 分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步。</li><li>bug 分支只用于在本地修复 bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个 bug。</li><li>feature 分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。</li></ul><h2 id="status"><a href="#status" class="headerlink" title="status"></a>status</h2><table><thead><tr><th align="left">命令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">git stash</td><td align="left">会把所有未提交的修改（包括暂存的和非暂存的）都保存起来。便于切换其他分支，修改其它分支的代码。</td></tr><tr><td align="left">git stash list</td><td align="left">列出通过 stash 储藏的修改。</td></tr><tr><td align="left">git stash apply stash@{0}</td><td align="left">恢复 stash@{0}。</td></tr><tr><td align="left">git stash drop stash@{0}</td><td align="left">删除 stash@{0}。</td></tr><tr><td align="left">git stash pop</td><td align="left">恢复的同时把stash内容删除。</td></tr></tbody></table><h2 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h2><table><thead><tr><th align="left">命令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>git tag &lt;name&gt;</code></td><td align="left">给最近的 commit 打上标签。tag 就是一个让人容易记住的有意义的名字，它跟某个 commit 绑在一起。</td></tr><tr><td align="left">git tag v0.9 f52c633</td><td align="left">给指定 commit id 打上标签。</td></tr><tr><td align="left">git tag</td><td align="left">显示所有标签。</td></tr></tbody></table><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><table><thead><tr><th align="left">命令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>git remote add [shortname] [url]</code></td><td align="left">添加远程仓库关联。shortname 只能对应一个 url。<br>注意：推送代码前必须先关联远程仓库。</td></tr><tr><td align="left">git remote</td><td align="left">不带参数，列出已经存在的远程连接。</td></tr><tr><td align="left">git remote –v</td><td align="left">列出远程连接，并显示对应 url。</td></tr><tr><td align="left"><code>git remote remove &lt;name&gt;</code></td><td align="left">删除远程仓库。</td></tr><tr><td align="left"><code>git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</code></td><td align="left">将本地分支的更新，推送到远程主机。</td></tr><tr><td align="left">git push origin master</td><td align="left">将本地的 master 分支推送到 origin 主机的 master 分支。如果 master 不存在，则会被新建。</td></tr><tr><td align="left">git push -u origin master</td><td align="left">-u 选项指定一个默认主机，这样后面就可以不加任何参数使用 git push。</td></tr><tr><td align="left">git push origin :master</td><td align="left">删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。</td></tr><tr><td align="left">git push –all origin</td><td align="left">推送所有分支。</td></tr><tr><td align="left">git push -f origin dev:master</td><td align="left">强制推送。</td></tr><tr><td align="left"><code>git clone &lt;版本库的网址&gt;</code></td><td align="left">本地主机生成一个目录，与远程主机的版本库同名。</td></tr><tr><td align="left"><code>git clone &lt;版本库的网址&gt; &lt;本地目录名&gt;</code></td><td align="left">如果要指定不同的目录名，可以将目录名作为git clone命令的第二个参数。</td></tr><tr><td align="left"><code>git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</code></td><td align="left">拉取远程主机某个分支的更新，再与本地的指定分支合并。</td></tr><tr><td align="left"><code>git fetch &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</code></td><td align="left"><code>git fetch</code> 和 <code>git pull</code> 类似，但不会自动合并当前分支。</td></tr><tr><td align="left"><code>git branch --set-upstream debug origin/debug</code></td><td align="left">将本地 bug 分支与远程的 bug 分支关联。解决拉取时 git 提示 <code>no tracking information</code> 的问题。</td></tr></tbody></table><h3 id="克隆和拉取"><a href="#克隆和拉取" class="headerlink" title="克隆和拉取"></a>克隆和拉取</h3><p>clone 是本地没有 repository 时，将远程 repository 整个下载过来</p><p>pull 是本地有 repository 时，将远程 repository 里新的 commit 数据(如有的话)下载过来，并且与本地代码 merge。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>开发工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Git忽略特殊文件</title>
    <url>/posts/d336d77b/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><p>在 Git 工作区的根目录下创建一个特殊的 .gitignore 文件。忽略指定文件：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">test.md</span><br><span class="line">index.html</span><br></pre></td></tr></table></figure><p>如果要忽略某一类文件，内容如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*.class</span><br><span class="line">*.html</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git Bash 通过 SSH 连接远程服务器</title>
    <url>/posts/99a22762/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><p>Git Bash 输入 <code>ssh root@192.168.1.102</code> 命令，接着输入密码即可连接远程服务器。</p><p>root 为用户名，@ 符号紧跟 IP 地址。</p><p><code>Ctrl + D</code> 退出连接。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>放弃本地修改并强制拉取更新</title>
    <url>/posts/8c4ee50a/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git fetch --all</span><br><span class="line">git reset --hard origin/master</span><br></pre></td></tr></table></figure><p><code>git fetch</code> 指令是下载远程仓库最新内容，不做合并。</p><p><code>git reset</code> 指令把HEAD指向master最新版本。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架集</title>
    <url>/posts/49995/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><h1 id="静态资源公共库"><a href="#静态资源公共库" class="headerlink" title="静态资源公共库"></a>静态资源公共库</h1><table><thead><tr><th align="left">公共库</th><th align="left">网址</th></tr></thead><tbody><tr><td align="left">BootCDN</td><td align="left"><a href="https://www.bootcdn.cn/" target="_blank" rel="noopener">https://www.bootcdn.cn/</a></td></tr><tr><td align="left">腾讯网静态资源公共库</td><td align="left"><a href="https://libs.qq.com/" target="_blank" rel="noopener">https://libs.qq.com/</a></td></tr><tr><td align="left">字节跳动静态资源公共库</td><td align="left"><a href="http://cdn.bytedance.com/" target="_blank" rel="noopener">http://cdn.bytedance.com/</a></td></tr></tbody></table><h1 id="代码托管平台-npm"><a href="#代码托管平台-npm" class="headerlink" title="代码托管平台 - npm"></a>代码托管平台 - npm</h1><table><thead><tr><th align="left">代码托管平台</th><th align="left">网址</th></tr></thead><tbody><tr><td align="left">npm</td><td align="left"><a href="https://www.npmjs.com/" target="_blank" rel="noopener">https://www.npmjs.com/</a></td></tr></tbody></table><h1 id="JavaScript-库"><a href="#JavaScript-库" class="headerlink" title="JavaScript 库"></a>JavaScript 库</h1><table><thead><tr><th align="left">库名</th><th align="left">网址</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">JQuery</td><td align="left"><a href="https://jquery.com/" target="_blank" rel="noopener">https://jquery.com/</a></td><td align="left"></td></tr><tr><td align="left">Zepto</td><td align="left"><a href="http://www.zeptojs.cn/" target="_blank" rel="noopener">http://www.zeptojs.cn/</a></td><td align="left">1. 轻量级兼容 jQuery 的 JavaScript 库。<br>2. Zepto.js 直接抛弃了低级浏览器（IE9 以下）的适配问题。<br>3. Zepto.js 在移动端被运用的更加广泛。</td></tr></tbody></table><a id="more"></a><h1 id="UI-框架"><a href="#UI-框架" class="headerlink" title="UI 框架"></a>UI 框架</h1><table><thead><tr><th align="left">框架</th><th align="left">网址</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">Bootstrap</td><td align="left"><a href="https://www.bootcss.com/" target="_blank" rel="noopener">https://www.bootcss.com/</a></td><td align="left">官网提供了CDN方式引入文件。</td></tr><tr><td align="left">Layui</td><td align="left"><a href="https://www.layui.com/" target="_blank" rel="noopener">https://www.layui.com/</a></td><td align="left">1. 该官网还提供了很多第三方扩展组件，还有免费的网站模板。<br>2. <a href="https://www.layuicdn.com/" target="_blank" rel="noopener">Layui免费CDN静态库</a></td></tr></tbody></table><h2 id="通过-CDN-静态资源公共库引入-Bootstrap"><a href="#通过-CDN-静态资源公共库引入-Bootstrap" class="headerlink" title="通过 CDN 静态资源公共库引入 Bootstrap"></a>通过 CDN 静态资源公共库引入 Bootstrap</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- Bootstrap --&gt;</span><br><span class="line">&lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- jQuery (Bootstrap 的所有 JavaScript 插件都依赖 jQuery，所以必须放在前边) --&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/jquery@1.12.4/dist/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 加载 Bootstrap 的所有 JavaScript 插件。你也可以根据需要只加载单个插件。 --&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="图标库"><a href="#图标库" class="headerlink" title="图标库"></a>图标库</h1><table><thead><tr><th align="left">图标库</th><th align="left">网址</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">Font Awesome</td><td align="left"><a href="http://fontawesome.dashgame.com/" target="_blank" rel="noopener">http://fontawesome.dashgame.com/</a></td><td align="left">一套绝佳的图标字体库和CSS框架。</td></tr></tbody></table><h1 id="动画库"><a href="#动画库" class="headerlink" title="动画库"></a>动画库</h1><table><thead><tr><th align="left">动画库</th><th align="left">网址</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">Animate.css</td><td align="left"><a href="https://daneden.github.io/animate.css/" target="_blank" rel="noopener">https://daneden.github.io/animate.css/</a></td><td align="left"></td></tr><tr><td align="left">WOW.js</td><td align="left"><a href="https://www.delac.io/wow/" target="_blank" rel="noopener">https://www.delac.io/wow/</a></td><td align="left">可以在网页滚动时，展示 css 动画，配合 Animate.css 使用。</td></tr><tr><td align="left">CountUp.js</td><td align="left"><a href="http://inorganik.github.io/countUp.js/" target="_blank" rel="noopener">http://inorganik.github.io/countUp.js/</a></td><td align="left">让数字以非常有趣的动画方式显示。</td></tr><tr><td align="left">particles.js</td><td align="left"><a href="https://github.com/VincentGarreau/particles.js" target="_blank" rel="noopener">https://github.com/VincentGarreau/particles.js</a></td><td align="left">制作网状粒子特效。</td></tr><tr><td align="left">three.js</td><td align="left"><a href="http://www.threejs.org/" target="_blank" rel="noopener">http://www.threejs.org/</a></td><td align="left">three.js 是 JavaScript 编写的 WebGL 第三方库。</td></tr><tr><td align="left">D3.js</td><td align="left"><a href="https://d3js.org/" target="_blank" rel="noopener">https://d3js.org/</a></td><td align="left">1. 操作 SVG 库。<br>2. <a href="https://blog.csdn.net/qq_34414916/article/details/80026029" target="_blank" rel="noopener">D3.js的v5版本入门教程</a></td></tr></tbody></table><h2 id="Animate-css-使用"><a href="#Animate-css-使用" class="headerlink" title="Animate.css 使用"></a>Animate.css 使用</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这边注意 div 里类名不分先后但是必须有 animated 和 动作类名, infinite 即为无限循环，默认为播放一次。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test"</span> <span class="attr">class</span>=<span class="string">"animated bounce infinite"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="WOW-js"><a href="#WOW-js" class="headerlink" title="WOW.js"></a>WOW.js</h2><h3 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wow = <span class="keyword">new</span> WOW(</span><br><span class="line">    &#123;</span><br><span class="line">        boxClass: <span class="string">'wow'</span>,            <span class="comment">// 默认属性名</span></span><br><span class="line">        animateClass: <span class="string">'animated'</span>,   <span class="comment">// 默认触发的动画类(包含在animate css中)</span></span><br><span class="line">        offset: <span class="number">0</span>,                  <span class="comment">// 为所有添加wow的元素设置 data-wow-delay属性 的默认值</span></span><br><span class="line">        mobile: <span class="literal">true</span>,               <span class="comment">// 是否在移动设备中开启动画</span></span><br><span class="line">        live: <span class="literal">true</span>                  <span class="comment">// 持续监测页面中是否插入新的wow元素</span></span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line">wow.init();</span><br></pre></td></tr></table></figure><h3 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h3><table><thead><tr><th align="left">属性</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">data-wow-duration</td><td align="left">动画持续时间。</td></tr><tr><td align="left">data-wow-delay</td><td align="left">动画开始之前的延迟播放的时间。</td></tr><tr><td align="left">data-wow-offset</td><td align="left">元素距离底部大于此数值时,开始播放动画。</td></tr><tr><td align="left">data-wow-iteration</td><td align="left">动画重复的次数。</td></tr></tbody></table><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这边注意 div 里类名不分先后但是必须有 animated 和 动作类名, infinite 即为无限循环，默认为播放一次。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test"</span> <span class="attr">class</span>=<span class="string">"wow bounce"</span> <span class="attr">data-wow-delay</span>=<span class="string">"2s"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="图表库"><a href="#图表库" class="headerlink" title="图表库"></a>图表库</h1><table><thead><tr><th align="left">图表库</th><th align="left">网址</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">Chart.js</td><td align="left"><a href="http://chartjs.cn/" target="_blank" rel="noopener">http://chartjs.cn/</a></td><td align="left">基于 HTML5 的 JavaScript 图表库。</td></tr><tr><td align="left">ECharts</td><td align="left"><a href="https://echarts.baidu.com/" target="_blank" rel="noopener">https://echarts.baidu.com/</a></td><td align="left">使用 JavaScript 实现的开源数据可视化库。</td></tr></tbody></table><h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><h2 id="表单控件"><a href="#表单控件" class="headerlink" title="表单控件"></a>表单控件</h2><table><thead><tr><th align="left">插件</th><th align="left">网址</th><th align="left">GitHub 地址</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">Select2</td><td align="left"><a href="https://select2.org/" target="_blank" rel="noopener">https://select2.org/</a></td><td align="left"><a href="https://github.com/select2/select2/" target="_blank" rel="noopener">https://github.com/select2/select2/</a></td><td align="left">选择框美化。</td></tr><tr><td align="left">cxselect</td><td align="left"><a href="https://www.npmjs.com/package/cxselect" target="_blank" rel="noopener">https://www.npmjs.com/package/cxselect</a></td><td align="left"><a href="https://github.com/ciaoca/cxSelect/" target="_blank" rel="noopener">https://github.com/ciaoca/cxSelect/</a></td><td align="left">1. 多级联动菜单插件。<br>2. 内置国内省市县数据（json文件）。</td></tr><tr><td align="left">datetimepicker</td><td align="left"></td><td align="left"><a href="https://github.com/xdan/datetimepicker/" target="_blank" rel="noopener">https://github.com/xdan/datetimepicker/</a></td><td align="left">时间日期选择器。</td></tr><tr><td align="left">nice validator</td><td align="left"><a href="https://validator.niceue.com/" target="_blank" rel="noopener">https://validator.niceue.com/</a></td><td align="left"><a href="https://github.com/niceue/nice-validator/" target="_blank" rel="noopener">https://github.com/niceue/nice-validator/</a></td><td align="left">表单验证插件。</td></tr></tbody></table><h2 id="滚动"><a href="#滚动" class="headerlink" title="滚动"></a>滚动</h2><table><thead><tr><th align="left">插件</th><th align="left">网址</th><th align="left">GitHub 地址</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">fullPage</td><td align="left"><a href="https://alvarotrigo.com/fullPage/zh/" target="_blank" rel="noopener">https://alvarotrigo.com/fullPage/zh/</a></td><td align="left"><a href="https://github.com/alvarotrigo/fullPage.js/" target="_blank" rel="noopener">https://github.com/alvarotrigo/fullPage.js/</a></td><td align="left">全屏滚动插件。</td></tr><tr><td align="left">Lazy Load</td><td align="left"><a href="https://appelsiini.net/projects/lazyload/" target="_blank" rel="noopener">https://appelsiini.net/projects/lazyload/</a></td><td align="left"><a href="https://github.com/tuupola/lazyload/" target="_blank" rel="noopener">https://github.com/tuupola/lazyload/</a></td><td align="left">图片懒加载。</td></tr></tbody></table><h2 id="滚动条"><a href="#滚动条" class="headerlink" title="滚动条"></a>滚动条</h2><table><thead><tr><th align="left">插件</th><th align="left">网址</th><th align="left">GitHub 地址</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">malihu</td><td align="left"><a href="http://manos.malihu.gr/" target="_blank" rel="noopener">http://manos.malihu.gr/</a></td><td align="left"><a href="https://github.com/malihu/malihu-custom-scrollbar-plugin/" target="_blank" rel="noopener">https://github.com/malihu/malihu-custom-scrollbar-plugin/</a></td><td align="left">自定义滚动条美化插件。</td></tr></tbody></table><h2 id="wap-端滑动"><a href="#wap-端滑动" class="headerlink" title="wap 端滑动"></a>wap 端滑动</h2><table><thead><tr><th align="left">插件</th><th align="left">网址</th><th align="left">GitHub 地址</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">Swiper</td><td align="left"><a href="https://www.swiper.com.cn/" target="_blank" rel="noopener">https://www.swiper.com.cn/</a></td><td align="left"></td><td align="left">Swiper 是目前应用较广泛的移动端网页触摸内容滑动 js 插件。</td></tr><tr><td align="left">Dragula</td><td align="left"><a href="https://bevacqua.github.io/dragula/" target="_blank" rel="noopener">https://bevacqua.github.io/dragula/</a></td><td align="left"><a href="https://github.com/bevacqua/dragula/" target="_blank" rel="noopener">https://github.com/bevacqua/dragula/</a></td><td align="left">支持移动触摸屏设备的纯 js 元素拖放插件。</td></tr></tbody></table><h2 id="弹框"><a href="#弹框" class="headerlink" title="弹框"></a>弹框</h2><table><thead><tr><th align="left">插件</th><th align="left">网址</th><th align="left">GitHub 地址</th></tr></thead><tbody><tr><td align="left">layer</td><td align="left"><a href="http://layer.layui.com/" target="_blank" rel="noopener">http://layer.layui.com/</a></td><td align="left"><a href="https://github.com/sentsin/layer/" target="_blank" rel="noopener">https://github.com/sentsin/layer/</a></td></tr></tbody></table><h2 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h2><table><thead><tr><th align="left">插件</th><th align="left">网址</th><th align="left">GitHub 地址</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">bxSlider</td><td align="left"><a href="https://bxslider.com/" target="_blank" rel="noopener">https://bxslider.com/</a></td><td align="left"><a href="https://github.com/stevenwanderski/bxslider-4/" target="_blank" rel="noopener">https://github.com/stevenwanderski/bxslider-4/</a></td><td align="left">兼容移动端幻灯片插件（可以滑动切换幻灯片）。</td></tr></tbody></table><h2 id="树插件"><a href="#树插件" class="headerlink" title="树插件"></a>树插件</h2><table><thead><tr><th align="left">插件</th><th align="left">GitHub 地址</th></tr></thead><tbody><tr><td align="left">zTree</td><td align="left"><a href="https://github.com/zTree/zTree_v3/" target="_blank" rel="noopener">https://github.com/zTree/zTree_v3/</a></td></tr></tbody></table><h2 id="瀑布流"><a href="#瀑布流" class="headerlink" title="瀑布流"></a>瀑布流</h2><table><thead><tr><th align="left">插件</th><th align="left">GitHub 地址</th></tr></thead><tbody><tr><td align="left">xGallerify</td><td align="left"><a href="https://github.com/xremix/xGallerify/" target="_blank" rel="noopener">https://github.com/xremix/xGallerify/</a></td></tr></tbody></table><h2 id="放大镜"><a href="#放大镜" class="headerlink" title="放大镜"></a>放大镜</h2><table><thead><tr><th align="left">插件</th><th align="left">网址</th><th align="left">GitHub 地址</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">jQuery Zoom</td><td align="left"><a href="http://www.jacklmoore.com/zoom/" target="_blank" rel="noopener">http://www.jacklmoore.com/zoom/</a></td><td align="left"><a href="https://github.com/jackmoore/zoom/" target="_blank" rel="noopener">https://github.com/jackmoore/zoom/</a></td><td align="left">1. 图片放大镜插件。<br>2. 已经停止更新。</td></tr><tr><td align="left">jqzoom</td><td align="left"></td><td align="left"><a href="https://github.com/mindprojects/jqzoom/" target="_blank" rel="noopener">https://github.com/mindprojects/jqzoom/</a></td><td align="left">1. 图片放大镜插件。<br>2. 已经停止更新。</td></tr></tbody></table><h2 id="富文本编辑"><a href="#富文本编辑" class="headerlink" title="富文本编辑"></a>富文本编辑</h2><table><thead><tr><th align="left">插件</th><th align="left">网址</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">wangEditor</td><td align="left"><a href="http://www.wangeditor.com/" target="_blank" rel="noopener">http://www.wangeditor.com/</a></td><td align="left">轻量级 web 富文本编辑器。</td></tr><tr><td align="left">UEditor</td><td align="left"><a href="http://ueditor.baidu.com/website/" target="_blank" rel="noopener">http://ueditor.baidu.com/website/</a></td><td align="left">百度富文本编辑。</td></tr></tbody></table><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><table><thead><tr><th align="left">JS 库</th><th align="left">网址</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">html5shiv</td><td align="left"><a href="https://github.com/aFarkas/html5shiv/" target="_blank" rel="noopener">https://github.com/aFarkas/html5shiv/</a></td><td align="left">1. html5shiv 是一个针对 IE 浏览器的 HTML5 JavaScript 补丁。<br>2. 目的是让 IE 识别并支持 HTML5 元素。</td></tr><tr><td align="left">json2</td><td align="left"><a href="https://github.com/douglascrockford/JSON-js/" target="_blank" rel="noopener">https://github.com/douglascrockford/JSON-js/</a></td><td align="left">解决低版本 IE 浏览器不支持原生方法转换 JSON 对象。</td></tr><tr><td align="left">Normalize.css</td><td align="left"><a href="http://necolas.github.io/normalize.css/" target="_blank" rel="noopener">http://necolas.github.io/normalize.css/</a></td><td align="left">1. Normalize.css 是一种 CSS reset 的替代方案。<br>2. CSS reset 的目的是解决浏览器在默认样式上的诸多差异和问题。<br>3. 例如：将所有元素的 margin/padding 设为 0，及去掉 ol/ul 的列表样式。<br>4. 它在默认的 HTML 元素样式上提供了跨浏览器的高度一致性。</td></tr><tr><td align="left">Mock.js</td><td align="left"><a href="http://mockjs.com/" target="_blank" rel="noopener">http://mockjs.com/</a></td><td align="left">1. 生成随机数据，拦截 Ajax 请求。<br>1. 拦截 Ajax 请求可以减少代码的修改量（不用大量修改请求地址）。</td></tr><tr><td align="left">js-cookie</td><td align="left"><a href="https://www.npmjs.com/package/js-cookie/" target="_blank" rel="noopener">https://www.npmjs.com/package/js-cookie/</a></td><td align="left">cookie 管理工具。</td></tr><tr><td align="left">i18next.js</td><td align="left"><a href="https://www.i18next.com/" target="_blank" rel="noopener">https://www.i18next.com/</a></td><td align="left">页面语言国际化。</td></tr><tr><td align="left">Handlebars.js</td><td align="left"><a href="http://handlebarsjs.com/" target="_blank" rel="noopener">http://handlebarsjs.com/</a></td><td align="left">前端模板引擎。</td></tr></tbody></table><h1 id="UI-组件库"><a href="#UI-组件库" class="headerlink" title="UI 组件库"></a>UI 组件库</h1><h2 id="WEB-端"><a href="#WEB-端" class="headerlink" title="WEB 端"></a>WEB 端</h2><table><thead><tr><th align="left">组件库</th><th align="left">网址</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">Element</td><td align="left"><a href="https://element.eleme.cn/" target="_blank" rel="noopener">https://element.eleme.cn/</a></td><td align="left">基于 Vue 2.0 的桌面端组件库。</td></tr><tr><td align="left">Ant Design</td><td align="left"><a href="https://ant.design/" target="_blank" rel="noopener">https://ant.design/</a></td><td align="left">1. antd 是基于 Ant Design 设计体系的 React UI 组件库，主要用于研发企业级中后台产品。<br>2. 兼容 Vue、 Angular 组件开发。</td></tr></tbody></table><h2 id="WAP-端"><a href="#WAP-端" class="headerlink" title="WAP 端"></a>WAP 端</h2><table><thead><tr><th align="left">组件库</th><th align="left">网址</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">VUX</td><td align="left"><a href="https://vux.li/" target="_blank" rel="noopener">https://vux.li/</a></td><td align="left">1. VUX 是基于 WeUI 和 Vue.js 的 移动端 UI 组件库。<br>2. 提供丰富的组件满足移动端(微信)页面常用业务需求。</td></tr><tr><td align="left">Mint UI</td><td align="left"><a href="http://mint-ui.github.io/" target="_blank" rel="noopener">http://mint-ui.github.io/</a></td><td align="left">基于 Vue.js 的移动端组件库。</td></tr><tr><td align="left">WEEX</td><td align="left"><a href="https://weex.apache.org/" target="_blank" rel="noopener">https://weex.apache.org/</a></td><td align="left">阿里推出的跨平台的移动端开发框架，具有轻量级、可扩展和高性能的特点。</td></tr></tbody></table><h1 id="图表组件库"><a href="#图表组件库" class="headerlink" title="图表组件库"></a>图表组件库</h1><table><thead><tr><th align="left">图表库</th><th align="left">网址</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">v-charts</td><td align="left"><a href="https://v-charts.js.org/" target="_blank" rel="noopener">https://v-charts.js.org/</a></td><td align="left">基于 Vue2.0 和 echarts 封装的 v-charts 图表组件。</td></tr></tbody></table><h1 id="跨平台开发"><a href="#跨平台开发" class="headerlink" title="跨平台开发"></a>跨平台开发</h1><table><thead><tr><th align="left">框架</th><th align="left">网址</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">Flutter</td><td align="left"><a href="https://flutterchina.club/" target="_blank" rel="noopener">https://flutterchina.club/</a></td><td align="left">Flutter 是谷歌的移动 UI 框架，可以快速在 iOS 和 Android 上构建高质量的原生用户界面。</td></tr><tr><td align="left">Electron</td><td align="left"><a href="http://electronjs.org/" target="_blank" rel="noopener">http://electronjs.org/</a></td><td align="left">Electron 是由 Github 开发，用 HTML，CSS 和 JavaScript 来构建跨平台桌面应用程序的一个开源库。</td></tr><tr><td align="left">ionic</td><td align="left"><a href="https://ionicframework.com/" target="_blank" rel="noopener">https://ionicframework.com/</a></td><td align="left">1. 使用 web 技术构建高质量的跨平台的移动应用。<br>2. 可以让我们快速开发移动 App、移动端 WEB 页面、微信公众平台应用，混合 app web 页面。</td></tr><tr><td align="left">uni-app</td><td align="left"><a href="https://uniapp.dcloud.io/" target="_blank" rel="noopener">https://uniapp.dcloud.io/</a></td><td align="left">1. 是一个使用 Vue.js 开发所有前端应用的框架。<br>2. 开发者编写一套代码，可发布到 iOS、Android、H5、以及各种小程序（微信/支付宝/百度/头条/QQ/钉钉）等多个平台。</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
  </entry>
  <entry>
    <title>Vue</title>
    <url>/posts/43782/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><h1 id="MVVM-模式"><a href="#MVVM-模式" class="headerlink" title="MVVM 模式"></a>MVVM 模式</h1><p>MVVM 是 Model-View-ViewModel 的简写，即模型-视图-视图模型，由微软提出。</p><ul><li>模型指的是后端传递的数据。</li><li>视图指的是所看到的页面。</li><li>视图模型 mvvm 模式的核心，它是连接view和model的桥梁。它有两个方向：一是将模型转化成视图，即将后端传递的数据转化成所看到的页面。实现的方式是：数据绑定。二是将视图转化成模型，即将所看到的页面转化成后端的数据。实现的方式是：DOM 事件监听。这两个方向都实现的，我们称之为数据的双向绑定。</li></ul><a id="more"></a><h1 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h1><p>Vue 是以数据变化为驱动，你的主要工作是改变数据。</p><p>Vue的原则是最小化修改DOM，尽量只修改数据，Vue自己负责修改DOM。</p><ul><li><p>CDN引入Vue.js</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>模板：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var app = new Vue(&#123;</span><br><span class="line"></span><br><span class="line">        el: &apos;#app&apos;,</span><br><span class="line">        data: &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>el：element，需要获取的对应元素，html中的容器。</li><li>data：存储的数据。</li><li><strong>花括号之间</strong>不能有空格。</li><li><a href="https://github.com/zero3737/project/blob/master/Vue/实例多个Vue对象.html" target="_blank" rel="noopener">实例多个Vue对象</a></li></ul></li></ul><h1 id="this-指针"><a href="#this-指针" class="headerlink" title="this 指针"></a>this 指针</h1><p>Vue 中的 this 指针一般指向 Vue 实例。</p><h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><h2 id="双向绑定"><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h2><ul><li><p>v-model</p><ul><li><p>在表单控件或者组件上创建双向绑定。随表单控件类型不同而不同。</p></li><li><p>限制：</p><ul><li>&lt;input&gt;</li><li>&lt;select&gt;</li><li>&lt;textarea&gt;</li><li>components(组件)</li></ul></li><li><p>示例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>多个组件 v-model 属性可以绑定同一个数组（Vue 内部已经实现，例如复选框）。</p></li></ul></li></ul><h2 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h2><ul><li><p>v-once</p><ul><li>只渲染元素和组件一次。随后的重新渲染，元素/组件及其所有的子节点将被视为静态内容并跳过。</li><li>不需要表达式。</li><li>示例：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-once</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>v-if</p><ul><li>根据表达式的值的真假条件渲染元素。</li><li>可以用 0 或 null 表示假。</li><li>当条件变化时该指令触发过渡效果。</li><li>示例：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"1 &gt; 2"</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>v-show</p><ul><li>根据表达式之真假值，切换元素的 display CSS 属性。</li><li>当条件变化时该指令触发过渡效果。</li><li>v-if 和 v-show 的区别？<ul><li>v-if 是’真正的’条件渲染,因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。</li><li>v-show不管初始条件是什么,元素总会被渲染,并且只是简单的基于css进行切换。</li><li>v-if 有更高的切换开销,而 v-show 有更高的初始渲染开销。</li></ul></li></ul></li><li><p>v-else</p><ul><li>前一兄弟元素必须有 v-if 或 v-else-if。</li><li>示例：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"Math.random() &gt; 0.5"</span>&gt;</span></span><br><span class="line">    Now you see me</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">    Now you don't</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>v-else-if</p><ul><li>前一兄弟元素必须有 v-if 或 v-else-if。</li><li>示例：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"type === 'A'"</span>&gt;</span></span><br><span class="line">    A</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">"type === 'B'"</span>&gt;</span></span><br><span class="line">    B</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">"type === 'C'"</span>&gt;</span></span><br><span class="line">    C</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>Not A/B/C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>v-for</p><ul><li><p>基于源数据多次渲染元素或模板块。此指令之值，必须使用特定语法 <code>alias in expression</code>。</p></li><li><p>语法：</p><ul><li><p>绑定对象</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"(val, key, index) in obj"</span>&gt;</span>&#123;&#123; key &#125;&#125;: &#123;&#123; val &#125;&#125;: &#123;&#123; index &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>循环指定次数</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"count in 3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="更新元素"><a href="#更新元素" class="headerlink" title="更新元素"></a>更新元素</h2><ul><li>v-text<ul><li>更新元素的 textContent。如果要更新部分的 textContent，需要使用 插值。</li><li>不能直接在标签内直接追加文本。</li></ul></li><li>v-html<ul><li>更新元素的 innerHTML。</li><li>不能在标签内直接追加文本或标签。</li></ul></li></ul><h2 id="属性动态绑定"><a href="#属性动态绑定" class="headerlink" title="属性动态绑定"></a>属性动态绑定</h2><ul><li><p>v-bind</p><ul><li><p>动态地绑定一个或多个特性，或一个组件 prop 到表达式。</p></li><li><p>缩写：:</p></li><li><p>其属性值可以写表达式。</p></li><li><p>示例：</p><ul><li><p>绑定属性</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">"imageSrc"</span>&gt;</span></span><br><span class="line">// 可简写</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"imageSrc"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>绑定Class</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 基础</span><br><span class="line">&lt;div v-bind:class=&quot; &apos;active&apos; &quot;&gt;&lt;/div&gt;</span><br><span class="line">// 对象语法</span><br><span class="line">&lt;div v-bind:class=&quot;&#123; active: isActive &#125;&quot;&gt;&lt;/div&gt; // active类是否应用取决与isActive是否为真。</span><br><span class="line">&lt;div class=&quot;static&quot; v-bind:class=&quot;&#123; active: isActive, &apos;text-danger&apos;: hasError &#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div v-bind:class=&quot;classObject&quot;&gt;&lt;/div&gt; // 绑定的数据对象不必内联定义在模板里。</span><br><span class="line">// JS</span><br><span class="line">data: &#123;</span><br><span class="line"></span><br><span class="line">    classObject: &#123;</span><br><span class="line"></span><br><span class="line">        active: true,</span><br><span class="line">        &apos;text-danger&apos;: false</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">// 数组语法</span><br><span class="line">&lt;div v-bind:class=&quot;[activeClass, errorClass]&quot;&gt;&lt;/div&gt; // &lt;div class=&quot;active text-danger&quot;&gt;&lt;/div&gt;</span><br><span class="line">// JS</span><br><span class="line">data: &#123;</span><br><span class="line"></span><br><span class="line">    activeClass: &apos;active&apos;,</span><br><span class="line">    errorClass: &apos;text-danger&apos;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>绑定内联样式</p><ul><li>CSS属性名可以用驼峰式或短横线分隔 (kebab-case，记得用引号括起来) 来命名。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 对象语法</span><br><span class="line">&lt;div v-bind:style=&quot;&#123; color: activeColor, fontSize: fontSize + &apos;px&apos; &#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">// JS</span><br><span class="line">data: &#123;</span><br><span class="line"></span><br><span class="line">    activeColor: &apos;red&apos;,</span><br><span class="line">    fontSize: 30</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">// 直接绑定对象</span><br><span class="line">&lt;div v-bind:style=&quot;styleObject&quot;&gt;&lt;/div&gt;</span><br><span class="line">// JS</span><br><span class="line">data: &#123;</span><br><span class="line"></span><br><span class="line">    styleObject: &#123;</span><br><span class="line"></span><br><span class="line">        color: &apos;red&apos;,</span><br><span class="line">        fontSize: &apos;13px&apos;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 数组语法</span><br><span class="line">&lt;div v-bind:style=&quot;[baseStyles, overridingStyles]&quot;&gt;&lt;/div&gt; // 数组语法可以将多个 样式对象 应用到同一个元素上</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ul><h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><ul><li><p>v-on</p><ul><li><p>绑定事件监听器。事件类型由参数指定。表达式可以是<strong>一个方法的名字</strong>或<strong>一个内联语句</strong>，如果没有修饰符也可以省略。</p></li><li><p>缩写：@</p></li><li><p>事件名称开头on可写可不写。</p></li><li><p>修饰符：</p><ul><li>.prevent 阻止默认行为。</li><li>.stop 阻止事件冒泡。</li><li>.capture 阻止事件捕获。</li><li><code>.once</code> 事件只会触发一次。</li><li><code>.enter</code> 只有按下<kbd>Enter</kbd>键才触发事件。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.page-down</span>=<span class="string">"onPageDown"</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>示例:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// HTML</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;p :style = &quot;&#123;color: color&#125;&quot;&gt;&#123;&#123; msg &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;button @click = &quot;msg = &apos;今天天气不好！&apos;;&quot;&gt;按钮&lt;/button&gt;</span><br><span class="line">    &lt;button @click = &quot;al();&quot;&gt;按钮&lt;/button&gt;</span><br><span class="line">    &lt;button @click = &quot;changeColor();&quot;&gt;按钮&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">// JS</span><br><span class="line">var app = new Vue(&#123;</span><br><span class="line"></span><br><span class="line">    el: &apos;#app&apos;,</span><br><span class="line">    data: &#123;</span><br><span class="line"></span><br><span class="line">        msg: &quot;今天天气很好！&quot;,</span><br><span class="line">        color: &quot;red&quot;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"></span><br><span class="line">        al() &#123;</span><br><span class="line"></span><br><span class="line">            alert(&quot;hello world!&quot;);</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        changeColor() &#123;</span><br><span class="line"></span><br><span class="line">            this.color = &quot;green&quot;;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><h3 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h3><p>bind：只调用一次，指令第一次绑定到元素时调用。</p><ul><li><p>示例：<br>参照下面钩子函数参数。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注册一个全局自定义指令 `v-test`</span></span><br><span class="line">Vue.directive(<span class="string">'test'</span>, &#123;</span><br><span class="line"></span><br><span class="line">    binding: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        el.style.color = <span class="string">"#ccc"</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(binding.value);</span><br><span class="line">        <span class="keyword">if</span>(binding.arg == <span class="string">"foo"</span>)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>也可注册局部自定义指令。</p></li></ul><h3 id="钩子函数参数"><a href="#钩子函数参数" class="headerlink" title="钩子函数参数"></a>钩子函数参数</h3><p>el：指令所绑定的元素，可以用来直接操作 DOM 。</p><p>binding：一个对象，包含以下属性：</p><ul><li>name：指令名，不包括 v- 前缀。</li><li>value：指令的绑定值，例如：v-my-directive=”1 + 1” 中，绑定值为 2。</li><li>arg：传给指令的参数，可选。例如 v-my-directive:foo 中，参数为 “foo”。</li></ul><h1 id="内置组件"><a href="#内置组件" class="headerlink" title="内置组件"></a>内置组件</h1><ul><li>slot<ul><li>&lt;slot&gt; 元素作为组件模板之中的内容分发插槽。&lt;slot&gt; 元素自身将被替换。<ul><li><a href="https://github.com/zero3737/project/blob/master/Vue/匿名插槽.html" target="_blank" rel="noopener">匿名插槽</a></li></ul></li><li>name 属性用于命名插槽。<ul><li><a href="https://github.com/zero3737/project/blob/master/Vue/实名插槽.html" target="_blank" rel="noopener">实名插槽</a></li></ul></li></ul></li></ul><h1 id="全局API"><a href="#全局API" class="headerlink" title="全局API"></a>全局API</h1><ul><li>Vue.extend( options )<ul><li>组件构造器（创建组件）。</li></ul></li><li>Vue.component( id, [definition] )<ul><li>注册或获取全局组件。注册还会自动使用给定的id设置组件的名称。</li><li>全局组件必须写在Vue实例创建之前，才在该根元素下面生效。</li><li><a href="https://github.com/zero3737/project/blob/master/Vue/全局组件.html" target="_blank" rel="noopener">全局组件示例</a></li><li><a href="https://github.com/zero3737/project/blob/master/Vue/组件简写.html" target="_blank" rel="noopener">组件简写</a></li></ul></li><li>Vue.set( target, propertyName/index, value )<ul><li>向响应式对象中添加一个属性，并确保这个新属性同样是响应式的，且触发视图更新。</li></ul></li><li>Vue.use( plugin )<ul><li>安装 Vue.js 插件。<ol><li>添加全局方法或者属性。</li><li>添加全局资源：指令/过滤器/过渡等。</li><li>通过全局混入来添加一些组件选项。</li><li>添加 Vue 实例方法，通过把它们添加到 Vue.prototype 上实现。</li></ol></li><li>开发插件：如果插件是一个对象，必须提供 install 方法。如果插件是一个函数，它会被作为 install 方法。<ul><li>install 方法调用时，会将 Vue 作为参数传入。</li></ul></li><li>该方法需要在调用 new Vue() 之前被调用。</li></ul></li></ul><h1 id="配置选项"><a href="#配置选项" class="headerlink" title="配置选项"></a>配置选项</h1><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><ul><li>el<ul><li>提供一个在页面上已存在的 DOM 元素作为 Vue 实例的挂载目标。可以是 CSS 选择器，也可以是一个 HTMLElement 实例。</li></ul></li><li>template<ul><li>一个<strong>字符串模板</strong>作为 Vue 实例的标识使用。模板将会替换挂载的元素。挂载元素的内容都将被忽略，除非模板的内容有分发插槽。</li><li>如果值以 # 开始，则它将被用作选择符，并使用匹配元素的 innerHTML 作为模板。常用的技巧是用 <code>&lt;script type=&quot;x-template&quot;&gt;</code> 包含模板。<ul><li><a href="https://github.com/zero3737/project/blob/master/Vue/template标签编写组件模板.html" target="_blank" rel="noopener">template标签编写组件模板</a></li><li>template标签中只能有一个出口（template标签的一级结点只能有一个）。</li></ul></li></ul></li></ul><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><ul><li>data<ul><li>Vue实例的数据对象。<ul><li>组件的定义只接受 function。</li></ul></li><li>Vue将会递归将 data 的属性转换为 getter/setter，从而让 data 的属性能够响应数据变化。</li><li>对象必须是纯粹的对象 (含有零个或多个的 key/value 对)：浏览器 API 创建的原生对象，原型上的属性会被忽略。</li><li>当一个组件被定义，data 必须声明为返回一个初始数据对象的函数，因为<strong>（一个）组件可能被用来创建多个实例</strong>。<ul><li>如果 data 仍然是一个纯粹的对象，则所有的实例将共享引用同一个数据对象！</li><li>通过提供 data 函数，每次创建一个新实例后，我们能够调用 data 函数，从而返回初始数据的一个<strong>全新副本数据对象</strong>。</li><li><a href="https://github.com/zero3737/project/blob/master/Vue/组件data选项必须是函数.html" target="_blank" rel="noopener">组件data选项必须是函数</a></li></ul></li></ul></li><li>methods<ul><li>methods 将被混入到 Vue 实例中。可以直接通过 VM 实例访问这些方法，或者在<strong>指令表达式</strong>中使用。方法中的 <strong>this 自动绑定为 Vue 实例</strong>。</li><li>不应该使用箭头函数来定义 method 函数 (例如 <code>plus: () =&gt; this.a++</code>)。<ul><li>理由是箭头函数绑定了父级作用域的上下文，所以 this 将不会按照期望指向 Vue 实例，this.a 将是 undefined。</li></ul></li><li>定义函数function关键字不用写，写了也报错。</li></ul></li><li>computed<ul><li>计算属性将被混入到 Vue 实例中。所有 getter 和 setter 的 this 上下文自动地绑定为 Vue 实例。</li><li>注意如果你为一个计算属性使用了箭头函数，则 this 不会指向这个组件的实例。</li><li><strong>计算属性的结果</strong>会被缓存，除非依赖的响应式属性变化才会重新计算。<ul><li>函数第一次执行的时候会把返回值（计算结果）缓存起来，第二次调用函数直接读取缓存。</li><li>当响应式数据发生变化的时候会重新计算，而不是直接读取缓存，确保结果的正确。</li><li>就是说页面重新渲染数据（不是刷新页面）的时候会直接读取缓存。适用于大量计算和改变频率比较低的计算。</li></ul></li><li>对象可以包含函数对象，而函数对象里面只能是执行过程。</li><li><a href="https://github.com/zero3737/project/blob/master/Vue/计算属性.html" target="_blank" rel="noopener">计算属性示例</a></li></ul></li><li>props<ul><li>props 可以是数组或对象，用于接收来自父组件的数据（子组件暴露变量给父组件传值通信）。<ul><li>对象允许配置高级选项，如类型检测、自定义验证和设置默认值。</li></ul></li><li><a href="https://github.com/zero3737/project/blob/master/Vue/父组件通信.html" target="_blank" rel="noopener">父组件通信</a></li><li><a href="https://github.com/zero3737/project/blob/master/Vue/父子组件通信.html" target="_blank" rel="noopener">父子组件通信</a></li></ul></li></ul><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul><li><p>components</p><ul><li>包含 Vue 实例可用组件的哈希表。<ul><li><a href="https://github.com/zero3737/project/blob/master/Vue/局部组件.html" target="_blank" rel="noopener">局部组件</a></li></ul></li><li>组件使用必须先注册。</li><li>子组件在父组件中注册不能单独使用。要想单独使用子组件，必须单独注册。<ul><li><a href="https://github.com/zero3737/project/blob/master/Vue/父子组件.html" target="_blank" rel="noopener">父子组件</a></li></ul></li></ul></li><li><p>filters</p><ul><li><p>包含 Vue 实例可用过滤器的哈希表。</p></li><li><p>语法：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; oldValue | global-filter &#125;&#125;</span><br><span class="line"></span><br><span class="line">// 或</span><br><span class="line"></span><br><span class="line">&#123;&#123; oldValue | global-filter(1,2,3,4,5) &#125;&#125;</span><br></pre></td></tr></table></figure><ul><li>过滤器在插值表达式里使用 lunix 命令行的管道语法。</li><li>把 oldValue 的值原封不动的传递给 global-filter。</li><li><a href="https://github.com/zero3737/project/blob/master/Vue/过滤器.html" target="_blank" rel="noopener">过滤器</a></li></ul></li></ul></li></ul><h1 id="实例对象方法"><a href="#实例对象方法" class="headerlink" title="实例对象方法"></a>实例对象方法</h1><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><h3 id="子组件向父组件通信"><a href="#子组件向父组件通信" class="headerlink" title="子组件向父组件通信"></a>子组件向父组件通信</h3><ul><li><p><code>vm.$emit( eventName, […args] )</code></p><ul><li>触发<strong>当前实例</strong>上的事件。附加参数都会传给监听器回调。<ul><li><a href="https://github.com/zero3737/project/blob/master/Vue/子组件向外界通信.html" target="_blank" rel="noopener">子组件向父组件通信</a></li></ul></li><li>自定义事件只能绑定在该组件的实例，该实例可以访问父组件定义的方法，父组件的方法可以访问父组件的data。</li><li>[…args]为附加参数，$event接收附加参数（类似原生JS的event对象），$event默认传参给实例的自定义事件对应的方法。该方法就可以使用子组件传来的附加参数。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 子组件</span></span><br><span class="line">Vue.component(<span class="string">'magic-eight-ball'</span>, &#123;</span><br><span class="line"></span><br><span class="line">    data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line"></span><br><span class="line">            possibleAdvice: [<span class="string">'Yes'</span>, <span class="string">'No'</span>, <span class="string">'Maybe'</span>]</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"></span><br><span class="line">        giveAdvice: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> randomAdviceIndex = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="keyword">this</span>.possibleAdvice.length);</span><br><span class="line">            <span class="keyword">this</span>.$emit(<span class="string">'give-advice'</span>, <span class="keyword">this</span>.possibleAdvice[randomAdviceIndex]);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;button v-on:click="giveAdvice"&gt;</span></span><br><span class="line"><span class="string">        Click me for advice</span></span><br><span class="line"><span class="string">        &lt;/button&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;div id=<span class="string">"emit-example-argument"</span>&gt;</span><br><span class="line">    &lt;magic-eight-ball v-on:give-advice=<span class="string">"showAdvice"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">magic-eight-ball</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 父组件</span></span><br><span class="line"><span class="regexp">new Vue(&#123;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    el: '#emit-example-argument',</span></span><br><span class="line"><span class="regexp">    methods: &#123;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        showAdvice: function (advice) &#123;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">            alert(advice);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>vm.$on( event, callback ) 监听当前实例上的自定义事件。事件可以由vm.$emit触发。回调函数会接收所有传入事件触发函数的额外参数。</p><ul><li>可用于组件之间通信。</li></ul></li></ul><h2 id="数据-1"><a href="#数据-1" class="headerlink" title="数据"></a>数据</h2><ul><li><code>vm.$set( target, propertyName/index, value )</code><ul><li>这是全局 Vue.set 的别名。</li></ul></li></ul><h1 id="生命周期钩子"><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h1><ul><li>beforeCreate<ul><li>在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。</li><li>该阶段不能访问data里面的数据。</li><li>这一阶段可以编写加载动画。</li></ul></li><li>created<ul><li>在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：数据观测 (data observer)，属性和方法的运算，watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前<strong>不可见</strong>。</li><li>实例创建成功，此时 data 中的数据可以使用。</li><li>这一阶段可以发送网络请求。</li></ul></li><li>beforeMount<ul><li>在挂载开始之前被调用：相关的 render 函数首次被调用。</li><li>虚拟DOM已经配置。</li></ul></li><li>mounted<ul><li>el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。<ul><li>注意 mounted 不会承诺所有的<strong>子组件</strong>也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以用 vm.$nextTick 替换掉 mounted。</li></ul></li><li>该方法执行后组件中的data数据就会<strong>显示</strong>出来。</li><li><a href="https://github.com/zero3737/project/blob/master/Vue/钩子函数mounted.html" target="_blank" rel="noopener">钩子函数mounted</a></li></ul></li><li>beforeUpdate<ul><li>数据更新时调用，发生在虚拟 DOM 打补丁之前。</li><li>这里适合在更新之前访问现有的 DOM，比如手动移除已添加的事件监听器。</li></ul></li><li>updated<ul><li>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</li><li>当这个钩子被调用时，组件 DOM 已经更新（数据<strong>还没显示更新</strong>），所以你现在可以执行依赖于 DOM 的操作。</li></ul></li><li>beforeDestroy<ul><li>实例销毁之前调用。在这一步，实例仍然完全可用。</li></ul></li><li>destroyed<ul><li>Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</li></ul></li></ul><h2 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h2><ul><li>能力不足，努力编写中…</li></ul><h1 id="Vue-Router"><a href="#Vue-Router" class="headerlink" title="Vue Router"></a>Vue Router</h1><ul><li><p>引入Vue Router</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p><a href="https://github.com/zero3737/project/blob/master/Vue/Vue-Router.html" target="_blank" rel="noopener">Vue Router示例</a></p><ul><li>&lt;router-link&gt; 默认会被渲染成一个 <code>&lt;a&gt;</code> 标签。</li><li>&lt;router-view&gt;路由出口。</li></ul></li><li><p>Vue-Router和传统&lt;a&gt;标签的区别？</p><ul><li>Vue-Router不会发送请求刷新页面。</li><li>a标签则会发送请求刷新页面。</li><li>vue中一个页面可能包含所有组件（有的组件并没有显示出来），Vue-Router跳转到指定组件（所以不用发送网络请求）。</li></ul></li><li><p>Vue-Router为什么要<code>new VueRouter()</code>?</p><ul><li>VueRouter实例记录路由配置，Vue通过router属性接收VueRouter实例，读取VueRouter实例上记录的配置。</li></ul></li><li><p>&lt;router-view&gt;标签。</p><ul><li>路由匹配到的组件将渲染在这里。</li><li>不用在App.vue编写相应组件，可以直接写router-view标签，路由匹配到的组件将会替换掉router-view标签，继而达到渲染相关组件的效果。</li><li>路由配置一般在main.js中编写，相关组件也在main.js中注册。匹配到路由就会替换掉App.vue中的router-view标签。从而渲染页面。</li></ul></li><li><p>&lt;router-link&gt;标签。</p><ul><li>通过传入 <code>to</code> 属性跳转指定链接</li></ul></li></ul><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><ul><li>重定向（关键字<strong>redirect</strong>）是通过 routes <strong>配置</strong>来完成。<ul><li><a href="https://github.com/zero3737/project/blob/master/Vue/Vue-Router.html" target="_blank" rel="noopener">重定向根路由</a></li></ul></li></ul><h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><ul><li>children 配置就是像 routes 配置一样的路由配置数组。<ul><li><a href="https://github.com/zero3737/project/blob/master/Vue/Vue-Router.html" target="_blank" rel="noopener">多极路由</a></li></ul></li></ul><h2 id="History模式"><a href="#History模式" class="headerlink" title="History模式"></a>History模式</h2><ul><li>vue-router 默认 hash 模式（URL上默认有<code>/#/</code>符号）。</li><li>如果不想要很丑的 hash，我们可以用路由的 history 模式。<ul><li>当你使用 history 模式时，URL 就像正常的 url。</li></ul></li><li>配置示例<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const router = new VueRouter(&#123;</span><br><span class="line"></span><br><span class="line">    mode: &apos;history&apos;,</span><br><span class="line">    routes: [...]</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h2 id="路由参数"><a href="#路由参数" class="headerlink" title="路由参数"></a>路由参数</h2><h3 id="设置路由参数有-2-种方式"><a href="#设置路由参数有-2-种方式" class="headerlink" title="设置路由参数有 2 种方式"></a>设置路由参数有 2 种方式</h3><p>以 localhost/login/?id=1 形式设置。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123; name: 'login', query: &#123; id:1 &#125; &#125;"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以 localhost/register/San 形式设置。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123; name: 'register', params: &#123; 'name': 'San' &#125; &#125;"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="接收路由参数"><a href="#接收路由参数" class="headerlink" title="接收路由参数"></a>接收路由参数</h3><p>会寻找 url 上对应的 id 值。例如：<code>localhost/page/1</code>，id = 1。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 路由配置</span></span><br><span class="line">&#123; <span class="attr">path</span>: <span class="string">'/page/:id'</span>, <span class="attr">component</span>: &#123; mokuai &#125; &#125;</span><br></pre></td></tr></table></figure><h3 id="获取路由参数"><a href="#获取路由参数" class="headerlink" title="获取路由参数"></a>获取路由参数</h3><p>this.$route.query 获取以 query 方式设置的路由参数。</p><p>this.$route.params.name 获取以 params 方式设置的路由参数。</p><h3 id="route-和-router"><a href="#route-和-router" class="headerlink" title="$route 和 $router"></a>$route 和 $router</h3><p>$route: 路由信息对象，只读对象；</p><p>$router: 路由操作对象，只写对象。</p><h1 id="Vue-CLI"><a href="#Vue-CLI" class="headerlink" title="Vue CLI"></a>Vue CLI</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>安装CLI 3版本<ul><li><code>npm install -g @vue/cli</code></li></ul></li><li>安装CLI 2版本<ul><li><code>npm install -g @vue/cli-init</code></li></ul></li></ul><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><table><thead><tr><th align="left">命令</th><th align="left">作用</th><th align="left">补充</th><th align="left">版本</th></tr></thead><tbody><tr><td align="left"><code>vue --version</code></td><td align="left">检查Vue CLI版本是否正确。</td><td align="left"></td><td align="left"></td></tr><tr><td align="left"><code>vue init webpack 项目名称</code></td><td align="left">创建一个项目</td><td align="left">&nbsp;</td><td align="left">CLI 2命令。</td></tr><tr><td align="left"><code>vue ui</code></td><td align="left">以图形化界面创建和管理项目。</td><td align="left">&nbsp;</td><td align="left">CLI 3命令。</td></tr><tr><td align="left"><code>vue create 项目名称</code></td><td align="left">创建一个项目。</td><td align="left">该命令会在当前目录新建一个文件夹。</td><td align="left">CLI 3命令。</td></tr><tr><td align="left"><code>npm run dev</code></td><td align="left">运行项目。<br>和<code>npm run start</code>等效。</td><td align="left"></td><td align="left"></td></tr><tr><td align="left"><code>npm run build</code></td><td align="left">编译项目，转换成浏览器可以直接解析的文件。</td><td align="left"></td><td align="left"></td></tr></tbody></table><ul><li><p>通过<code>vue init webpack</code>创建项目的配置选项。</p><img src="1.png" width="60%"><p>默认选项。</p></li><li><p><code>npm run build</code>补充说明。</p><ul><li>通过该命令构建的index.html无法直接用浏览器直接运行，必须通过HTTP服务器提供服务才能运行。</li></ul></li></ul><h2 id="Vue模板"><a href="#Vue模板" class="headerlink" title="Vue模板"></a>Vue模板</h2><ol><li>vscode -&gt; 文件 -&gt; 首选项 -&gt; 用户代码片段 -&gt; vue.json</li><li>配置文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;Vue&quot;: &#123;</span><br><span class="line">	&quot;prefix&quot;: &quot;vue&quot;,</span><br><span class="line">	&quot;body&quot;: [</span><br><span class="line">           &quot;&lt;template&gt;&quot;,</span><br><span class="line">           &quot;   &lt;div class=\&quot;\&quot;&gt;\n&quot;,</span><br><span class="line">           &quot;   &lt;/div&gt;&quot;,</span><br><span class="line">           &quot;&lt;/template&gt;\n&quot;,</span><br><span class="line">           &quot;&lt;script&gt;&quot;,</span><br><span class="line">           &quot;export default &#123;\n&quot;,</span><br><span class="line">           &quot;   name: &apos;&apos;,&quot;,</span><br><span class="line">           &quot;   data() &#123;\n&quot;,</span><br><span class="line">		&quot;       return &#123; &#125;\n&quot;,</span><br><span class="line">           &quot;   &#125;&quot;,</span><br><span class="line">           &quot;&#125;&quot;,</span><br><span class="line">           &quot;&lt;/script&gt;\n&quot;,</span><br><span class="line">           &quot;&lt;style scoped&gt;\n&quot;,</span><br><span class="line">           &quot;&lt;/style&gt;&quot;</span><br><span class="line">	],</span><br><span class="line">	&quot;description&quot;: &quot;Vue模板。&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="文件说明"><a href="#文件说明" class="headerlink" title="文件说明"></a>文件说明</h2><img src="2.png" width="25%"><table><thead><tr><th align="left">文件</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">./src/assets</td><td align="left">用于存放图片。</td></tr><tr><td align="left">./src/components</td><td align="left">用于存放组件。</td></tr><tr><td align="left">./src/App.vue</td><td align="left">根组件。</td></tr><tr><td align="left">./src/index.html</td><td align="left">入口文件。</td></tr><tr><td align="left">./src/main.js</td><td align="left">vue中的核心配置文件。vue-router全局配置写在这里。</td></tr><tr><td align="left">./static</td><td align="left">存放编译后的静态文件（本地json文件应该存放到这里，放到其他目录会造成 404 错误）。</td></tr></tbody></table><p>执行流程</p><ul><li>index.html -&gt; main.js -&gt; 相关模块（App.vue）</li></ul><p>App.vue中的<code>&lt;div id=&quot;app&quot;&gt;</code>标签会替换掉index.html中的<code>&lt;div id=&quot;app&quot;&gt;</code>标签。</p><ul><li>main.js 先挂载 index.html #app 中的 div 元素。然后再把 index #app 中的 div 标签替换掉 App.vue 中的 #app div 标签。</li></ul><h2 id="vue中import-…-from-…-语法"><a href="#vue中import-…-from-…-语法" class="headerlink" title="vue中import … from … 语法"></a>vue中import … from … 语法</h2><ul><li><p>Vue使用import … from …来导入组件。</p></li><li><p>而from后的来源可以是js，vue，json。这个是在./build/webpack.base.conf.js中设置的。</p><p><img src="3.png" alt></p><ul><li>extensions指定了from后可导入的文件类型。</li><li>而上面定义的这3类可导入文件，js和vue是可以省略后缀的，json不可省略。</li><li>.vue 和 .js 文件同名，则import的导入优先级是：js&gt;vue。</li><li>若from的来源是文件夹，那么在package.json存在且设置正确的情况下，会默认加载package.json；若不满足，则加载index.js；若不满足，则加载index.vue。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if(package.json存在 &amp;&amp; package.main字段存在 &amp;&amp; package.main指定的js存在) &#123;</span><br><span class="line"></span><br><span class="line">    取package.main指定的js作为from的来源，即使该js可能格式或内容错误</span><br><span class="line"></span><br><span class="line">&#125; else if(index.js存在)&#123;</span><br><span class="line"></span><br><span class="line">    取index.js作为from的来源</span><br><span class="line"></span><br><span class="line">&#125; else &#123;</span><br><span class="line"></span><br><span class="line">    取index.vue作为from的来源</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>import Vue from &#39;vue&#39;;</code>等价于<code>import Vue from &quot;../node_modules/vue/dist/vue.js&quot;;</code></p><ul><li>import…from…的from命令后面可以跟很多路径格式，若只给出vue，axios这样的包名，则会自动到node_modules中加载。</li><li>若给出相对路径及文件前缀，则到指定位置寻找。</li></ul></li></ul><h2 id="CSS作用域"><a href="#CSS作用域" class="headerlink" title="CSS作用域"></a>CSS作用域</h2><ul><li>父组件和子组件的样式共享。要想组件的样式私有化，可以使用&lt;style&gt;标签的scoped属性。<ul><li>给当前组件搭建标识属性（用于区分）。</li></ul></li></ul><h2 id="Vue-CLI-项目部署到-Tomcat-的各种问题"><a href="#Vue-CLI-项目部署到-Tomcat-的各种问题" class="headerlink" title="Vue-CLI 项目部署到 Tomcat 的各种问题"></a>Vue-CLI 项目部署到 Tomcat 的各种问题</h2><ol><li><p>页面资源请求404问题。</p><ul><li>配置 <code>config/index.js</code> 文件，将 <code>assetsPublicPath</code> 属性中的 <code>&#39;/&#39;</code> 修改为 <code>&#39;./&#39;</code> ，注意两个 <code>assetsPublicPath</code> 属性都要修改。</li></ul></li><li><p>页面空白问题。</p><ul><li><p>配置 Vue-Router 根目录即可。例如 src/router/index.js 配置如下：</p><img src="./4.png" width="50%"></li><li><p>修改为如下配置：</p><img src="./5.png" width="50%"></li><li><p><code>biyesheji</code> 为后台项目名称，<code>graduateWork</code> 为存放网站首页的目录。</p><img src="./6.png" width="50%"></li></ul></li><li><p>打包后 （build） <code>background-image</code> 引用相对路径造成请求资源404问题。</p><ul><li><p>在 <code>build/utils.js</code> 文件中找到 <code>ExtractTextPlugin.extract</code> 添加 <code>publicPath: &#39;../../&#39;</code> 即可。</p><img src="./7.png" width="50%"></li></ul></li></ol><h2 id="background-image-引入图片资源路径问题"><a href="#background-image-引入图片资源路径问题" class="headerlink" title="background-image 引入图片资源路径问题"></a>background-image 引入图片资源路径问题</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div :style=&quot;&#123;&apos;background-image&apos;: `url($&#123;require(&apos;../assets/1.png&apos;)&#125;)`&#125;&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="vue-resource"><a href="#vue-resource" class="headerlink" title="vue-resource"></a>vue-resource</h1><p>已经停止维护。</p><p>发送 HTTP 请求 NPM 模块。</p><p>你可以使用全局对象方式 Vue.http 或者在一个 Vue 实例的内部使用 this.$http 来发起 HTTP 请求。</p><h2 id="get-请求"><a href="#get-请求" class="headerlink" title="get 请求"></a>get 请求</h2><p>基本 get 请求</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$http.get(<span class="string">'/try/ajax/ajax_info.txt'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求成功</span></span><br><span class="line">    <span class="built_in">document</span>.write(res.body);</span><br><span class="line"></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求失败</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'请求失败处理'</span>);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>get 请求添加请求参数。语法：<code>this.$http.get(&#39;get.php&#39;,{params : jsonData})</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$http.get(<span class="string">'get.php'</span>, &#123;<span class="attr">params</span>: &#123;<span class="attr">a</span>: <span class="number">1</span>,<span class="attr">b</span>: <span class="number">2</span>&#125;&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">document</span>.write(res.body);</span><br><span class="line"></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(res.status);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="post-请求"><a href="#post-请求" class="headerlink" title="post 请求"></a>post 请求</h2><p>post 发送数据到后端，需要第三个参数 {emulateJSON:true}。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$http.post(</span><br><span class="line">    <span class="string">'/try/ajax/demo_test_post.php'</span>, &#123; <span class="attr">name</span>:<span class="string">"菜鸟教程"</span>, <span class="attr">url</span>:<span class="string">"http://www.runoob.com"</span> &#125;, &#123; <span class="attr">emulateJSON</span>:<span class="literal">true</span> &#125;)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">                        </span><br><span class="line">        <span class="built_in">document</span>.write(res.body);</span><br><span class="line"></span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(res.status);</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>emulateJSON 的作用：如果Web服务器无法处理编码为 application/json 的请求，你可以启用 emulateJSON 选项。</p><h2 id="Response-对象"><a href="#Response-对象" class="headerlink" title="Response 对象"></a>Response 对象</h2><p>json() 方法使用一个 Response 流，并将其读取完成。它返回一个 promise。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">response.json().then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// data 为 JSON 对象。</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h1><p>Axios 是一个基于 promise 的 HTTP 库。</p><ul><li>自动转换 JSON 数据。</li></ul><p>Axios 的 this 指针不会指向 Vue 实例。</p><h2 id="配置默认值"><a href="#配置默认值" class="headerlink" title="配置默认值"></a>配置默认值</h2><p>你可以指定将被用在各个请求的配置默认值。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 各个请求自动添加 URL。</span></span><br><span class="line">axios.defaults.baseURL = <span class="string">'https://api.example.com'</span>;</span><br></pre></td></tr></table></figure><h2 id="跨域请求"><a href="#跨域请求" class="headerlink" title="跨域请求"></a>跨域请求</h2><p>通过 webpack 配置 proxyTable 代理进行跨域请求。</p><h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><p>简化组件之间通信的操作（原理通过本地储存）。</p><!-- rebuild by neat -->]]></content>
  </entry>
  <entry>
    <title>Visual Studio Code</title>
    <url>/posts/35328/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><ul><li><p>Chinese (Simplified) Language Pack for Visual Studio Code</p><ul><li>vscode的中文简体语言包。</li></ul></li><li><p>open in browser</p><ul><li>可以鼠标右键打开浏览器。</li></ul></li><li><p>Auto Close Tag</p><ul><li>自动闭合标签。</li></ul></li></ul><a id="more"></a><ul><li><p>Auto Rename Tag</p><ul><li>自动修改标签。</li></ul></li><li><p>Vetur</p><ul><li>vue文件语法高亮。</li></ul></li><li><p>Autoprefixer</p><ul><li><p>解析 CSS 文件并且添加浏览器前缀到 CSS 内容（HTML 文件无法添加前缀）里。</p></li><li><p>安装配置：</p><ol><li><p>命令输入：<code>npm i -g autoprefixer</code></p></li><li><p>Autoprefixer 兼容 Firefox、 Opera、 IE。</p><ul><li>Autoprefixer json 文件中添加<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;autoprefixer.browsers&quot;: [</span><br><span class="line">    &quot;ie &gt;= 6&quot;, </span><br><span class="line">    &quot;firefox &gt;= 8&quot;,</span><br><span class="line">    &quot;chrome &gt;= 24&quot;,</span><br><span class="line">    &quot;Opera &gt;= 10&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用</p><ul><li>按 F1 按键，选择 Autoprefixer CSS 选项即可在 CSS 文件中添加各浏览器前缀。</li></ul></li></ol></li></ul></li></ul><h1 id="Emmet"><a href="#Emmet" class="headerlink" title="Emmet"></a>Emmet</h1><ul><li><p>html:5 或 !</p><ul><li>示例：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// Emmet语法</span><br><span class="line">html:5 // 或 !</span><br><span class="line">// 生成HTML代码</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>id（#）</p><ul><li>示例：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// Emmet语法</span><br><span class="line">div#test</span><br><span class="line">// 生成HTML代码</span><br><span class="line">&lt;div id=&quot;test&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>class（.）</p><ul><li>示例：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// Emmet语法</span><br><span class="line">a[href=&quot;#&quot; name=&quot;xiaoA&quot;]</span><br><span class="line">// 生成HTML代码</span><br><span class="line">&lt;a href=&quot;#&quot; name=&quot;xiaoA&quot;&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>属性（[attr]）</p><ul><li>示例：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// Emmet语法</span><br><span class="line">div.test</span><br><span class="line">// 生成HTML代码</span><br><span class="line">&lt;div class=&quot;test&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>子节点（&gt;）</p><ul><li>示例：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// Emmet语法</span><br><span class="line">div&gt;ul&gt;li&gt;p</span><br><span class="line">// 生成HTML代码</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;p&gt;&lt;/p&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>兄弟节点（+）</p><ul><li>示例：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// Emmet语法</span><br><span class="line">div+ul+p</span><br><span class="line">// 生成HTML代码</span><br><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;ul&gt;&lt;/ul&gt;</span><br><span class="line">&lt;p&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>上级节点（^）</p><ul><li>示例：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// Emmet语法</span><br><span class="line">div&gt;ul&gt;li^div // 这里的^是接在li后面所以在li的上一级，与ul成了兄弟关系。</span><br><span class="line">// 生成HTML代码</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>重复（*）</p><ul><li>示例：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// Emmet语法</span><br><span class="line">div*5</span><br><span class="line">// 生成HTML代码</span><br><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;div&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>分组（()）</p><ul><li>示例：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// Emmet语法</span><br><span class="line">div&gt;(ul&gt;li&gt;a)+div&gt;p // 括号里面的内容为一个代码块，表示与括号内部嵌套和外面的的层级无关。</span><br><span class="line">// 生成HTML代码</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;p&gt;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>编号($)</p><ul><li><p>示例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// Emmet语法</span><br><span class="line">ul&gt;li.test$*3 // $代表一位数，后面更上*数字就代表从1递增到填写的数字。</span><br><span class="line">// 生成HTML代码</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li class=&quot;test1&quot;&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li class=&quot;test2&quot;&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li class=&quot;test3&quot;&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>可在 “$” 后添加 “@n” 修改编号的起始值为n。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// Emmet语法</span><br><span class="line">li.item$@3*3</span><br><span class="line">// 生成HTML代码</span><br><span class="line">&lt;li class=&quot;item3&quot;&gt;&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;item4&quot;&gt;&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;item5&quot;&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure><p>可在 “$” 后添加 “@-” 修改编号的方向。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// Emmet语法</span><br><span class="line">li.item$@-3*3</span><br><span class="line">// 生成HTML代码</span><br><span class="line">&lt;li class=&quot;item5&quot;&gt;&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;item4&quot;&gt;&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;item3&quot;&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure><p>一个 $ 代表一位数，两个 $ 代表两位(01)，三个 $ 代表三位，以此类推。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// Emmet语法</span><br><span class="line">li.item$$$*3 // 3个 $ 代表显示3位数。</span><br><span class="line">// 生成HTML代码</span><br><span class="line">&lt;li class=&quot;item001&quot;&gt;&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;item002&quot;&gt;&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;item003&quot;&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure><p>从99开始递增。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// Emmet语法</span><br><span class="line">li.item$@99*3</span><br><span class="line">// 生成HTML代码</span><br><span class="line">&lt;li class=&quot;item99&quot;&gt;&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;item100&quot;&gt;&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;item101&quot;&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>文本（{}）</p><ul><li>示例：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// Emmet语法</span><br><span class="line">ul&gt;li.test$*3&#123;测试$&#125; // $代表一位数，后面更上*数字就代表从1递增到填写的数字。</span><br><span class="line">// 生成HTML代码</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li class=&quot;test1&quot;&gt;测试1&lt;/li&gt;</span><br><span class="line">    &lt;li class=&quot;test2&quot;&gt;测试2&lt;/li&gt;</span><br><span class="line">    &lt;li class=&quot;test3&quot;&gt;测试3&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>隐式标签</p><ul><li><p>这个标签没有指令，而是部分标签可以不使用输入标签，直接输入指令，即可识别父类标签。</p></li><li><p>示例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// Emmet语法</span><br><span class="line">.test</span><br><span class="line">// 生成HTML代码</span><br><span class="line">&lt;div class=&quot;test&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">// Emmet语法</span><br><span class="line">ul&gt;.test$*3</span><br><span class="line">// 生成HTML代码</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li class=&quot;test1&quot;&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li class=&quot;test2&quot;&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li class=&quot;test3&quot;&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">// Emmet语法</span><br><span class="line">select&gt;.test$*5</span><br><span class="line">// 生成HTML代码</span><br><span class="line">&lt;select name=&quot;&quot; id=&quot;&quot;&gt;</span><br><span class="line">    &lt;option class=&quot;test1&quot;&gt;&lt;/option&gt;</span><br><span class="line">    &lt;option class=&quot;test2&quot;&gt;&lt;/option&gt;</span><br><span class="line">    &lt;option class=&quot;test3&quot;&gt;&lt;/option&gt;</span><br><span class="line">    &lt;option class=&quot;test4&quot;&gt;&lt;/option&gt;</span><br><span class="line">    &lt;option class=&quot;test5&quot;&gt;&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">// Emmet语法</span><br><span class="line">select&gt;.test$*5</span><br><span class="line">// 生成HTML代码</span><br><span class="line">&lt;select name=&quot;&quot; id=&quot;&quot;&gt;</span><br><span class="line">    &lt;option class=&quot;test1&quot;&gt;&lt;/option&gt;</span><br><span class="line">    &lt;option class=&quot;test2&quot;&gt;&lt;/option&gt;</span><br><span class="line">    &lt;option class=&quot;test3&quot;&gt;&lt;/option&gt;</span><br><span class="line">    &lt;option class=&quot;test4&quot;&gt;&lt;/option&gt;</span><br><span class="line">    &lt;option class=&quot;test5&quot;&gt;&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></li><li><p>隐私标签有如下几个：</p><ol><li>li：用于 ul 和 ol 中。</li><li>tr：用于 table、tbody、thead 和 tfoot 中。</li><li>td：用于 tr 中。</li><li>option：用于 select 和 optgroup 中。</li></ol></li></ul></li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>Emmet语法不能留空格。编写多个属性的时候可以用空格隔开。</p><p>vscode通过Emmet生成的HTML代码，内联和内联块级元素不会美观换行。而块级元素会自动美观换行。</p><h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><table><thead><tr><th align="left">快捷键</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">alt + 鼠标左键</td><td align="left">多选</td></tr><tr><td align="left">Home</td><td align="left">快速移动到行首</td></tr><tr><td align="left">End</td><td align="left">快速移动到行尾</td></tr><tr><td align="left">Ctrl + Enter</td><td align="left">当前行下边插入一行</td></tr><tr><td align="left">Ctrl + Shift + Enter</td><td align="left">当前行上方插入一行</td></tr><tr><td align="left">Ctrl + Shift + K</td><td align="left">删除当行</td></tr><tr><td align="left">Shift + Alt + F</td><td align="left">快速格式化代码</td></tr><tr><td align="left">Shift + /</td><td align="left">空选状态快速注释当行</td></tr><tr><td align="left">Ctrl + C</td><td align="left">空选状态快速复制当行</td></tr></tbody></table><h1 id="常用技巧"><a href="#常用技巧" class="headerlink" title="常用技巧"></a>常用技巧</h1><h2 id="自定义代码片段"><a href="#自定义代码片段" class="headerlink" title="自定义代码片段"></a>自定义代码片段</h2><ol><li><p><code>点击左上角文件 -&gt; 首选项 -&gt; 用户代码片段</code></p><img src="01.jpg" width="50%"></li><li><p>选择HTML</p><img src="02.jpg" width="50%"></li></ol><ol start="3"><li><p>根据下面格式自定义代码片段。</p><img src="03.jpg" width="35%"></li></ol><h2 id="快速新建文件目录"><a href="#快速新建文件目录" class="headerlink" title="快速新建文件目录"></a>快速新建文件目录</h2><ol><li><p>右键 -&gt; 新建文件</p><img src="1.png" width="35%"></li><li><p>文件夹之间用 <code>/</code> 或 <code>\</code> 隔开，文件添加相应后缀。</p><img src="2.png" width="35%"></li><li><p>生成目录如图所示</p><img src="3.png" width="35%"></li></ol><!-- rebuild by neat -->]]></content>
  </entry>
  <entry>
    <title>Bootstrap</title>
    <url>/posts/11629/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><h1 id="视口"><a href="#视口" class="headerlink" title="视口"></a>视口</h1><p>视口通用设置</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span>   <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0,</span></span></span><br><span class="line"><span class="tag"><span class="string">        minimum-scale=1.0, maximun-scale=1.0, user-scalable=no"</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><p><code>width=device-width</code> 表示页面宽度是设备屏幕的宽度。</p><p><code>initial-scale</code> 表示初始的缩放比例。</p><p><code>minimum-scale</code> 表示最小的缩放比例。</p><p><code>maximum-scale</code> 表示最大的缩放比例。</p><p><code>user-scalable</code> 表示用户是否可以调整缩放比例。</p><h1 id="栅格系统"><a href="#栅格系统" class="headerlink" title="栅格系统"></a>栅格系统</h1><p>响应式、移动设备优先的流式栅格系统随着屏幕或视口（viewport）尺寸的增加，系统会自动分为最多 12 列。</p><table><thead><tr><th align="left">&nbsp;</th><th align="left">超小屏幕手机(&lt;768px)</th><th align="left">小屏幕平板(≥768px)</th><th align="left">中等屏幕桌面显示器(≥992px)</th><th align="left">大屏幕大桌面显示器(≥1200px)</th></tr></thead><tbody><tr><td align="left"><strong>栅格系统行为</strong></td><td align="left">总是水平排列</td><td align="left">开始是<strong>堆叠</strong>在一起的，当大于这些阈值时将变为<strong>水平排列</strong></td><td align="left">与小屏幕平板相同</td><td align="left">与小屏幕平板相同</td></tr><tr><td align="left"><strong>列数</strong></td><td align="left">12</td><td align="left">12</td><td align="left">12</td><td align="left">12</td></tr><tr><td align="left"><strong>.container最大宽度</strong></td><td align="left">None（自动）</td><td align="left">750px</td><td align="left">970px</td><td align="left">1170px</td></tr><tr><td align="left"><strong>类前缀</strong></td><td align="left">.col-xs-</td><td align="left">.col-sm-</td><td align="left">.col-md-</td><td align="left">.col-lg-</td></tr><tr><td align="left"><strong>最大列宽</strong></td><td align="left">自动</td><td align="left">~62px</td><td align="left">~81px</td><td align="left">~97px</td></tr></tbody></table><h2 id="container-和-container-fluid-区别"><a href="#container-和-container-fluid-区别" class="headerlink" title=".container 和 .container-fluid 区别"></a>.container 和 .container-fluid 区别</h2><p><code>.container</code> 为固定宽度（不同屏幕宽度 <code>.container</code> 的固定宽度也不同）。</p><p><code>.container-fluid</code> 为 100% 宽度。</p><p>一个页面中可以存在多个布局容器（.container 和 .container-fluid）。</p><h2 id="栅格类使用案例"><a href="#栅格类使用案例" class="headerlink" title="栅格类使用案例"></a>栅格类使用案例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;col-xs-6 col-md-3&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><code>.col-xs-6</code> 在超小屏幕中占 6 列。<code>.col-md-3</code> 在中等屏幕中占 3 列。</p><p>一般栅格类里必须嵌套一个&lt;div&gt;标签，默认这个&lt;div&gt;标签存在左右内边距。</p><h2 id="列偏移"><a href="#列偏移" class="headerlink" title="列偏移"></a>列偏移</h2><p>使用 <code>.col-md-offset-*</code> 类可以将列向右侧偏移。这些类实际是通过使用 * 选择器为当前元素增加了左侧的边距（margin）。</p><h2 id="嵌套列"><a href="#嵌套列" class="headerlink" title="嵌套列"></a>嵌套列</h2><p>为了使用内置的栅格系统将内容再次嵌套，可以通过添加一个新的 .row 元素和一系列 .col-sm-* 元素到已经存在的 .col-sm-* 元素内。</p><h1 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h1><h2 id="可作为按钮使用的标签或元素"><a href="#可作为按钮使用的标签或元素" class="headerlink" title="可作为按钮使用的标签或元素"></a>可作为按钮使用的标签或元素</h2><p>为 &lt;a&gt;、&lt;button&gt; 或 &lt;input&gt; 元素添加按钮类即可使用 Bootstrap 提供的样式。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a class=&quot;btn btn-default&quot; href=&quot;#&quot; role=&quot;button&quot;&gt;Link&lt;/a&gt;</span><br><span class="line">&lt;button class=&quot;btn btn-default&quot; type=&quot;submit&quot;&gt;Button&lt;/button&gt;</span><br><span class="line">&lt;input class=&quot;btn btn-default&quot; type=&quot;button&quot; value=&quot;Input&quot;&gt;</span><br><span class="line">&lt;input class=&quot;btn btn-default&quot; type=&quot;submit&quot; value=&quot;Submit&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="预定义样式"><a href="#预定义样式" class="headerlink" title="预定义样式"></a>预定义样式</h2><p>将按钮渲染成链接样式。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button type=&quot;button&quot; class=&quot;btn btn-link&quot;&gt;（链接）Link&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>将 &lt;a&gt; 渲染成按钮样式。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a type=&quot;button&quot; class=&quot;btn btn-primary&quot;&gt;（首选项）Primary&lt;/a&gt;</span><br></pre></td></tr></table></figure><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><h2 id="响应式图片"><a href="#响应式图片" class="headerlink" title="响应式图片"></a>响应式图片</h2><p><code>.img-responsive</code> 类可以让图片支持响应式布局。其实质是为图片设置了 <code>max-width: 100%;</code>、 <code>height: auto;</code> 和 <code>display: block;</code> 属性，从而让图片在其父元素中更好的缩放。</p><h2 id="图片形状"><a href="#图片形状" class="headerlink" title="图片形状"></a>图片形状</h2><p>通过为 &lt;img&gt; 元素添加以下相应的类，可以让图片呈现不同的形状。</p><ul><li><code>img-rounded</code> 图片圆角。</li><li><code>img-circle</code> 圆形图片。</li></ul><h1 id="响应式工具"><a href="#响应式工具" class="headerlink" title="响应式工具"></a>响应式工具</h1><h2 id="可用的类"><a href="#可用的类" class="headerlink" title="可用的类"></a>可用的类</h2><p>通过单独或联合使用以下列出的类，可以针对不同屏幕尺寸隐藏或显示页面内容。</p><table><thead><tr><th align="left">&nbsp;</th><th align="left">超小屏幕手机(&lt;768px)</th><th align="left">小屏幕平板(≥768px)</th><th align="left">中等屏幕桌面(≥992px)</th><th align="left">大屏幕桌面(≥1200px)</th></tr></thead><tbody><tr><td align="left"><strong>.hidden-xs</strong></td><td align="left">隐藏</td><td align="left">可见</td><td align="left">可见</td><td align="left">可见</td></tr><tr><td align="left"><strong>.hidden-sm</strong></td><td align="left">可见</td><td align="left">隐藏</td><td align="left">可见</td><td align="left">可见</td></tr><tr><td align="left"><strong>.hidden-md</strong></td><td align="left">可见</td><td align="left">可见</td><td align="left">隐藏</td><td align="left">可见</td></tr><tr><td align="left"><strong>.hidden-lg</strong></td><td align="left">可见</td><td align="left">可见</td><td align="left">可见</td><td align="left">隐藏</td></tr></tbody></table><h1 id="导航条"><a href="#导航条" class="headerlink" title="导航条"></a>导航条</h1><p>要修改导航条的背景颜色在 &lt;nav&gt; 标签中添加 background-color 属性并设置相应颜色。</p><h1 id="徽章"><a href="#徽章" class="headerlink" title="徽章"></a>徽章</h1><p>给链接、导航等元素嵌套 <code>&lt;span class=&quot;badge&quot;&gt;</code> 元素，可以很醒目的展示新的或未读的信息条目。</p><h1 id="媒体对象"><a href="#媒体对象" class="headerlink" title="媒体对象"></a>媒体对象</h1><p>这是一个抽象的样式，用以构建不同类型的组件，这些组件都具有在文本内容的左或右侧对齐的图片（就像博客评论消息等）。</p><p>图片和文字搭配的时候考虑使用。</p><h1 id="选项卡（标签页）"><a href="#选项卡（标签页）" class="headerlink" title="选项卡（标签页）"></a>选项卡（标签页）</h1><p>使用前必须启用选项卡。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&apos;#myTabs a&apos;).click(function (e) &#123;</span><br><span class="line"></span><br><span class="line">    e.preventDefault()</span><br><span class="line">    $(this).tab(&apos;show&apos;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>基本模板</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 导航选项卡 --&gt;</span><br><span class="line">    &lt;ul class=&quot;nav nav-tabs&quot; role=&quot;tablist&quot;&gt;</span><br><span class="line">        &lt;li role=&quot;presentation&quot; class=&quot;active&quot;&gt;&lt;a href=&quot;#home&quot; aria-controls=&quot;home&quot; role=&quot;tab&quot; data-toggle=&quot;tab&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li role=&quot;presentation&quot;&gt;&lt;a href=&quot;#profile&quot; aria-controls=&quot;profile&quot; role=&quot;tab&quot; data-toggle=&quot;tab&quot;&gt;Profile&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li role=&quot;presentation&quot;&gt;&lt;a href=&quot;#messages&quot; aria-controls=&quot;messages&quot; role=&quot;tab&quot; data-toggle=&quot;tab&quot;&gt;Messages&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li role=&quot;presentation&quot;&gt;&lt;a href=&quot;#settings&quot; aria-controls=&quot;settings&quot; role=&quot;tab&quot; data-toggle=&quot;tab&quot;&gt;Settings&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 选项卡面板 --&gt;</span><br><span class="line">    &lt;div class=&quot;tab-content&quot;&gt;</span><br><span class="line">        &lt;div role=&quot;tabpanel&quot; class=&quot;tab-pane fade in active&quot; id=&quot;home&quot;&gt;...&lt;/div&gt;</span><br><span class="line">        &lt;div role=&quot;tabpanel&quot; class=&quot;tab-pane fade&quot; id=&quot;profile&quot;&gt;...&lt;/div&gt;</span><br><span class="line">        &lt;div role=&quot;tabpanel&quot; class=&quot;tab-pane fade&quot; id=&quot;messages&quot;&gt;...&lt;/div&gt;</span><br><span class="line">        &lt;div role=&quot;tabpanel&quot; class=&quot;tab-pane fade&quot; id=&quot;settings&quot;&gt;...&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>要使选项卡拥有渐变效果，在 <code>.tab-pane</code> 后添加 <code>.fade</code> 类即可。</li></ul><h1 id="弹出框"><a href="#弹出框" class="headerlink" title="弹出框"></a>弹出框</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>在网页生成对话框元素。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(function () &#123;</span><br><span class="line"></span><br><span class="line">  $(&apos;[data-toggle=&quot;popover&quot;]&apos;).popover()</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a  data-toggle=&quot;popover&quot; data-placement=&quot;left&quot; data-content=&quot;今天也要努力呢~&quot; </span><br><span class="line">    role=&quot;button&quot; tabindex=&quot;0&quot; data-trigger=&quot;focus&quot;&gt;</span><br><span class="line">    点我</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>通过使用 <code>.focus</code> 触发器可以在用户点击弹出框是让其消失。</p><p>必须使用 &lt;a&gt; 标签，不能使用 &lt;button&gt; 标签，并且，还必须包含 <code>role=&quot;button&quot;</code> 和 <code>tabindex</code> 属性。</p><h1 id="轮播图（Carousel）"><a href="#轮播图（Carousel）" class="headerlink" title="轮播图（Carousel）"></a>轮播图（Carousel）</h1><p>轮播图组件直接引入模板再二次开发即可。</p><p>要给轮播图设置圆角，在 <code>.carousel</code> 类外嵌套一个&lt;div&gt;标签，在该&lt;div&gt;标签中设置圆角，并且设置 <code>overflow: hidden;</code> 样式即可。</p><p>要给轮播图设置高度，给图片设置高度即可。</p><!-- rebuild by neat -->]]></content>
  </entry>
  <entry>
    <title>JQuery</title>
    <url>/posts/63260/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><h1 id="JQuery-基础"><a href="#JQuery-基础" class="headerlink" title="JQuery 基础"></a>JQuery 基础</h1><h2 id="使用-JQuery-的好处"><a href="#使用-JQuery-的好处" class="headerlink" title="使用 JQuery 的好处"></a>使用 JQuery 的好处</h2><p>JS存在相同事件，后一个事件会覆盖前一个事件。而 JQuery 同个元素绑定相同事件，不会覆盖。</p><a id="more"></a><h2 id="JQuery-版本选择"><a href="#JQuery-版本选择" class="headerlink" title="JQuery 版本选择"></a>JQuery 版本选择</h2><p>jQuery 2.0 版本以上是不支持 IE6，7，8 浏览器的。</p><p>如果使用的是 IE6，7，8 浏览器的话，你就得选择使用 jQuery1.9 版本或 1.9 之前的版本。</p><p>或者，你也可以通过条件注释在使用 IE6，7，8 浏览器的时候只允许包含 jQuery 1.9。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--[if lt IE 9]&gt; </span><br><span class="line"></span><br><span class="line">    &lt;script src=&quot;jquery-1.9.0.js&quot;&gt;&lt;/script&gt; </span><br><span class="line"></span><br><span class="line">&lt;![endif]--&gt; </span><br><span class="line"></span><br><span class="line">&lt;!--[if gte IE 9]&gt;&lt;!--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script src=&quot;jquery-2.0.0.js&quot;&gt;&lt;/script&gt; </span><br><span class="line"></span><br><span class="line">&lt;!--&lt;![endif]--&gt;</span><br></pre></td></tr></table></figure><p>CDN 引用 JQuery</p><p>JQuery 官方 CDN</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script</span><br><span class="line">  src=&quot;https://code.jquery.com/jquery-1.12.4.js&quot;</span><br><span class="line">  integrity=&quot;sha256-Qw82+bXyGq6MydymqBxNPYTaUXXq7c8v3CwiYwLLNXU=&quot;</span><br><span class="line">  crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>微软 CDN</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script src = &quot;https://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.12.4.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="JQuery-命名规范"><a href="#JQuery-命名规范" class="headerlink" title="JQuery 命名规范"></a>JQuery 命名规范</h2><p>JQuery 变量最好用 $ 符标识前缀，例如：$test。</p><h2 id="入口函数"><a href="#入口函数" class="headerlink" title="入口函数"></a>入口函数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(document).read(function()&#123;&#125;);</span><br><span class="line"></span><br><span class="line">// 或</span><br><span class="line"></span><br><span class="line">$(function()&#123;&#125;);</span><br></pre></td></tr></table></figure><p><code>window.onload</code> 和 <code>$(document).ready(function(){})</code> 的区别？</p><ul><li>执行时间上的区别：<ul><li><code>window.onload</code> 必须等到页面内（包括样式和图片）所有元素加载到浏览器中后才能执行。</li><li><code>$(document).ready(function(){})</code> 是DOM结构加载完毕后就会执行。</li></ul></li></ul><h2 id="核心函数"><a href="#核心函数" class="headerlink" title="核心函数"></a>核心函数</h2><p>核心函数可以写成 <code>$()</code> 或 <code>JQuery()</code> 两种形式。</p><p><code>$()</code> 调用 JQuery 核心函数。其中该核心函数可能的参数：</p><ol><li>接收一个函数。代表入口函数。</li><li>接受一个字符串。该字符串如果是字符串选择器，则返回一个JQuery对象，对象中保存了找到的DOM元素。如果传输HTML代码片段表示创建DOM元素。</li><li>接收一个DOM元素，会把该DOM元素包装成JQuery对象。<ul><li><code>$(document)</code> 是一个选择器，选中的是整个html所有元素的集合。</li></ul></li></ol><p>jQuery(selector, [context])</p><ul><li>如果没有指定 context 参数，$() 将在当前的 HTML document 中查找 DOM 元素；</li><li>如果指定了 context 参数，如一个 DOM 元素集或 jQuery 对象，那就会在这个 context 中查找。</li></ul><h2 id="JQuery对象"><a href="#JQuery对象" class="headerlink" title="JQuery对象"></a>JQuery对象</h2><p>JQuery对象是一个伪数组。伪数组是有length属性，下标从 0 到 length – 1。</p><h2 id="释放-符"><a href="#释放-符" class="headerlink" title="释放 $ 符"></a>释放 $ 符</h2><p>释放 $ 符的使用权。$ 符不能使用，必须使用 <code>JQuery</code> 标识符。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JQuery.noConflict();</span><br></pre></td></tr></table></figure><p>自定义一个访问符号。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var nj = JQuery.noConflict();</span><br></pre></td></tr></table></figure><h1 id="JQuery-对象方法"><a href="#JQuery-对象方法" class="headerlink" title="JQuery 对象方法"></a>JQuery 对象方法</h1><h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><p>在类上直接定义的方法称为静态方法。</p><p>each方法返回的是遍历的当前数组，each方法中回调函数不能有返回值。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$.each(数组或伪数组, function(index, value) &#123;</span><br><span class="line"></span><br><span class="line">	console.log(index, value);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>伪数组编写：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var p = &#123;</span><br><span class="line"></span><br><span class="line">    0:1, 1:3, 2:999, length: 3</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p>map方法中回调函数中没有返回值，则map返回空数组。如果回调函数中存在返回值，map方法返回一个关于返回值的数组。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$.map(数组或伪数组, function (value, index) &#123;</span><br><span class="line"></span><br><span class="line">	console.log(index, value);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>$.trim(字符串)</code> 该方法会把字符串前后空格去掉并返回。</p><p><code>$.isWindow(对象)</code> 判断该对象是否是 Window 对象，如果是返回 true，否则返回 false。</p><p><code>$.isArray(对象)</code> 判断该对象是否是数组对象，如果是返回true，否则返回false。</p><p><code>$.isFunction(对象)</code> 判断该对象是否是方法（Function）对象。注意 JQuery 本事是一个方法对象。本质是一个匿名函数。</p><p><code>$.holdReady(布尔值)</code> 布尔值为true，暂停入口函数的执行。布尔值为false，恢复入口函数的执行。</p><h2 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h2><p><code>.is(selector)</code> 根据选择器、元素或 jQuery 对象来检测匹配元素集合，如果这些元素中至少有一个元素匹配给定的参数，则返回 true。</p><ul><li>也可用于判断是否是同一个 JQ 对象。</li></ul><p><code>index()</code> 返回指定元素相对于其他指定元素的 下标。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&quot;li&quot;).click(function()&#123;</span><br><span class="line"></span><br><span class="line">  alert($(this).index());</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>这些元素可通过 jQuery 选择器或 DOM 元素来指定。</li><li>如果未找到元素，index() 将返回 -1。</li></ul><p><code>$(&quot;选择器&quot;).attr(&quot;属性名称&quot;, [&quot;属性值&quot;])</code></p><ul><li>该方法只传递一个属性名称参数，表示获取该对象的属性。传递属性名称和属性值，表示给属性名称赋值。</li><li>注意：<ul><li>如果是获取属性结点的值，无论找到多少个<strong>元素</strong>，都只会返回<strong>第一个元素</strong>指定的属性节点的值。</li><li>如果是设置属性结点的值，无论找到多少个<strong>元素</strong>，都会赋值。如果设置的属性不存在，则会给所有结点添加属性并赋值。</li></ul></li></ul><p><code>removeAttr(&quot;属性名称1 属性名称2&quot;)</code></p><ul><li>删除所有结点的指定属性名称。</li><li>多个属性用空格隔开。</li></ul><p><code>prop(&quot;属性名称&quot;, &quot;属性值&quot;)</code></p><ul><li>功能与attr方法类似。</li><li>具有 true 和 false 两个属性值的属性节点，如 checked, selected 或者 disabled 使用 prop 方法，该方法可以返回 true 或 false 以便于判断。其他的使用 attr 方法。</li></ul><p><code>removeProp(&quot;属性名称&quot;)</code></p><ul><li>该方法类似于 removAttr 方法。</li></ul><p><code>html(&quot;html代码片段&quot;)</code></p><ul><li>与innerHTML属性一样。如果想要获取html代码片段，html方法中不传入任何参数则返回该结点的html代码片段。</li></ul><p><code>text(&quot;文本&quot;)</code></p><ul><li>相当与修改该节点的文本，如果想要获取该节点的文本，text方法中不需要传入任何参数。</li></ul><p><code>val(&quot;value值&quot;)</code></p><ul><li>设置value值，如果想要获取，参数中不传入任何参数。</li></ul><p><code>addClass(&quot;class1 class2&quot;)</code></p><ul><li>向被选元素添加一个或多个类。</li></ul><p><code>removeClass(&quot;class1 class2&quot;)</code></p><ul><li>从被选元素移除一个或多个类。</li></ul><p><code>toggleClass(&quot;class1 class2&quot;)</code></p><ul><li>对设置或移除被选元素的一个或多个类进行切换。</li><li>例如首次触发 toggleClass 方法，添加 class1 和 class2 类，再次触发 toggleClass 方法，移除 class1 和 class2 类，以此类推。</li></ul><p><code>css()</code> 方法设置或返回被选元素的一个或多个样式属性。</p><ul><li><p><code>css(&quot;propertyname&quot;)</code></p><ul><li>返回指定的 CSS 属性的值。</li></ul></li><li><p><code>css(&quot;propertyname&quot;, &quot;value&quot;)</code></p><ul><li>设置指定的 CSS 属性。</li></ul></li><li><p><code>css({&quot;propertyname&quot;: &quot;value&quot;, &quot;propertyname&quot;: &quot;value&quot;})</code></p><ul><li>传入一个对象，设置多个 CSS 属性。</li></ul></li><li><p><code>css()</code> 方法如何添加 <code>!important</code>?</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">css(&quot;cssText&quot;, &quot;propertyname: value!important;&quot;);</span><br></pre></td></tr></table></figure></li></ul><p><code>width()</code> 方法返回或设置匹配元素的宽度。</p><ul><li>获取该元素的宽度，不包含 padding 和 borde 的值。</li><li><code>width(&quot;500px&quot;)</code> 修改元素的宽度为 500px。</li></ul><p><code>offset(value)</code> 方法设置匹配元素相对于文档的偏移（位置）。</p><ul><li>value 为带有 top 和 left 属性的对象。其中 value 对象中的值不用带 px 单位。</li><li><code>offset().top</code><ul><li>获取元素距离窗口的顶部距离。</li></ul></li><li><code>offset().left</code><ul><li>获取元素距离窗口的左边距离。</li></ul></li></ul><p>position 方法只能获取值不能设置。</p><ul><li><code>position().top</code><ul><li>返回匹配元素相对于父元素顶部的位置（偏移）。</li></ul></li><li><code>position().left</code><ul><li>返回匹配元素相对于父元素左边的位置（偏移）。</li></ul></li></ul><p><code>scrollTop()</code> 返回匹配元素的滚动条的垂直位置。</p><ul><li>$(“html”).scrollTop();<ul><li>普通浏览器获取网页滚动条的距离顶部值。</li></ul></li><li>$(“body”).scrollTop();<ul><li>IE浏览器获取网页滚动条的距离顶部值。</li></ul></li><li>scrollTop(10);<ul><li>设置滚动条距离顶部的位置，距离顶部为10px。</li></ul></li></ul><h2 id="获取节点"><a href="#获取节点" class="headerlink" title="获取节点"></a>获取节点</h2><table><thead><tr><th align="left">方法</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">.parent()</td><td align="left">获取父节点。</td></tr><tr><td align="left">.parents(selector)</td><td align="left">获得当前匹配元素集合中每个元素的祖先元素，使用选择器进行筛选是可选的。</td></tr><tr><td align="left">.prev()</td><td align="left">获取上一个兄弟节点。</td></tr><tr><td align="left">.next()</td><td align="left">获取下一个兄弟节点。</td></tr><tr><td align="left">.children()</td><td align="left">获取全部直接子节点。</td></tr><tr><td align="left">.children(“#test1”)</td><td align="left"></td></tr><tr><td align="left">.contents()</td><td align="left">获得匹配元素集合中每个元素的子节点，包括文本和注释节点。</td></tr><tr><td align="left">.contents(“#test1”)</td><td align="left"></td></tr><tr><td align="left">.find(“#test1”)</td><td align="left">字符串值，包含供匹配当前元素集合的选择器表达式。</td></tr></tbody></table><p><code>.siblings(selector)</code> 方法返回被选元素的所有兄弟元素（不包含被选元素）。</p><ul><li><p>通过选择器（selector）进行筛选是可选的。</p></li><li><p>实例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&quot;#li&quot;).siblings();</span><br></pre></td></tr></table></figure><p>siblings 方法专门运用与排他。</p></li></ul><h2 id="筛选结点"><a href="#筛选结点" class="headerlink" title="筛选结点"></a>筛选结点</h2><p>.last() 方法返回被选元素的最后一个元素。</p><p><code>.eq(index)</code></p><ul><li>将匹配的所有元素缩减到指定 index 上的一个元素。</li></ul><p><code>$(selector).get(index)</code> 获得由选择器指定的原生 DOM 元素。</p><ul><li>get 和 eq 方法的区别？<ul><li>get 方法返回原生DOM对象。</li><li>eq 方法返回 JQuery 对象。</li></ul></li></ul><h2 id="串联（控制-JQ-对象）"><a href="#串联（控制-JQ-对象）" class="headerlink" title="串联（控制 JQ 对象）"></a>串联（控制 JQ 对象）</h2><p>.add(selector) 将元素添加到匹配元素的集合中。</p><p>addBack() 添加堆栈中元素集合到当前集合。</p><ul><li><p>示例：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"body"</span>).find(<span class="string">"ul"</span>).find(<span class="string">"li"</span>).addBack();</span><br></pre></td></tr></table></figure><p>筛选到 li 的 JQuery 对象中添加 ul 到 li 的 JQuery 对象中（addBack 译为 “添加前面的”）。</p></li></ul><p>end() 返回最后一次破坏性（筛选）操作之前的 JQuery 对象。</p><ul><li>破坏性操作指将元素筛选到一个 JQuery 对象中再次筛选，改变原来的 JQuery 对象的元素。</li><li>end 方法返回被破坏的前的 JQuery 对象。</li></ul><p><code>.not(selector)</code> 从匹配元素集合中删除元素。</p><h2 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h2><p>核心函数接受html片段，表示创建一个节点。</p><h3 id="内部插入"><a href="#内部插入" class="headerlink" title="内部插入"></a>内部插入</h3><p><code>$(selector).append(content)</code> 方法在被选元素的结尾（仍然在内部）插入指定内容。</p><ul><li>content 必需。规定要插入的内容（可包含 HTML 标签）。</li></ul><p><code>$(content).appendTo(selector)</code> 方法在被选元素的结尾（仍然在内部）插入指定内容。</p><ul><li>append() 和 appendTo() 方法执行的任务相同。不同之处在于：内容和选择器的位置。</li></ul><p><code>$(selector).prepend(content)</code> 方法在被选元素的开头（仍位于内部）插入指定内容。</p><ul><li>prepend() 和 prependTo() 方法作用相同。差异在于语法：内容和选择器的位置.</li></ul><p><code>$(content).prependTo(selector)</code> 在被选元素的开头插入 HTML 元素。</p><ul><li>示例：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在每个 &lt;p&gt; 元素的开头插入 &lt;span&gt; 元素</span></span><br><span class="line">$(<span class="string">"&lt;span&gt;Hello World! &lt;/span&gt;"</span>).prependTo(<span class="string">"p"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  将最后一个 li 标签插入到 ul 元素里的开头</span></span><br><span class="line"><span class="comment">    因为选择的是同一个元素，所以最后一个元素会被移动到 ul 开头。 */</span></span><br><span class="line">$(<span class="string">"ul li:last-child"</span>).prependTo(<span class="string">"ul"</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="外部插入"><a href="#外部插入" class="headerlink" title="外部插入"></a>外部插入</h3><p><code>$(selector).after(content, function(index))</code> 在元素的后边，作为兄弟元素添加。</p><ul><li>content 必需。规定要插入的内容（可包含 HTML 标签）。<ul><li>可能的值：HTML 元素、jQuery 对象、DOM 元素。</li></ul></li><li>function(index) 规定返回待插入内容的函数。</li></ul><p><code>$(content).insertAfter(selector)</code> 在被选元素之后插入 HTML 标记或已有的元素（兄弟元素）。</p><p><code>$(selector).before(content, function(index))</code> 在被选元素之前插入指定的内容。</p><p><code>$(content).insertBefore(selector)</code> 在被选元素前插入 HTML 元素。</p><h3 id="包裹"><a href="#包裹" class="headerlink" title="包裹"></a>包裹</h3><p>$(selector).wrap(wrapper) 把每个被选元素放置在指定的 HTML 内容或元素中。</p><ul><li>wrapper 必需。规定包裹被选元素的内容。</li><li>示例：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).wrap(<span class="string">"&lt;div&gt;&lt;/div&gt;"</span>);</span><br></pre></td></tr></table></figure></li></ul><p>$(selector).wrapAll(wrapper) 在指定的 HTML 内容或<strong>元素(wrapper)</strong>中放置所有被选的元素。</p><p>$(selector).wrapInner(wrapper) 使用指定的 HTML 内容或元素，来包裹每个被选元素中的所有内容 <strong>(inner HTML)</strong>。</p><p>$(selector).unwrap() 删除被选元素的父元素。</p><h3 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h3><p>$(selector).replaceWith(content) 用指定的 HTML 内容或元素替换被选元素。</p><p>$(content).replaceAll(selector) 用指定的 HTML 内容或元素替换被选元素。</p><ul><li>replaceAll() 与 replaceWith() 作用相同。差异在于语法：内容和选择器的位置。</li></ul><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>$(selector).empty() 从被选元素移除所有内容，包括所有文本和子节点。</p><p><code>$(selector).remove()</code> 方法移除被选元素，包括所有文本和子节点。</p><p>$(selector).detach() 移除被选元素，包括所有文本和子节点。</p><ul><li>这个方法会保留 jQuery 对象中的匹配的元素，因而可以在将来再使用这些匹配的元素。</li><li>detach 会保留所有绑定的事件、附加的数据，这一点与 remove() 不同。</li></ul><h1 id="JQuery独有的选择器"><a href="#JQuery独有的选择器" class="headerlink" title="JQuery独有的选择器"></a>JQuery独有的选择器</h1><table><thead><tr><th align="left">选择器</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">:contains(text)</td><td align="left">经常与其他元素/选择器一起使用，来选择指定的组中包含指定文本的元素。</td></tr><tr><td align="left">:has(selector)</td><td align="left">匹配<strong>含有选择器</strong>所匹配的元素的元素（含有指定选择器的父亲元素）。</td></tr><tr><td align="left">:parent</td><td align="left">选取包含子节点或文本节点的元素（标签内有内容即可）。</td></tr><tr><td align="left">:empty</td><td align="left">匹配不包含子元素或者文本的<strong>空元素</strong>。</td></tr><tr><td align="left">:eq(index)</td><td align="left">选取带有指定 index 值的元素。index 从 0 开始。</td></tr><tr><td align="left">:lt(index)</td><td align="left">选取带有小于指定 index 值的元素。</td></tr><tr><td align="left">:gt(index)</td><td align="left">选取带有大于指定 index 值的元素。</td></tr><tr><td align="left">:odd</td><td align="left">选取每个带有奇数 index 值的元素（比如 1、3、5）。</td></tr><tr><td align="left">:event</td><td align="left">选取每个带有偶数 index 值的元素（比如 2、4、6）。</td></tr><tr><td align="left">:animated</td><td align="left">匹配所有正在执行动画效果的元素。</td></tr><tr><td align="left">:hidden</td><td align="left">匹配所有不可见元素(display:none)，或者 type 为 hidden 的元素。</td></tr><tr><td align="left">:visible</td><td align="left">匹配所有的可见元素。</td></tr><tr><td align="left">:header</td><td align="left">选择器选取所有标题元素（h1 - h6）。</td></tr><tr><td align="left">:input</td><td align="left">匹配所有 input, textarea, select 和 button 表单元素。</td></tr><tr><td align="left">:submit</td><td align="left">选取具有提交功能的元素（buttom 和 input type = “submit”）</td></tr><tr><td align="left">:buttom</td><td align="left">选取 buttom 和 input type 为 buttom 的元素。</td></tr><tr><td align="left">:checked</td><td align="left">选取所有选中的复选框或单选按钮。</td></tr><tr><td align="left">:selected</td><td align="left">选取被选择的 &lt;option&gt; 元素。</td></tr></tbody></table><p>:text、 :password、 :radio、 :checkbox、 :file 和 :reset 选取 type 对应 的 &lt;input&gt; 元素。</p><p><code>$(&quot;:header&quot;)</code> 等同于 <code>$(&quot;*:header&quot;)</code>。</p><p><code>:hidden</code> 选择器选取隐藏的元素。</p><ul><li>设置为 <code>display:none</code>。</li><li>带有 <code>type=&quot;hidden&quot;</code> 的表单元素。</li><li>隐藏的父元素（这也会隐藏子元素）。</li><li>选择器对 <code>visibility:hidden</code> 和 <code>opacity: 0</code> 的元素不起作用。</li></ul><p><code>:visible</code> 选择器选取当前可见的每个元素。</p><ul><li>设置为 <code>display:none</code>。</li><li>带有 <code>type=&quot;hidden&quot;</code> 的表单元素。</li><li>width 和 height 设置为 0。</li></ul><h2 id="混淆选择器"><a href="#混淆选择器" class="headerlink" title="混淆选择器"></a>混淆选择器</h2><p>$.escapeSelector() 函数用来转义CSS选择器中有特殊意义的字符或字符串。</p><ul><li><p>HTML</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">'#target'</span>&gt;</span>一些文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>JS</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"></span><br><span class="line">    <span class="comment">//将选中 id=#target</span></span><br><span class="line">    $( <span class="string">"div"</span> ).find( <span class="string">"#"</span> + $.escapeSelector( <span class="string">"#target"</span> )).css(<span class="string">'color'</span>,<span class="string">'red'</span>);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>$(&quot;#target&quot;)</code> 或 <code>$(&quot;##target&quot;)</code> 无法选中 id 为 “#target” 的 p 元素。</p></li></ul><h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><h2 id="事件机制"><a href="#事件机制" class="headerlink" title="事件机制"></a>事件机制</h2><p>事件冒泡</p><ul><li>事件冒泡顺序是由内到外进行事件传播，直到根节点。</li><li>如何阻止事件冒泡？<ul><li>在绑定事件末尾添加 <code>return false;</code> 或 <code>event.stopPropagation();</code> 表示阻止事件冒泡。</li></ul></li><li>什么是默认行为？<ul><li>部分 html 标签没有绑定事件，就存在默认事件，例如a标签。</li></ul></li><li>如何阻止默认行为？<ul><li>在绑定事件末尾添加 <code>return false;</code> 或 <code>event.preventDefault();</code> 表示阻止事件冒泡。</li></ul></li></ul><p>事件捕获</p><ul><li>捕获型事件和冒泡型事件是相反的，从不精确的对象到最精准的对象。</li></ul><h2 id="常用事件"><a href="#常用事件" class="headerlink" title="常用事件"></a>常用事件</h2><table><thead><tr><th align="left">事件</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">click</td><td align="left">点击事件</td></tr><tr><td align="left">mouseenter</td><td align="left">移动到指定元素</td></tr><tr><td align="left">mouseleave</td><td align="left">离开到指定元素</td></tr><tr><td align="left">mouseover</td><td align="left">移动到指定元素</td></tr><tr><td align="left">mouseout</td><td align="left">离开到指定元素</td></tr><tr><td align="left">hover</td><td align="left">监听鼠标移入移出指定元素</td></tr><tr><td align="left">scroll</td><td align="left">当用户滚动指定的元素时，会发生 scroll 事件</td></tr><tr><td align="left">ready</td><td align="left">DOM结构绘制完毕后就执行，不必等到加载完毕</td></tr></tbody></table><p>change 事件仅适用于文本域（text field），以及 textarea 和 select 元素。</p><ul><li>当用于 select 元素时，change 事件会在<strong>选择某个选项</strong>时发生。当用于 text field 或 text area 时，该事件会在元素<strong>失去焦点</strong>时发生。</li></ul><p>propertychange 功能同oninput，用以替代oninput在IE9以下的不兼容性。</p><p>mouseenter 和 mouseover 区别？</p><ul><li>不论鼠标指针穿过被选元素或其子元素，都会触发 mouseover 事件。</li><li>只有在鼠标指针穿过被选元素时，才会触发 mouseenter 事件。</li></ul><p>hover 使用案例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(document).ready(function()&#123;</span><br><span class="line"></span><br><span class="line">    // 第一个回调是鼠标移入到元素时触发。</span><br><span class="line">    $(&quot;p&quot;).hover(function()&#123;</span><br><span class="line"></span><br><span class="line">        $(&quot;p&quot;).css(&quot;background-color&quot;, &quot;yellow&quot;);</span><br><span class="line"></span><br><span class="line">    // 第二个回调是鼠标移出元素时触发。</span><br><span class="line">    &#125;, function()&#123;</span><br><span class="line"></span><br><span class="line">        $(&quot;p&quot;).css(&quot;background-color&quot;, &quot;pink&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="事件相关方法"><a href="#事件相关方法" class="headerlink" title="事件相关方法"></a>事件相关方法</h2><p>JQuery有两种事件绑定方法：</p><ol><li>.事件名称(function() { // 代码块 });<ul><li>部分JS事件没有实现。</li></ul></li><li>.on(“事件名称”, function() { // 代码块 });<ul><li>on 方法实现了全部JS事件。</li></ul></li><li>$(selector).one(event, data, function) 为被选元素附加一个或多个事件处理程序，并规定当事件发生时运行的函数。<ul><li>当使用 one 方法时，每个元素只能运行一次事件处理器函数。</li></ul></li></ol><p>在JQuery中，如果通过核心函数找到的元素不止一个，那么添加事件的时候，会逐个遍历所有元素并绑定事件。</p><p><code>$(selector).unbind(event,function)</code> 取消绑定元素的事件</p><ul><li>event<ul><li>可选。规定删除元素的一个或多个事件。由空格分隔多个事件值。如果没有规定参数，unbind() 方法会删除指定元素的所有事件处理程序。</li></ul></li></ul><p>off() 方法通常用于移除通过 on() 方法添加的事件处理程序。</p><ul><li><code>off()</code> 移除所有事件。</li><li><code>off(&quot;事件名称&quot;)</code> 移除指定类型事件名称。</li><li><code>off(&quot;事件名称&quot;, 函数名)</code> 移除指定类型事件的绑定事件。</li></ul><p><code>$(selector).trigger(event,[param1, param2, ...])</code> 方法触发被选元素的指定事件类型。</p><ul><li><p>自定义事件</p><ol><li>事件必须是通过 on 函数绑定的。</li><li>事件必须通过trigger来触发。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 绑定自定义事件。</span><br><span class="line">$(selector).on(&quot;自定义事件&quot;, function() &#123; // 代码块 &#125;);</span><br><span class="line"></span><br><span class="line">// 触发自定义事件。</span><br><span class="line">$(selector).trigger(&quot;自定义事件&quot;);</span><br></pre></td></tr></table></figure></li></ol></li><li><p>事件命名空间</p><ol><li>事件必须是通过on函数绑定的。</li><li>事件必须通过trigger来触发。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(selector).on(&quot;事件.命名空间&quot;, function () &#123; //代码块 &#125;);</span><br><span class="line"></span><br><span class="line">// 触发指定事件。</span><br><span class="line">$(selector).trigger(&quot;事件.命名空间&quot;);</span><br></pre></td></tr></table></figure></li></ol><ul><li>用 trigger 触发子元素带命名空间的事件，父元素带相同命名空间的相同事件也会触发。</li><li>触发子元素不带命名空间的事件，也会触发父元素带命名空间的相同事件。</li></ul></li><li><p>trigger 无法触发 a 标签点击事件，必须触发 a 标签内 span 标签的点击事件。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"a"</span>).find(<span class="string">"span"</span>).trigger(<span class="string">"click"</span>);</span><br></pre></td></tr></table></figure></li></ul><p><code>$(selector).triggerHandler(event, [param1, param2, ...])</code> 方法触发被选元素的指定事件类型。</p><ul><li>不会执行浏览器默认动作，也不会产生事件冒泡。</li></ul><p><code>$(selector).delegate(childSelector, event, data, function)</code> 事件委托。</p><ul><li>delegate() 方法为指定的元素（属于被选元素的子元素）添加一个或多个事件处理程序，并规定当这些事件发生时运行的函数。</li><li>使用 delegate() 方法的事件处理程序适用于当前或未来的元素（比如由脚本创建的新元素）。</li><li>一般将事件委托给 body 标签，因为 body 标签是所有页面元素的父元素。</li></ul><h1 id="动效"><a href="#动效" class="headerlink" title="动效"></a>动效</h1><p><code>$(selector).show(speed, callback)</code> 如果被选元素已被隐藏，则显示这些元素。</p><ul><li>speed 可选。规定元素从隐藏到完全可见的速度。默认为 “0”。<ul><li>可能的值：<ul><li>毫秒（比如 1500）</li><li>“slow”</li><li>“normal”</li><li>“fast”</li></ul></li></ul></li><li>callback 回调函数。可选，show 函数执行完之后，要执行的函数。</li></ul><p><code>$(selector).hide(speed, callback)</code> 如果被选的元素已被显示，则隐藏该元素。</p><ul><li>参照 show 方法。</li></ul><p><code>$(selector).toggle(speed, callback)</code> 如果元素已隐藏，则运行 show()。如果元素可见，则元素 hide()。这样就可以创造切换效果。</p><ul><li>参照 show 方法。</li></ul><p><code>$(selector).slideUp(speed, callback)</code> 通过使用滑动效果，隐藏被选元素，如果元素已显示出来的话。</p><p><code>$(selector).slideDown(speed, callback)</code> 通过使用滑动效果，显示隐藏的被选元素。</p><p><code>$(selector).slideToggle(speed, callback)</code> 通过使用滑动效果（高度变化）来切换元素的可见状态。</p><p><code>$(selector).fadeIn(speed, callback)</code> 使用淡入效果来显示被选元素，假如该元素是隐藏的。</p><p><code>$(selector).fadeOut(speed, callback)</code> 使用淡出效果来隐藏被选元素，假如该元素是隐藏的。</p><p><code>$(selector).fadeToggle(speed, callback)</code> 可以在 fadeIn() 与 fadeOut() 方法之间进行切换。</p><p><code>$(selector).fadeTo(speed, opacity, callback)</code> 方法允许渐变为给定的不透明度（值介于 0 与 1 之间）。</p><ul><li>opacity<ul><li>将淡入淡出效果设置为给定的不透明度（值介于 0 与 1 之间）。</li></ul></li></ul><p><code>$(selector).animate(styles, speed, easing, callback)</code> 执行 CSS 属性集的自定义动画。</p><ul><li><p>styles 必需，规定产生动画效果的 CSS 样式和值。</p><ul><li><p>CSS 样式使用 DOM 名称（比如 “fontSize”，驼峰式命名）来设置，而非 CSS 名称（比如 “font-size”）。</p></li><li><p>只有数字值可创建动画（比如 “margin:30px”）。字符串值无法创建动画（比如 “background-color:red”）。</p></li><li><p>使用 “+=” 或 “-=” 来创建相对动画（relative animations）。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&quot;.btn&quot;).click(function() &#123;</span><br><span class="line"></span><br><span class="line">    $(&quot;#box&quot;).animate(&#123; height: &quot;+=100&quot; &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>使用关键字（show、 hide、 toggle）创建动画</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 显示，关键字可以换成 hide 或 toggle。</span><br><span class="line">$(&quot;.btn&quot;).click(function() &#123;</span><br><span class="line"></span><br><span class="line">    $(&quot;#box&quot;).animate(&#123; height: &quot;show&quot; &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>easing 可选，规定在不同的动画点中设置动画速度的 easing 函数。</p><ul><li>可能的值：<ul><li>swing 缓动，默认值。</li><li>linear 线性。</li></ul></li></ul></li></ul><p><code>$(selector).stop([stopAll], [goToEnd])</code> 停止当前正在运行的动画。</p><ul><li>stopAll 布尔值。可选，规定是否<strong>停止</strong>被选元素的所有加入队列的动画。</li><li>goToEnd 布尔值。可选，规定是否允许完成当前的动画。该参数只能在设置了 stopAll 参数时使用。</li><li>主要用于频繁切换动画时必须等待前一个动画执行完毕才能执行下个动画的问题（动画队列）。</li><li>使用案例：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(this).stop().show(200).hide(200);</span><br></pre></td></tr></table></figure></li></ul><p>$(selector).finish([queueName]) 停止当前运行的动画，移除所有排队的动画，并为被选元素完成所有动画。</p><ul><li>queueName 可选参数。</li></ul><p><code>$(selector).delay(speed, queueName)</code> 设置对队列中的下一项的执行设置延迟。</p><ul><li>speed 可选。规定延迟的速度。<ul><li>可能的值：<ul><li>毫秒</li><li>“slow”</li><li>“fast”</li></ul></li></ul></li><li>queueName 可选。规定队列的名称。</li></ul><h2 id="动画队列"><a href="#动画队列" class="headerlink" title="动画队列"></a>动画队列</h2><p>所有动画操作都会加入到队列中，依次执行。</p><p>其他操作不会加入到动画队列中。</p><h1 id="JQuery-链式编程"><a href="#JQuery-链式编程" class="headerlink" title="JQuery 链式编程"></a>JQuery 链式编程</h1><p>链式操作通过对象上的方法最后执行 <code>return this</code> 把对象再返回回来。</p><p>链式写法可节省代码的编写速度，而且代码美观，比不断嵌套回调要美观。</p><h1 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h1><p>AJAX 可以请求本地 JSON 文件。</p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>$(selector).serialize() 创建以标准 URL 编码表示的文本字符串。</p><ul><li>返回字符串。</li><li>您可以选择一个或多个表单元素（比如 input 及/或 文本框），或者 form 元素本身。</li><li>选择 form 元素会把 form 元素里<strong>包含 name 属性</strong>的表单控件序列化（key=value 的形式）。</li></ul><p>$.ajax({name:value, name:value, … }) 方法用于执行 AJAX（异步 HTTP）请求。</p><ul><li>name 可能的值：<ul><li>type<ul><li>类型：String</li><li>请求方式 (“POST” 或 “GET”)， 默认为 “GET”。</li></ul></li><li>url 规定发送请求的 URL。默认是当前页面。<ul><li>类型：String</li><li>请求文件可以是任何类型的文件。</li></ul></li><li>async 布尔值，表示请求是否<strong>异步处理</strong>。默认是 true（异步）。</li><li>data 发送到服务器的请求参数。将自动转换为请求字符串格式。<ul><li>类型：String 或 Objec。</li><li>GET 请求中将附加在 URL 后。</li></ul></li><li>dataType 预期的服务器响应的数据类型。<ul><li>“xml”: 返回 XML 文档，可用 jQuery 处理。</li><li>“html”: 返回纯文本 HTML 信息；包含的 script 标签会在插入 dom 时执行。</li><li>“script”: 返回纯文本 JavaScript 代码。不会自动缓存结果。除非设置了 “cache” 参数。<ul><li>注意：在远程请求时(不在同一个域下)，所有 POST 请求都将转为 GET 请求（因为将使用 DOM 的 script标签来加载）。</li></ul></li><li>“json”: 返回 JSON 数据。</li><li>“jsonp”: JSONP 格式。使用 JSONP 形式调用函数时，如 “myurl?callback=?” jQuery 将自动替换 ? 为正确的函数名，以执行回调函数。</li><li>“text”: 返回纯文本字符串。</li></ul></li><li>success(result, status, xhr) 当请求成功时运行的函数。<ul><li>类型：Function</li><li>result 为返回的数据。</li></ul></li><li>error(xhr,status,error) 如果请求失败要运行的函数。<ul><li>类型：Function</li></ul></li></ul></li></ul><p>$.get(URL, data, function(data,status,xhr), dataType)</p><ul><li>data 发送到服务器的请求参数。将自动转换为请求字符串格式。<ul><li>类型：String 或 Objec。</li></ul></li><li>dataType<ul><li>可选。规定预期的服务器响应的数据类型。</li><li>默认地，jQuery 会智能判断。</li></ul></li></ul><p>$.post(URL, data, function(data,status,xhr), dataType)</p><h2 id="设置允许跨域携带-cookie-信息"><a href="#设置允许跨域携带-cookie-信息" class="headerlink" title="设置允许跨域携带 cookie 信息"></a>设置允许跨域携带 cookie 信息</h2><p>withCredentials 属性为 true 表示允许携带 cookie 信息。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    type: <span class="string">"GET"</span>,</span><br><span class="line">    url: url,</span><br><span class="line">    xhrFields: &#123;</span><br><span class="line"></span><br><span class="line">        withCredentials: <span class="literal">true</span> <span class="comment">// 携带跨域cookie</span></span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
  </entry>
  <entry>
    <title>JavaScript 入门笔记</title>
    <url>/posts/18006/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><p>本文主要记录 JavaScript 中相当基础的东西。</p><a id="more"></a><hr><h2 id="三种使用方式"><a href="#三种使用方式" class="headerlink" title="三种使用方式"></a>三种使用方式</h2><p>行内式：<code>onclick=&quot;JS 代码&quot;</code></p><p>页内式：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// JS 代码</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>type=&quot;text/javascript&quot;</code> 声明这段代码是 js 代码。</p><p>&lt;scritp&gt; 标签中的 js 代码最好写在文档尾部。因为 js 是解释型语言，浏览器从上往下执行，而 js 通常是对 html 标签进行操作，当 html 标签还没有被加载就执行很容易发生错误。</p><p>外链式：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"JS 文件路径"</span>&gt;</span><span class="handlebars"><span class="xml"><span class="tag">&lt;/<span class="name">scritp</span>&gt;</span></span></span></span><br></pre></td></tr></table></figure><p>注意：引用 js 外部文件时，&lt;script&gt; 标签中不能写 js 代码。</p><h2 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h2><ul><li>变量名可以包含英文字母、 数字、 下划线_、 $符号。但是不能以数字开头。</li><li>驼峰式命名，首字母小写，每个单词开头大写。</li><li>js 代码不加分号，也可以运行。因为浏览器自动添加，但会消耗系统资源，且会容易出错。</li></ul><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>js 注释方式与 java 类型。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这是一段注释，并不会被执行</span></span><br></pre></td></tr></table></figure><h2 id="字面量和常量的区别"><a href="#字面量和常量的区别" class="headerlink" title="字面量和常量的区别"></a>字面量和常量的区别</h2><p>a 为常量，10 为字面量。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h2 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h2><p>typeof 关键字判断变量数据类型。语法：<code>typeof 变量名</code></p><h2 id="浏览器内核"><a href="#浏览器内核" class="headerlink" title="浏览器内核"></a>浏览器内核</h2><p>浏览器内核包括渲染引擎和 JS 引擎。</p><ul><li>渲染引擎是一种对 HTML 文档进行解析并将其显示在页面上的工具。</li><li>JS 引擎执行 JS 脚本。</li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>栈中基本数据类型：</p><table><thead><tr><th align="left">数据类型</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">Number</td><td align="left">数字类型，整型和浮点型都属于这个类型。占 8 个字节。</td></tr><tr><td align="left">String</td><td align="left">字符串类型。</td></tr><tr><td align="left">Boolean</td><td align="left">布尔类型。占 4 个字节。</td></tr><tr><td align="left">undefined</td><td align="left">变量未初始化。</td></tr><tr><td align="left">null</td><td align="left">空类型。</td></tr></tbody></table><p>堆中引用数据类型：</p><table><thead><tr><th align="left">数据类型</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">Object</td><td align="left">对象类型。</td></tr><tr><td align="left">Array</td><td align="left">数组类型。</td></tr></tbody></table><h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>Number.MAX_VALUE</td><td>表示 Number 类型最大值</td></tr><tr><td>Number.MIN_VALUE</td><td>表示 Number 类型最小值</td></tr></tbody></table><p>如果超出了数据类型的最大值就会返回 Infinity，超出了最小值就返回 –Infinity，Infinity 属于 Number 类型。</p><p>js 对数值进行计算时，没有结果返回，则返回 NaN，NaN 是代表非数字值的特殊值，NaN 属于 Number 类型。</p><h3 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h3><table><thead><tr><th align="left">值</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">true</td><td align="left">非 0、 非空串 和 对象类型非 null 都是真。</td></tr><tr><td align="left">false</td><td align="left">0、空串、 null 和 undefined 都是假。</td></tr></tbody></table><h3 id="Undefined-和-Null"><a href="#Undefined-和-Null" class="headerlink" title="Undefined 和 Null"></a>Undefined 和 Null</h3><ul><li>undefined 是 Undefined 的字面量（常量），Undefined 是一种数据类型，表示变量未定义。</li><li>null 表示空对象，栈中的变量指向这块空间。</li><li>null 和 undefined 值相等，类型不等。</li><li>undefined 是由 null 衍生出来，如果比较其值，则相等。</li></ul><h2 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h2><p>js 定义变量用 var 关键字进行定义，不能用 Number、Boolean 和 String 等进行定义变量。</p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><h3 id="转成-String-类型"><a href="#转成-String-类型" class="headerlink" title="转成 String 类型"></a>转成 String 类型</h3><p>toString 方法将指定类型转成字符串，不会影响原变量类型，Null 和 Undefined 类型没有 toString 方法。</p><p>如果想转换 Null 和 Undefined 类型为字符串类型可以调用 String 的构造函数，进行装箱操作。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span>(<span class="literal">null</span>);</span><br><span class="line"><span class="built_in">String</span>(<span class="literal">undefined</span>);</span><br></pre></td></tr></table></figure><p>空串与任意类型进行拼接，即可转换成字符串类型。</p><h3 id="转成-Number-类型"><a href="#转成-Number-类型" class="headerlink" title="转成 Number 类型"></a>转成 Number 类型</h3><p>调用 Number 构造函数。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="string">"123"</span>); <span class="comment">//返回数值类型 123。</span></span><br></pre></td></tr></table></figure><p>如果是非空字符串则返回 NaN。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="string">"abc"</span>); <span class="comment">//返回数值类型 NaN。</span></span><br></pre></td></tr></table></figure><p>其他情况：</p><ul><li>将空串或全是空格的字符串转成 Number 类型，返回 0。</li><li>将 null 转成 Number 类型，返回 0。</li><li>将 undefined 转成 Number 类型，返回 NaN。</li></ul><p>可以在变量前面加 + 号运算符，将任意类型转成 Number 类型，原理还是通过 Number 构造函数。</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>==</td><td>判断值是否相等。</td></tr><tr><td>===</td><td>判断值和类型是否相等。</td></tr><tr><td>!==</td><td>判断值和类型是否相等。</td></tr></tbody></table><h3 id="号运算符"><a href="#号运算符" class="headerlink" title="+ 号运算符"></a>+ 号运算符</h3><ul><li>字符串类型与任意类型表示字符串拼接。</li><li>数值类型与数值类型、布尔类型和 Null 类型表示数值相加，true 表示 1，false 表示 0，Null 表示 0。</li><li>任何值与 undefined 进行相加其值是 undefined。</li></ul><h3 id="减、乘、除、取模"><a href="#减、乘、除、取模" class="headerlink" title="减、乘、除、取模"></a>减、乘、除、取模</h3><ul><li>字符串与数值类型进行 -减法、 *乘法、 /除法和 %取模运算，先把 String 类型转换成 Number 类型。</li><li>如果字符串包含非数值，则返回 NaN。</li><li>在 Number 类型前加 – 号运算符，表示对数值正负取反。</li><li>非 Number 类型会先转换成 Number 类型。</li></ul><h3 id="号运算符-1"><a href="#号运算符-1" class="headerlink" title="= 号运算符"></a>= 号运算符</h3><p>基本数据类型进行赋值运算，是对数值的拷贝。</p><h3 id="复合运算符"><a href="#复合运算符" class="headerlink" title="复合运算符"></a>复合运算符</h3><p>复合运算符（+=、-=、*=、/= 等等）比二元运算符优先级要低。</p><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><ul><li>undefined 与任何数比较都是 false。</li><li>任何数与数值类型进行比较，都会先转换成数值类型，但 null 除外。</li></ul><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>逻辑与：</p><ul><li>如果条件 A 不成立，则返回条件 A 数值本身。</li><li>如果条件 A 成立，不管条件 B 是否成立都会返回条件 B 本身的数值。</li></ul><p>逻辑或：</p><ul><li>如果条件 A 成立，则返回条件 A 本身的数值。</li><li>如果调价 A 不成立，则不管条件 B 是否成立都会返回条件 B 本身的数值。</li></ul><h3 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h3><p>条件表达式是否成立，成立则执行语句 1，否则执行语句 2。三目运算符可以取代 if…else。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">条件表达式 ? 语句 <span class="number">1</span> : 语句 <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><ul><li>case 判断是否相等时是全等于而不是等于，就是说会判断类型是否相等又会判断值是否相等。</li><li>case 中后面可以跟常量也可以跟变量。</li></ul><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h3><p>通过 Array 构造函数创建数组。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();                  <span class="comment">// 创建一个空数组。</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">20</span>);                <span class="comment">// 创建一个长度为 20 的数组。</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>, <span class="literal">true</span>, <span class="string">"abc"</span>);    <span class="comment">// 创建一个长度为 3 的数组，数组内容为 [1, true, “abc”]。</span></span><br></pre></td></tr></table></figure><p>使用数组字面量创建数组。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];   <span class="comment">// 创建一个空数组。</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">20</span>]; <span class="comment">// 创建一个数组长度为 1，数组内容为 20 的数组。</span></span><br></pre></td></tr></table></figure><ul><li>数组可以存储任意数据类型。</li><li>数组的本质是一个对象。</li><li>数组是在堆中开辟空间，结构是栈。</li><li>js 可以定义空数组，可以往空数组中不断存储数据，空数组的长度由存储了多少个元素决定。</li></ul><h3 id="数组对象中常用的属性和方法"><a href="#数组对象中常用的属性和方法" class="headerlink" title="数组对象中常用的属性和方法"></a>数组对象中常用的属性和方法</h3><p><code>arr.length;</code></p><ul><li>获取数组的长度。</li><li>可以通过修改数组的长度来改变数组中的元素个数，改小了，数组从后面删除元素。</li></ul><p>String <code>join( &quot;separator&quot; );</code></p><ul><li>将数组中所有元素以 separator 为分隔符组成一个<strong>字符串返回</strong>，separator 为空，则默认以逗号作为分隔符。</li><li>应用场景：数组中存放键值对，键值对中用分隔符（&amp;）组成一个字符串，在拼接到 GET 请求 URL 上。</li></ul><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>push( 任意参数 );</code></td><td>接收任意数量的参数，把它们添加到数组末尾，并返回修改后的数组长度。</td></tr><tr><td><code>pop();</code></td><td>数组末尾移除最后一项，减少数组的 length 值，然后返回移除的值。</td></tr><tr><td><code>unshift( 任意参数 );</code></td><td>将参数添加到数组开头，并返回数组长度。</td></tr><tr><td><code>shift();</code></td><td>删除原数组第一项，并返回删除元素的值。</td></tr><tr><td><code>reverse();</code></td><td>反转数组项的顺序。</td></tr></tbody></table><p><code>concat( 任意参数 );</code></p><ul><li>复制当前数组，并把参数中的值添加到复制数组的末尾并返回，如果参数为空，只赋值当前数组。</li><li>如果传入一个数组，会把传入数组中的值追个拆解，添加到复制数组的末尾。</li><li>push 函数不会对传入的数组拆解，而是直接添加到原数组末尾。</li></ul><p><code>indexOf( 查找的任意参数，（可选）数组下标 );</code></p><ul><li>返回要查找的项中的位置，如果没找到返回-1。</li><li>没有可选参数，默认从数组下标 0 开始查找。</li></ul><p><code>lastIndexOf( 查找的任意参数，（可选）数组下标 );</code> 功能与 indexOf 方法相同，但查找的方向与 indexOf 方法相反。</p><p>sort 函数对数组进行排序。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对数组进行升序排序。</span></span><br><span class="line">arr.sort();</span><br><span class="line"><span class="comment">//对数组进行降序排序。</span></span><br><span class="line">arr.sort( <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b – a;</span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure><p>forEach 函数遍历数组。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.forEach( <span class="function"><span class="keyword">function</span> (<span class="params">value, index</span>)) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( index + “:” + value );</span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure><p>splice 方法向数组中添加/删除项目，然后返回被删除的项目。该方法会改变原始数组。</p><p>语法：<code>splice(index, howmany, item1, ....., itemX)</code></p><table><thead><tr><th>参数</th><th>是否必须</th><th>说明</th></tr></thead><tbody><tr><td>index</td><td>必需</td><td>整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。</td></tr><tr><td>howmany</td><td>必需</td><td>要删除的项目数量。如果设置为 0，则不会删除项目。</td></tr><tr><td>item1, …, itemX</td><td>可选</td><td>向数组添加的新项目。</td></tr></tbody></table><p>示例：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一个参数为数组的下标，第二个参数为删除的项数。</span></span><br><span class="line">arr.splice(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">//向下标为 2 开始添加“参数”和 23。</span></span><br><span class="line">arr.splice(<span class="number">2</span>, <span class="number">0</span>, <span class="string">"参数"</span>, <span class="number">23</span>);</span><br><span class="line"><span class="comment">//清空数组。splice(0) 第二个参数不写的时候，则是删除第一个参数为索引后面的所有项。</span></span><br><span class="line">arr.splice(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>isArray</td><td>函数判断是否是数组。返回 boolean 类型。</td></tr><tr><td>toString</td><td>函数将数组转换成字符串。</td></tr><tr><td>valueOf</td><td>函数返回对象本身。</td></tr><tr><td>slice(start,end)</td><td>返回一个新的数组，包含从 start 到 end （不包括该元素）。</td></tr><tr><td>filter</td><td>方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</td></tr></tbody></table><p>示例：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ages = [<span class="number">32</span>, <span class="number">33</span>, <span class="number">16</span>, <span class="number">40</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkAdult</span>(<span class="params">age</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> age &gt;= <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = ages.filter(checkAdult);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为：32, 33, 40</p><p>ES6 新增：</p><ul><li>Array.from 方法用于将两类对象转为真正的数组。</li><li>Array.of 将一系列值转换成数组。使用构造方法即 <code>new Array()</code>, 无法创建单元素的数组，Array.of 弥补了这一点。</li></ul><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>charAt 获取响应位置字符。</p><ul><li>字符串第一个字符的下标是 0。</li><li>如果参数不在 0 与 String.length 之间，将会返回一个空串。</li></ul><p>charCodeAt 获取响应位置字符编码索引号，也就是返回该字符在 Unicode 字符集中的编码值。</p><p>indexOf 从前面寻找复合元素的位置，找不到返回-1。</p><p>lastIndexOf 从后面寻找复合元素的位置，找不到返回-1。</p><p>match() 方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。</p><p>语法：<code>stringObject.match(searchvalue || regexp);</code></p><table><thead><tr><th>参数</th><th>是否必须</th><th>说明</th></tr></thead><tbody><tr><td>searchvalue</td><td>必需</td><td>规定要检索的字符串值。</td></tr><tr><td>regexp</td><td>必需</td><td>规定要匹配的模式的 RegExp 对象。</td></tr></tbody></table><p>concat 函数连接字符串。</p><p>split 方法用于把一个字符串分割成字符串数组。</p><p>语法：<code>split(separator, howmany)</code></p><ul><li>separator 必需。字符串或正则表达式，从该参数指定的地方分割。</li><li>howmany 可选。该参数可指定返回的数组的最大长度。如果设置了该参数，返回的子串不会多于这个参数指定的数组；如果没有设置该参数，整个字符串都会被分割，不考虑它的长度。</li></ul><p>示例：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"hello world!"</span>;</span><br><span class="line">str.split(<span class="string">""</span>);</span><br><span class="line"><span class="comment">// 返回 h, e, l, l, o, , , w, o, r, l, d</span></span><br></pre></td></tr></table></figure><p>slice(“开始位置”, “结束位置”); 截取字符串。从开始位置截取到结束位置；如果没有结束位置，则会一直结束到末尾。</p><p>substr(“截取位置”, “截取长度”); 截取字符串。</p><p>String.toUpperCase(); 将字符串转换为大写。没有入参。</p><p>String.toLowerCase(); 将字符串转换为小写。</p><h2 id="Number-1"><a href="#Number-1" class="headerlink" title="Number"></a>Number</h2><p>isNaN（值）; 判断传入值是否是 Number 类型，如果不是返回 true，否则返回 false。</p><p>parseInt 函数，提取字符串中的整数。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">"123abc123"</span>); <span class="comment">//返回 123。</span></span><br></pre></td></tr></table></figure><p>parseFloat 函数，提取字符串中的浮点数。</p><p>Number.toFixed(2); 保留 2 位小数，后面小数会 4 舍 5 入。</p><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><p>声明日期对象：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br></pre></td></tr></table></figure><p>Date 类中的方法：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>getDate();</code></td><td>获取日 1 ~ 31</td></tr><tr><td><code>getDay();</code></td><td>获取星期 0 – 6</td></tr><tr><td><code>getMonth();</code></td><td>获取月 0 – 11</td></tr><tr><td><code>getFullYear();</code></td><td>获取完整年</td></tr><tr><td><code>getHours();</code></td><td>获取小时 0 – 23</td></tr><tr><td><code>getMinutes();</code></td><td>获取分钟 0-59</td></tr><tr><td><code>getSeconds();</code></td><td>获取秒。范围 0 ~ 59</td></tr><tr><td><code>getMilliseconds();</code></td><td>获取毫秒</td></tr><tr><td><code>getTime();</code></td><td>获取时间戳。单位一般为毫秒。</td></tr></tbody></table><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><p>Math.random() 是令系统随机选取大于等于 0.0 且小于 1.0 的伪随机 double 值。</p><p>取 0 到 9 的数：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random * <span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>取 1 到 9 的数：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random * <span class="number">9</span>) + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>取 -5 到 5 的数：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random * <span class="number">11</span>) - <span class="number">5</span>;</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h3><p>函数直接声明：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名 （参数 1, 参数 2, 参数 3…) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 函数体；</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数表达式声明：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 函数体；</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用 Function 构造函数：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> <span class="built_in">Function</span> ( <span class="string">"函数体；"</span> );</span><br></pre></td></tr></table></figure><p>匿名函数：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 函数体；</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用场景：</p><ul><li><p>匿名函数的使用：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 函数体；</span></span><br><span class="line"></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li><li><p>用在定时器。</p></li><li><p>用在绑定事件。</p></li></ul><h3 id="函数要点"><a href="#函数要点" class="headerlink" title="函数要点"></a>函数要点</h3><ul><li>函数的形参不用 var 关键字修饰，只写变量名即可定义形参。</li><li>函数直接声明会把当前作用域的函数声明提前到整个作用域；而表达式声明不会提前到整个作用域。</li><li>js 当中的形参个数和实参个数不一定要相等。</li><li>函数没有返回值默认返回 undefined。</li><li>定义在函数内部的变量属于局部变量。定义在&lt;script&gt; 标签中或不在函数内部的变量属于全局变量。</li><li>没有 var 关键字修饰的变量不管是否存在与函数内部，都属于全局变量。</li><li>局部变量退出作用域自动销毁；全局变量关闭网页或退出浏览器才会被销毁。</li></ul><p>函数中访问函数内部变量会声明提前。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出 undefined，等价于：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p>把函数的指针作为参数传递给另一个函数。在函数内指针被用来调用其所指向的函数的过程称为回调函数。</p><h3 id="this-指针"><a href="#this-指针" class="headerlink" title="this 指针"></a>this 指针</h3><ul><li>this 的指向在函数创建的时候是决定不了的，在调用的时候才能决定，谁调用的就指向谁。</li><li>可以在 onclick 绑定事件中传入 this 指针，获取本节点。</li><li>this 对象在程序中随时会改变，而 <code>var that=this</code> 之后，that 没改变之前仍然是指向当时的 this，这样就不会出现找不到原来的对象。</li></ul><h3 id="函数中内置对象和属性"><a href="#函数中内置对象和属性" class="headerlink" title="函数中内置对象和属性"></a>函数中内置对象和属性</h3><p>arguments：</p><ul><li>arguments 对象包含了传入函数中的所有参数，通过下标访问传入函数的参数。</li><li>arguments 并不是一个数组，除了 length 属性之外，数组的所有属性和方法都不具有。</li></ul><p>callee：</p><ul><li>callee 属性，该属性是一个指针，指向拥有这个 arguments 对象的函数。</li><li>callen 可以当该函数递归使用。</li></ul><p>函数名。length 获取形参的个数。</p><h3 id="剩余运算符"><a href="#剩余运算符" class="headerlink" title="剩余运算符"></a>剩余运算符</h3><ul><li>rest 参数只能写在最后，前面用 <code>...</code> 标识。</li><li>多余的参数以数组形式交给变量 rest；如果传入的参数连正常定义的参数都没填满，rest 参数会接收一个空数组。</li><li>rest 的变量名可随意，但必须符合命名规则。</li></ul><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>“面向对象”和“基于对象”两个不同的概念。面向对象的三大特点（封装，继承，多态）缺一不可，通常“基于对象”使用对象，但是无法利用现有的对象模板产生新的对象类型，继而产生新的对象，也就是说“基于对象”没有继承的特点，而“多态”是表示为父类类型的子类对象实例，没有了继承的概念也就无从谈论“多态”。</p><p>js 是基于对象，因为 js 无法创建自定义的类型，不能支持继承和多态。</p><h3 id="对象定义"><a href="#对象定义" class="headerlink" title="对象定义"></a>对象定义</h3><p>js 通过键值对的方式创建对象，其值可以是数据和函数。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="comment">// 属性</span></span><br><span class="line">    num: <span class="number">18</span>,</span><br><span class="line">    <span class="comment">// 方法</span></span><br><span class="line">    f: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 函数体；</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>ES6 中对象的键值一样可简写成一个。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">let</span> name = <span class="string">"zs"</span>;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line"></span><br><span class="line">    age,</span><br><span class="line">    name</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="对象的访问方式"><a href="#对象的访问方式" class="headerlink" title="对象的访问方式"></a>对象的访问方式</h3><ul><li>通过<code>obj.key</code>方式：<code>obj.name;</code>。</li><li>通过对象<code>[&quot;key&quot;]</code>方式：<code>obj[&quot;name&quot;];</code> 或 <code>obj[&quot;f&quot;]();</code></li></ul><h3 id="动态添加对象属性"><a href="#动态添加对象属性" class="headerlink" title="动态添加对象属性"></a>动态添加对象属性</h3><p>对象属性方法除了通过字面量方式定义，还可以直接追加到当前对象。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">obj.sex = <span class="string">"男"</span>;</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line">obj.run = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 函数体；</span></span><br><span class="line">&#125;;</span><br><span class="line">obj.run(); <span class="comment">//调用</span></span><br></pre></td></tr></table></figure><p>键值可以接受变量。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">name = <span class="string">"aibiu"</span>;</span><br><span class="line">obj = &#123;</span><br><span class="line"></span><br><span class="line">    aibiu: <span class="number">233</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj[name]);</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">obj = &#123;</span><br><span class="line"></span><br><span class="line">    [name]: <span class="number">233</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj.aibiu);</span><br></pre></td></tr></table></figure><p>字符串拼接变量名。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>[<span class="string">"num_"</span> + i] = i;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：如果访问的属性不存在，可以使用 || 指定默认值：<code>obj.age || &quot;默认值&quot;;</code></p><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>构造函数第 1 种写法：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line">    obj.age = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    obj.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 函数体；</span></span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实例化</span></span><br><span class="line"><span class="keyword">var</span> p = Person();</span><br></pre></td></tr></table></figure><p>构造函数第 2 种写法：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>（<span class="title">argument1</span>, <span class="title">argument2</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.attr1 = attr1;</span><br><span class="line">    <span class="keyword">this</span>.attr2 = attr2;</span><br><span class="line">    <span class="keyword">this</span>.function_name = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 函数体；</span></span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实例化</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(argument1, argument2);</span><br></pre></td></tr></table></figure><p>构造函数第 3 种写法：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.attr1 = obj.attr1;</span><br><span class="line">    <span class="keyword">this</span>.attr2 = obj.attr2;</span><br><span class="line">    <span class="keyword">this</span>.function_name = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 函数体；</span></span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实例化</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(obj);</span><br></pre></td></tr></table></figure><ul><li>js 对象属性和方法如果没有，可以动态添加修改。</li><li>如果输出一个不存在的变量，值为 undefined，调用不存在的方法，会报错。</li></ul><p>构造函数第 4 种写法：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>._init(obj);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line"></span><br><span class="line">    _init: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.attr1 = obj.attr1;</span><br><span class="line">        <span class="keyword">this</span>.attr2 = obj.attr2;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    attr_name：value,</span><br><span class="line">    function_name：definition</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>constructor 为构造函数。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">constructor</span>.staticMethod = function() &#123;</span><br><span class="line">    <span class="comment">// 代码块</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>调用：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">constructor</span>.staticMethod();</span><br></pre></td></tr></table></figure><p>注意：静态方法不能被实例对象调用。</p><h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><p>instanceof 是一个关键字，判断 A 是否是 B 类型。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">boolean = A <span class="keyword">instanceof</span> B;</span><br></pre></td></tr></table></figure><h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><p>delete 操作符用于删除对象的某个属性。</p><p>语法：<code>delete object.property</code> 或 <code>delete object[&#39;property&#39;]</code>。</p><p>将 CourseName 属性内容赋给 title 属性，然后再将 CourseName 属性删除掉即可快速替换属性名。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">item.title = item.CourseName;</span><br><span class="line"><span class="keyword">delete</span> item.CourseName;</span><br></pre></td></tr></table></figure><p>注意：delete 只能删除一个属性，要同时删除多个属性需要自己封装。</p><h2 id="Function-对象"><a href="#Function-对象" class="headerlink" title="Function 对象"></a>Function 对象</h2><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>call(thisOject, arg1, arg2, …);</td><td>调用一个对象的一个方法，以另一个对象替换当前对象（改变 this 的指向）。</td></tr></tbody></table><h2 id="Object-对象"><a href="#Object-对象" class="headerlink" title="Object 对象"></a>Object 对象</h2><p>Object.defineProperty 定义新属性或修改原有的属性。</p><p>语法：<code>Object.defineProperty(obj, prop, descriptor);</code></p><table><thead><tr><th>参数</th><th>是否必须</th><th>说明</th></tr></thead><tbody><tr><td>obj</td><td>必需</td><td>目标对象</td></tr><tr><td>prop</td><td>必需</td><td>需定义或修改的属性的名字</td></tr><tr><td>descriptor</td><td>必需</td><td>目标属性所拥有的特性</td></tr></tbody></table><p>返回值：返回传入函数的对象。</p><p>例子：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty( obj, <span class="string">"newKey"</span>, &#123;</span><br><span class="line"></span><br><span class="line">    configurable: <span class="literal">true</span> | <span class="literal">false</span>,</span><br><span class="line">    enumerable: <span class="literal">true</span> | <span class="literal">false</span>,</span><br><span class="line">    value: any_value,</span><br><span class="line">    writable: <span class="literal">true</span> | <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure><ul><li>value 属性对应的值。</li><li>writable 属性的值是否可以被重写。为 true 可以被重写，为 false 不能被重写，默认 false 。</li><li>enumerable 此属性是否可以被枚举（使用 for…in 或 Object.keys()）。设置为 true 可以被枚举，设置为 false 不能被枚举，默认为 false 。</li><li>configurable 目标属性是否可以使用 delete 删除或再次设置特性。为 true 可以被删除或可以重新设置特性，为 false 不能被删除或不可以重新设置特性，默认为 false 。</li></ul><p>Object.keys() 方法用于从数组创建一个包含数组键的可迭代对象。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.keys(obj);</span><br></pre></td></tr></table></figure><p>Object.values() 方法用于从数组创建一个包含数组值的可迭代对象。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.values(obj);</span><br></pre></td></tr></table></figure><p>Object.entries() 方法用于从数组创建一个包含数组键值的可迭代对象。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.entries(obj);</span><br></pre></td></tr></table></figure><p>Object.assign() 方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> returnedTarget = <span class="built_in">Object</span>.assign(target, source);</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>教程</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML 进阶之 HTML 常用标签的汇总</title>
    <url>/posts/902722a9/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><p>本编文章记录开发中经常使用到的 HTML 标签，主要记录常用标签的各种功能以及自带属性。</p><a id="more"></a><hr><h2 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h2><ul><li><code>&lt;h&gt;</code> 为标题标签。 <code>&lt;h1&gt;</code> 定义最大的标题， <code>&lt;h6&gt;</code> 定义最小的标题。</li><li><code>&lt;hr&gt;</code> 标签在 HTML 页面中创建一条水平线。单标签。</li><li><code>&lt;p&gt;</code> 段落标签。</li><li><code>&lt;br/&gt;</code> 换行标签（单标签）。</li><li><code>&lt;wbr/&gt;</code> 软换行标签（单标签）。元素可以容纳一行文字时不会强制换行。当元素容纳不了一行文字时会换行。</li><li><code>&lt;div&gt;</code> 定义文档中的节。主要对文档结构进行划分。一般是划分大的区块。</li><li><code>&lt;span&gt;</code> 定义文档中的节。一般是划分小的区块。没有换行。</li></ul><h2 id="a"><a href="#a" class="headerlink" title="a"></a>a</h2><p>a 为超链接标签，用于从一张页面链接到另一张页面。</p><h3 id="href"><a href="#href" class="headerlink" title="href"></a>href</h3><p>href 属性，请求（跳转）目标 URL。</p><h3 id="target"><a href="#target" class="headerlink" title="target"></a>target</h3><p>target 规定在何处打开链接文档。参数值：</p><ul><li><code>_blank</code> 在新窗口打开链接文档。且旧的链接文档还在。</li><li><code>_self</code> 在当前窗口打开链接文档。</li></ul><h2 id="img"><a href="#img" class="headerlink" title="img"></a>img</h2><p>img 为图像标签（单标签），向网页中嵌入一幅图像。</p><h3 id="属性说明"><a href="#属性说明" class="headerlink" title="属性说明"></a>属性说明</h3><ul><li>alt 属性在浏览器无法载入图像时，替换文本属性告诉读者她们失去的信息。此时，浏览器将显示这个替代性的文本而不是图像。</li><li>width 属性设置图片宽度。</li><li>height 属性设置图片高度。</li></ul><h4 id="src"><a href="#src" class="headerlink" title="src"></a>src</h4><p>src 属性规定显示图像的 URL。</p><p>绝对路径是指目录下的绝对位置，直接到达目标位置，通常是从盘符开始的路径。如果图片来源于网络，那么必须写绝对路径。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://image.baidu.com/pcindexhot"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"120"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>相对路径就是指由这个文件所在的路径引起的跟其它文件（或文件夹）的路径关系。</p><h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><p>html 可告知浏览器其自身是一个 HTML 文档。</p><h3 id="lang"><a href="#lang" class="headerlink" title="lang"></a>lang</h3><p>lang 属性规定元素内容的语言。</p><table><thead><tr><th align="left">示例</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">lang=”zh-Hans”</td><td align="left">中文</td></tr><tr><td align="left">lang=”zh-cmn-Hans”</td><td align="left">简体中文</td></tr><tr><td align="left">lang=”zh-cmn-Hant”</td><td align="left">繁体中文</td></tr><tr><td align="left">lang=”en”</td><td align="left">English</td></tr></tbody></table><h2 id="style"><a href="#style" class="headerlink" title="style"></a>style</h2><p><code>&lt;style&gt;</code> 定义文档的标签样式信息。</p><h3 id="scoped"><a href="#scoped" class="headerlink" title="scoped"></a>scoped</h3><p>scoped 属性是一个布尔属性。如果使用该属性，则样式仅仅应用到 style 元素的父元素及其子元素。</p><h2 id="link"><a href="#link" class="headerlink" title="link"></a>link</h2><p><code>&lt;link&gt;</code> 标签定义文档与外部资源的关系。</p><h3 id="属性说明-1"><a href="#属性说明-1" class="headerlink" title="属性说明"></a>属性说明</h3><ul><li><code>href</code> 规定被链接文档的位置。</li><li><code>type</code> 规定被链接文档的 MIME 类型。</li></ul><h4 id="rel"><a href="#rel" class="headerlink" title="rel"></a>rel</h4><p><code>rel</code> 规定当前文档与被链接文档之间的关系。参数如下：</p><ul><li><code>icon</code> 浏览器图标。</li><li><code>stylesheet</code> 样式表。</li></ul><h5 id="设置网站图标"><a href="#设置网站图标" class="headerlink" title="设置网站图标"></a>设置网站图标</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"shortcut icon"</span> <span class="attr">type</span>=<span class="string">"images/x-icon"</span> <span class="attr">href</span>=<span class="string">"./favicon.ico"</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="meta"><a href="#meta" class="headerlink" title="meta"></a>meta</h2><p><code>&lt;meta&gt;</code> 元标签（记录辅助信息）。目前几乎所有搜索引擎都使用网络机械人自动查找页面中的 meta 值来给网页分类。</p><h3 id="属性说明-2"><a href="#属性说明-2" class="headerlink" title="属性说明"></a>属性说明</h3><ul><li><code>charset</code> 设置网页的文字编码格式。常用的值：UTF-8。</li><li><code>content</code> 通常与 http-equiv 或 name 属性一起使用，修饰两个属性值内容。</li></ul><h4 id="name"><a href="#name" class="headerlink" title="name"></a>name</h4><p><code>name</code> 把 content 属性关联到一个名称。参数如下：</p><h5 id="keywords"><a href="#keywords" class="headerlink" title="keywords"></a>keywords</h5><p><code>keywords</code> 为搜索引擎提供关键字列表。各关键字间用英文逗号 “, “ 隔开。keywords 里面不要放置过多的关键词，一般 7 个以内为宜。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"关键字 1, 关键字 2, 关键字 3"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h5 id="description"><a href="#description" class="headerlink" title="description"></a>description</h5><p><code>description</code> 告诉搜索引擎你的主要内容。description 字数建议 75 个字，150 个字符以内。这样搜索引擎刚好能够编入索引被用户查看到，超过该字数用户是看不到的也没有实际作用。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"一段描述。.."</span> /&gt;</span></span><br></pre></td></tr></table></figure><h5 id="renderer"><a href="#renderer" class="headerlink" title="renderer"></a>renderer</h5><p>renderer 告诉双内核浏览器使用那个内核（IE 和 谷歌）。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"renderer"</span> <span class="attr">content</span>=<span class="string">"webkit"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"renderer"</span> <span class="attr">content</span>=<span class="string">"ie-comp"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"renderer"</span> <span class="attr">content</span>=<span class="string">"ie-stand"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h5 id="robots"><a href="#robots" class="headerlink" title="robots"></a>robots</h5><p>robots 告诉搜索机器人哪些页面需要索引。可能的值：all | none | index | noindex | follow | nofollow</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"none"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h5 id="author"><a href="#author" class="headerlink" title="author"></a>author</h5><p>author 标注网页的作者。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=<span class="string">"Hege Refsnes"</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="viewport"><a href="#viewport" class="headerlink" title="viewport"></a>viewport</h5><p>viewport 视口。手机浏览器是把页面放在一个虚拟的”窗口”（viewport）中，通常这个虚拟的”窗口”（viewport）比屏幕宽，这样就不用把每个网页挤到很小的窗口中（这样会破坏没有针对手机浏览器优化的网页的布局），用户可以通过平移和缩放来看网页的不同部分。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, minimum-scale=1.0, maximun-scale=1.0, user-scalable=no"</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>width：控制 viewport 的大小，可以指定的一个值，如 600，或者特殊的值，如 device-width 为设备的宽度（单位为缩放为 100% 时的 CSS 的像素）。</li><li>height：和 width 相对应，指定高度。</li><li>initial-scale：初始缩放比例，也即是当页面第一次 load 的时候缩放比例。</li><li>maximum-scale：允许用户缩放到的最大比例。</li><li>minimum-scale：允许用户缩放到的最小比例。</li><li>user-scalable：用户是否可以手动缩放。</li></ul><h4 id="http-equiv"><a href="#http-equiv" class="headerlink" title="http-equiv"></a>http-equiv</h4><p>http-equiv 可用于模拟一个 HTTP 响应头。</p><h5 id="expires"><a href="#expires" class="headerlink" title="expires"></a>expires</h5><p>expires 设定网页的到期时间。一旦网页过期（浏览器读取本地时间判断有没有过期），必须到服务器上重新传输。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"expires"</span> <span class="attr">content</span>=<span class="string">"Wed, 20 Jun 2007 22:33:00 GMT"</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>注意：必须使用 GMT 的时间格式。</li></ul><h5 id="X-UA-Compatible"><a href="#X-UA-Compatible" class="headerlink" title="X-UA-Compatible"></a>X-UA-Compatible</h5><p>X-UA-Compatible 是 IE8 的一个专有 <code>&lt;meta&gt;</code> 属性，它告诉 IE8 采用何种 IE 版本去渲染网页。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>IE=edge</code> 设置 IE 为 edge 模式，edge 模式告诉 IE 以最高级模式渲染文档。或使用 Chrome Frame 渲染。</li><li><code>chrome=1</code> ，如果客户端 Chrome Frame 安装并启用，那么浏览器访问页面会被 Chrome 内核渲染。</li></ul><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul><li><code>&lt;ul&gt;</code> 定义无序列表。</li><li><code>&lt;ol&gt;</code> 定义有序列表。<code>type</code> 属性，规定列表的项目符号的类型。</li><li><code>&lt;li&gt;</code> 定义列表的项目。标签可用在有序列表 ol 和无序列表 ul 中。</li><li><code>&lt;dl&gt;</code> 定义定义列表。</li><li><code>&lt;dt&gt;</code> 定义列表中的项目。</li><li><code>&lt;dd&gt;</code> 定义列表中项目的描述。</li></ul><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Milk<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Milk<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="定义列表"><a href="#定义列表" class="headerlink" title="定义列表"></a>定义列表</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Black hot drink<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Milk<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>White cold drink<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h2><h3 id="form"><a href="#form" class="headerlink" title="form"></a>form</h3><p><code>&lt;form&gt;</code> 定义可供用户输入的 HTML 表单。如果有 <code>&lt;form&gt;</code> 标签，在点击提交铵钮时，浏览器自动收集参数，并打包一个 http 请求到服务器，完成表单提交。在这一过程中，浏览器会根据 method 的不同，将参数编码后，放在 urI 中 (get)，或者放在请求的 data 中 (post)， 然后发送到服务器。如果没有 form，post 方式的提交需要使用 ajax 手工完成，get 方式的提交需要自己拼接 url。</p><h4 id="属性说明-3"><a href="#属性说明-3" class="headerlink" title="属性说明"></a>属性说明</h4><ul><li><code>action</code> 规定当提交表单时向何处发送表单数据。</li><li><code>name</code> 规定表单的名称。</li><li><code>method</code> 规定用于发送 form-data 的 HTTP 方法。参数 get 或 post。</li></ul><h5 id="enctype"><a href="#enctype" class="headerlink" title="enctype"></a>enctype</h5><p><code>enctype</code> 规定在发送表单数据之前如何对其进行编码。参数如下：</p><ul><li>application/x-www-form-urlencoded 当请求方式为 get 时候，浏览器用 x-www-form-urlencoded 的编码方式把 form 数据转换成一个字串（name1=value1&amp;name2=value2…），然后把这个字符串拼接到 url 后面，用？分割，加载这个新的 url。</li><li>multipart/form-data 浏览器会把整个表单以控件为单位分割。并为每个部分加上 Content-Disposition(form-data 或者 file), Content-Type（默认为 text/plain), name（控件 name) 等信息，并加上分割符 (boundary)。规定数据是以二进制编码的方式传输。</li></ul><h3 id="input"><a href="#input" class="headerlink" title="input"></a>input</h3><p><code>&lt;input&gt;</code> 输入框标签。</p><h4 id="属性说明-4"><a href="#属性说明-4" class="headerlink" title="属性说明"></a>属性说明</h4><ul><li><code>value</code> 规定 <code>&lt;input&gt;</code> 标签的值。</li><li><code>placeholder</code> 设置输入框的默认提示文字。</li><li><code>name</code> 定义 input 元素的名称。</li><li><code>accept</code> 规定能够通过文件上传进行提交的文件类型。</li><li>disable 当 input 元素加载时禁用此元素。disabled=”disabled” 可简写为 disabled。</li><li>required 属性规定必需在提交之前填写输入字段。</li></ul><h4 id="autocomplete"><a href="#autocomplete" class="headerlink" title="autocomplete"></a>autocomplete</h4><p><code>autocomplete</code> 规定是否使用输入字段的自动提示功能。</p><table><thead><tr><th>值</th><th>说明</th></tr></thead><tbody><tr><td><code>on</code></td><td>开启</td></tr><tr><td><code>off</code></td><td>关闭</td></tr></tbody></table><h4 id="type"><a href="#type" class="headerlink" title="type"></a>type</h4><p><code>type</code> 规定 input 元素的类型。参数如下：</p><table><thead><tr><th>值</th><th>说明</th></tr></thead><tbody><tr><td><code>text</code></td><td>文本输入框</td></tr><tr><td><code>password</code></td><td>密码输入框</td></tr><tr><td><code>date</code></td><td>日期输入框</td></tr><tr><td><code>color</code></td><td>颜色输入框</td></tr><tr><td><code>file</code></td><td>文件输入框</td></tr><tr><td><code>checkbox</code></td><td>复选框</td></tr><tr><td><code>radio</code></td><td>单选框</td></tr><tr><td><code>submit</code></td><td>提交按钮</td></tr></tbody></table><h3 id="button"><a href="#button" class="headerlink" title="button"></a>button</h3><p><code>&lt;button&gt;</code> 标签定义一个按钮。button 标签会提交表单，而 input 标签 type 属性为 button 不会对表单进行任何操作。</p><h3 id="label"><a href="#label" class="headerlink" title="label"></a>label</h3><p><code>&lt;label&gt;</code> 定义 input 标签的备注。</p><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><p><code>for</code> 属性规定 label 绑定到哪个表单元素（input）。该属性值指向某个 input 元素的 id 时，当点击 label 的时会触发该 input 元素。</p><h3 id="textarea"><a href="#textarea" class="headerlink" title="textarea"></a>textarea</h3><p><code>&lt;textarea&gt;</code> 定义多行的文本输入控件。</p><h4 id="属性说明-5"><a href="#属性说明-5" class="headerlink" title="属性说明"></a>属性说明</h4><ul><li><code>name</code> 定义文本区的名称。</li><li><code>rows</code> 定义文本区的可见行数。</li><li><code>cols</code> 定义文本区的可见宽度。</li></ul><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><p><code>&lt;select&gt;</code> 定义选择列表。</p><h4 id="name-1"><a href="#name-1" class="headerlink" title="name"></a>name</h4><p><code>name</code> 规定下拉列表的名称。</p><h3 id="option"><a href="#option" class="headerlink" title="option"></a>option</h3><p><code>&lt;option&gt;</code> 定义选择列表中的项目。</p><h4 id="value"><a href="#value" class="headerlink" title="value"></a>value</h4><p><code>value</code> 定义送往服务器的选项值。</p><h3 id="fieldset"><a href="#fieldset" class="headerlink" title="fieldset"></a>fieldset</h3><p><code>&lt;fieldset&gt;</code> 标签可将表单内的相关元素分组。一个表单（form）可以有多个 fieldset。</p><h3 id="legend"><a href="#legend" class="headerlink" title="legend"></a>legend</h3><p><code>&lt;legend&gt;</code> 标签为 <code>&lt;fieldset&gt;</code> 标签定义标题。</p><h2 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h2><ul><li>h1~h6，分级标题， <code>&lt;h1&gt;</code> 与 <code>&lt;title&gt;</code> 协调有利于搜索引擎优化。</li><li><code>&lt;p&gt;</code> 标签的含义是：段落。</li><li><code>&lt;header&gt;</code> 标签定义文档的页眉（介绍信息）。</li><li><code>&lt;nav&gt;</code> 标签定义导航链接的部分。</li><li><code>&lt;article&gt;</code> 包含像报纸一样的内容（文章标签，一篇文章通常包含文字、 图片）。</li><li><code>&lt;section&gt;</code> 具有相似主题的一组内容，比如网站的主页可以分成介绍、新闻条目、联系信息等条块（类似 div）。</li><li><code>&lt;main&gt;</code> 页面主要内容，一个页面只能使用一次（类似 header、 main、 footer 这样的结构）。</li><li><code>&lt;aside&gt;</code> 侧边栏。</li><li><code>&lt;footer&gt;</code> 标签定义文档或节的页脚。</li></ul><h2 id="audio"><a href="#audio" class="headerlink" title="audio"></a>audio</h2><p><code>&lt;audio&gt;</code> 标签定义声音，比如音乐或其他音频流。 <code>&lt;audio&gt;</code> 标签是 HTML5 的新标签。可以在开始标签和结束标签之间放置文本内容，这样老的浏览器就可以显示出不支持该标签的信息。</p><h3 id="属性说明-6"><a href="#属性说明-6" class="headerlink" title="属性说明"></a>属性说明</h3><ul><li><code>src</code> 播放的音频的 URL。</li><li><code>controls</code> 向用户显示控件，比如播放按钮。</li><li><code>autoplay</code> 音频在就绪后马上播放。</li><li><code>loop</code> 如果出现该属性，则每当音频结束时重新开始播放。</li></ul><h2 id="video"><a href="#video" class="headerlink" title="video"></a>video</h2><p><code>&lt;video&gt;</code> 标签定义视频。可以在开始标签和结束标签之间放置文本内容，这样老的浏览器就可以显示出不支持该标签的信息。</p><h3 id="属性说明-7"><a href="#属性说明-7" class="headerlink" title="属性说明"></a>属性说明</h3><ul><li><code>src</code> 播放的音频的 URL。</li><li><code>controls</code> 向用户显示控件，比如播放按钮。</li><li><code>autoplay</code> 音频在就绪后马上播放。</li><li><code>loop</code> 如果出现该属性，则当媒介文件完成播放后再次开始播放。</li><li><code>muted</code> 规定视频的音频输出应该被静音。</li><li><code>poster</code> 规定视频下载时显示的图像，或者在用户点击播放按钮前显示的图像。</li></ul><h2 id="template"><a href="#template" class="headerlink" title="template"></a>template</h2><p><code>&lt;template&gt;</code> 声明“模板元素”。不存在 type=”text/template”这样的标准写法， <code>&lt;template&gt;</code> 元素的出现旨在让 HTML 模板 HTML 变得更加标准与规范。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/template"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><h3 id="table"><a href="#table" class="headerlink" title="table"></a>table</h3><p><code>&lt;table&gt;</code> 标签定义 HTML 表格。</p><h4 id="属性说明-8"><a href="#属性说明-8" class="headerlink" title="属性说明"></a>属性说明</h4><ul><li><code>cellpadding</code> 规定单元边沿与其内容之间的空白。</li><li><code>cellspacing</code> 规定单元格之间的空白。</li></ul><h3 id="caption"><a href="#caption" class="headerlink" title="caption"></a>caption</h3><p><code>&lt;caption&gt;</code> 标签定义表格标题。 <code>&lt;caption&gt;</code> 标签必须紧随 table 标签之后。您只能对每个表格定义一个标题。通常这个标题会被居中于表格之上。 <code>&lt;caption&gt;</code> 不需要嵌套在 <code>&lt;tr&gt;</code> 标签中。</p><h3 id="tr"><a href="#tr" class="headerlink" title="tr"></a>tr</h3><p><code>&lt;tr&gt;</code> 定义表格中的行。</p><h3 id="th"><a href="#th" class="headerlink" title="th"></a>th</h3><p><code>&lt;th&gt;</code> 定义表格内的表头单元格。</p><h4 id="属性说明-9"><a href="#属性说明-9" class="headerlink" title="属性说明"></a>属性说明</h4><ul><li><code>rowspan</code> 规定单元格可横跨的行数。</li><li><code>colspan</code> 设置单元格可横跨的列数。</li><li><code>align</code> 规定单元格内容的水平对齐方式。</li></ul><h3 id="td"><a href="#td" class="headerlink" title="td"></a>td</h3><ul><li><code>&lt;td&gt;</code> 定义表格中的标准单元格。</li></ul><h4 id="属性说明-10"><a href="#属性说明-10" class="headerlink" title="属性说明"></a>属性说明</h4><ul><li><code>rowspan</code> 规定单元格可横跨的行数。</li><li><code>colspan</code> 设置单元格可横跨的列数。</li><li><code>align</code> 规定单元格内容的水平对齐方式。</li></ul><h3 id="colgroup"><a href="#colgroup" class="headerlink" title="colgroup"></a>colgroup</h3><p><code>&lt;colgroup&gt;</code> 标签定义表格列的组。通过此标签，您可以对列进行组合，以便格式化。<code>&lt;colgroup&gt;</code> 标签在 4.01 中的大多数属性在 html5 中都不再得到支持。</p><p><code>&lt;colgroup&gt;</code> 标签只能在 <code>&lt;table&gt;</code> 元素之内，在任何一个 <code>&lt;caption&gt;</code> 元素之后，在任何一个 <code>&lt;thead&gt;</code> 、 <code>&lt;tbody&gt;</code> 、 <code>&lt;tfoot&gt;</code> 、 <code>&lt;tr&gt;</code> 元素之前使用 <code>&lt;colgroup&gt;</code> 标签。colgroup 元素只能包含 col 元素。</p><p>如果想对 <code>&lt;colgroup&gt;</code> 中的某列定义不同的属性，请在 <code>&lt;colgroup&gt;</code> 标签内使用 <code>&lt;col&gt;</code> 标签。</p><h3 id="col"><a href="#col" class="headerlink" title="col"></a>col</h3><p><code>&lt;col&gt;</code> 标签规定了 <code>&lt;colgroup&gt;</code> 元素内部的每一列的列属性。通过使用 <code>&lt;col&gt;</code> 标签，可以向整个列应用样式，而不需要重复为每个单元格或每一行设置样式。HTML5 中不再支持 HTML 4.01 中的大部分属性。</p><h2 id="HTML5-表格"><a href="#HTML5-表格" class="headerlink" title="HTML5 表格"></a>HTML5 表格</h2><ul><li><code>&lt;thead&gt;</code> 标签定义表格的表头。</li><li><code>&lt;tbody&gt;</code> 标签用于对 HTML 表格中的主体内容进行分组。</li><li><code>&lt;tfoot&gt;</code> 标签用于对 HTML 表格中的表注（页脚）内容进行分组。</li></ul><p>结构如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>Month<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>Savings<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>Sum<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>$180<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>January<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>$100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>February<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>$80<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="object"><a href="#object" class="headerlink" title="object"></a>object</h2><p><code>&lt;object&gt;</code> 标签用于包含对象，比如图像、音频、视频、Java applets、ActiveX、PDF 以及 Flash。</p><p>object 的初衷是取代 img 和 applet 元素。不过由于漏洞以及缺乏浏览器支持，这一点并未实现。</p><h2 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h2><p>iframe 元素会创建包含另外一个文档的内联框架。</p><h3 id="src-1"><a href="#src-1" class="headerlink" title="src"></a>src</h3><p><code>src</code> 规定在 iframe 中显示的文档的 URL。</p><h3 id="scrolling"><a href="#scrolling" class="headerlink" title="scrolling"></a>scrolling</h3><p><code>scrolling</code> 规定是否在 iframe 中显示滚动条。参数如下：<code>yes</code> | <code>no</code></p><h3 id="frameborder"><a href="#frameborder" class="headerlink" title="frameborder"></a>frameborder</h3><p><code>frameborder</code> 规定是否显示框架周围的边框。</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>显示</td></tr><tr><td>0</td><td>不显示</td></tr></tbody></table><h2 id="canvas"><a href="#canvas" class="headerlink" title="canvas"></a>canvas</h2><p><code>&lt;canvas&gt;</code> 标签只有两个属性——width 和 height。当没有设置宽度和高度，canvas 会初始化宽度为 300 像素和高度为 150 像素。</p><p>该元素可以使用 CSS 来定义大小，但在绘制时图像会伸缩以适应它的框架尺寸：CSS 的尺寸与初始画布的比例不一致，它会出现扭曲。</p><p>支持 <code>&lt;canvas&gt;</code> 的浏览器会忽略在容器中包含的内容，并且只是正常渲染 canvas。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>教程</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML 入门之基本概念</title>
    <url>/posts/48522/</url>
    <content><![CDATA[<!-- build time:Wed Sep 21 2022 03:31:56 GMT+0800 (GMT+08:00) --><p>这是一遍关于 HTML 的入门笔记。HTML 是一种用于创建网页的标准标记语言。您可以使用 HTML 来建立自己的 WEB 站点，HTML 运行在浏览器上，由浏览器来解析。</p><a id="more"></a><hr><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>WEB 指的是计算机领域的网站及相关技术。</li><li>WAP 指无线设备的网页协议，也就是手机网站，目前最新的是 H5 手机网页。</li><li>HTML 指的是超文本标记语言。</li></ul><h2 id="基本结构说明"><a href="#基本结构说明" class="headerlink" title="基本结构说明"></a>基本结构说明</h2><ul><li><code>&lt;html&gt;</code> 表示代码是 html，主要包含 head 和 body 两部分。</li><li><code>&lt;head&gt;</code> 头部，这部分包含显示在网页标题栏中的标题和其他在网页中不显示的信息。</li><li><code>&lt;head&gt;</code> 标签中的信息一般是不显示出来的，但是记录了你这个 HTML 文件的很多有用的信息。</li><li><code>&lt;title&gt;</code> 设置 HTML 文档的标题。</li><li><code>&lt;meta&gt;</code> 元标签。描述网页文档属性。</li><li><code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code> 网页文档使用 UTF-8 方式编码。</li><li><code>&lt;body&gt;</code> 主体部分，显示页面中的文字图像连接等等。标签之间的信息，是要在网页中展现出来的。</li><li><code>&lt;!DOCTYPE html&gt;</code> 表示该页面采用了 HTML5 标准，这样做可以增强页面的兼容性，降低对浏览器的依赖性。不加该标签，表示页面采用浏览器本身的解析标准，这样会造成页面在不同浏览器出现不同的显示效果。</li></ul><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><table><thead><tr><th>转义字符</th><th>说明</th></tr></thead><tbody><tr><td><code>&amp;nbsp;</code></td><td>空格。</td></tr></tbody></table><h2 id="HTML-注释"><a href="#HTML-注释" class="headerlink" title="HTML 注释"></a>HTML 注释</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 内容 --&gt;</span></span><br></pre></td></tr></table></figure><h2 id="XHTML"><a href="#XHTML" class="headerlink" title="XHTML"></a>XHTML</h2><ul><li>XHTML 比 HTML 语法较为严谨规范。XHTML 可以很好处理各大浏览器的兼容。</li><li>DOCTYPE 文档与编码声明更加复杂。</li><li>标签都必须小写。</li><li>单标签必须写成 <code>&lt;br/&gt;</code> 形式，不能写成 <code>&lt;br&gt;</code> 这种形式。</li><li>双标签必须成双成对，HTML 闭合标签可不写。</li><li>元素布尔值不可简写。</li><li>属性引号不可省略，HTML 属性引号可不写。</li><li>img 标签 alt 属性不可省略。</li></ul><h2 id="全局属性"><a href="#全局属性" class="headerlink" title="全局属性"></a>全局属性</h2><table><thead><tr><th align="left">属性</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">id</td><td align="left">规定元素的唯一 id。</td></tr><tr><td align="left">class</td><td align="left">规定元素的一个或多个类名（引用样式表中的类）。</td></tr><tr><td align="left">title</td><td align="left">规定有关元素的额外信息。</td></tr><tr><td align="left">style</td><td align="left">规定元素的行内 CSS 样式。</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>教程</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
</search>
